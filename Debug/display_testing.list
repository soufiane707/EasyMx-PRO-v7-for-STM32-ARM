
display_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b2c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f88  08004d10  08004d10  00005d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c98  08005c98  00007018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005c98  08005c98  00006c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ca0  08005ca0  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ca0  08005ca0  00006ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ca4  08005ca4  00006ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005ca8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000018  08005cc0  00007018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08005cc0  000070a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abad  00000000  00000000  00007041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001929  00000000  00000000  00011bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00013518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001ed55  00000000  00000000  000140f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000cd64  00000000  00000000  00032e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b8ba7  00000000  00000000  0003fbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000f8758  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000929  00000000  00000000  000f879b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000324c  00000000  00000000  000f90c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000fc310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000018 	.word	0x20000018
 8000200:	00000000 	.word	0x00000000
 8000204:	08004cf8 	.word	0x08004cf8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000001c 	.word	0x2000001c
 8000220:	08004cf8 	.word	0x08004cf8

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b98c 	b.w	8000554 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	468e      	mov	lr, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14a      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000264:	428a      	cmp	r2, r1
 8000266:	4617      	mov	r7, r2
 8000268:	d962      	bls.n	8000330 <__udivmoddi4+0xdc>
 800026a:	fab2 f682 	clz	r6, r2
 800026e:	b14e      	cbz	r6, 8000284 <__udivmoddi4+0x30>
 8000270:	f1c6 0320 	rsb	r3, r6, #32
 8000274:	fa01 f806 	lsl.w	r8, r1, r6
 8000278:	fa20 f303 	lsr.w	r3, r0, r3
 800027c:	40b7      	lsls	r7, r6
 800027e:	ea43 0808 	orr.w	r8, r3, r8
 8000282:	40b4      	lsls	r4, r6
 8000284:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	fa1f fc87 	uxth.w	ip, r7
 8000290:	fb0e 8811 	mls	r8, lr, r1, r8
 8000294:	fb01 f20c 	mul.w	r2, r1, ip
 8000298:	0c23      	lsrs	r3, r4, #16
 800029a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029e:	429a      	cmp	r2, r3
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0x62>
 80002a2:	18fb      	adds	r3, r7, r3
 80002a4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a8:	f080 80eb 	bcs.w	8000482 <__udivmoddi4+0x22e>
 80002ac:	429a      	cmp	r2, r3
 80002ae:	f240 80e8 	bls.w	8000482 <__udivmoddi4+0x22e>
 80002b2:	3902      	subs	r1, #2
 80002b4:	443b      	add	r3, r7
 80002b6:	1a9a      	subs	r2, r3, r2
 80002b8:	fbb2 f0fe 	udiv	r0, r2, lr
 80002bc:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ca:	459c      	cmp	ip, r3
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d4:	f080 80d7 	bcs.w	8000486 <__udivmoddi4+0x232>
 80002d8:	459c      	cmp	ip, r3
 80002da:	f240 80d4 	bls.w	8000486 <__udivmoddi4+0x232>
 80002de:	443b      	add	r3, r7
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e6:	2100      	movs	r1, #0
 80002e8:	eba3 030c 	sub.w	r3, r3, ip
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa2>
 80002ee:	2200      	movs	r2, #0
 80002f0:	40f3      	lsrs	r3, r6
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xb6>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb0>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa2>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x14c>
 8000312:	4573      	cmp	r3, lr
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xc8>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 8108 	bhi.w	800052c <__udivmoddi4+0x2d8>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000322:	2001      	movs	r0, #1
 8000324:	4690      	mov	r8, r2
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e5      	beq.n	80002f6 <__udivmoddi4+0xa2>
 800032a:	e9c5 4800 	strd	r4, r8, [r5]
 800032e:	e7e2      	b.n	80002f6 <__udivmoddi4+0xa2>
 8000330:	2a00      	cmp	r2, #0
 8000332:	f000 8091 	beq.w	8000458 <__udivmoddi4+0x204>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	2e00      	cmp	r6, #0
 800033c:	f040 80a5 	bne.w	800048a <__udivmoddi4+0x236>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	2101      	movs	r1, #1
 8000344:	0c03      	lsrs	r3, r0, #16
 8000346:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034a:	b280      	uxth	r0, r0
 800034c:	b2bc      	uxth	r4, r7
 800034e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000352:	fb0e 221c 	mls	r2, lr, ip, r2
 8000356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800035a:	fb04 f20c 	mul.w	r2, r4, ip
 800035e:	429a      	cmp	r2, r3
 8000360:	d907      	bls.n	8000372 <__udivmoddi4+0x11e>
 8000362:	18fb      	adds	r3, r7, r3
 8000364:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x11c>
 800036a:	429a      	cmp	r2, r3
 800036c:	f200 80e3 	bhi.w	8000536 <__udivmoddi4+0x2e2>
 8000370:	46c4      	mov	ip, r8
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	fbb3 f2fe 	udiv	r2, r3, lr
 8000378:	fb0e 3312 	mls	r3, lr, r2, r3
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000384:	429c      	cmp	r4, r3
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0x144>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f102 30ff 	add.w	r0, r2, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x142>
 8000390:	429c      	cmp	r4, r3
 8000392:	f200 80cd 	bhi.w	8000530 <__udivmoddi4+0x2dc>
 8000396:	4602      	mov	r2, r0
 8000398:	1b1b      	subs	r3, r3, r4
 800039a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x98>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa2e fa06 	lsr.w	sl, lr, r6
 80003b0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b4:	fbba f8f9 	udiv	r8, sl, r9
 80003b8:	fa0e fe01 	lsl.w	lr, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fb09 aa18 	mls	sl, r9, r8, sl
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	ea43 030e 	orr.w	r3, r3, lr
 80003cc:	fa00 fe01 	lsl.w	lr, r0, r1
 80003d0:	fb08 f00c 	mul.w	r0, r8, ip
 80003d4:	0c1c      	lsrs	r4, r3, #16
 80003d6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003da:	42a0      	cmp	r0, r4
 80003dc:	fa02 f201 	lsl.w	r2, r2, r1
 80003e0:	d90a      	bls.n	80003f8 <__udivmoddi4+0x1a4>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 809e 	bcs.w	8000528 <__udivmoddi4+0x2d4>
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	f240 809b 	bls.w	8000528 <__udivmoddi4+0x2d4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	443c      	add	r4, r7
 80003f8:	1a24      	subs	r4, r4, r0
 80003fa:	b298      	uxth	r0, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800040c:	45a4      	cmp	ip, r4
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1d0>
 8000410:	193c      	adds	r4, r7, r4
 8000412:	f103 30ff 	add.w	r0, r3, #4294967295
 8000416:	f080 8085 	bcs.w	8000524 <__udivmoddi4+0x2d0>
 800041a:	45a4      	cmp	ip, r4
 800041c:	f240 8082 	bls.w	8000524 <__udivmoddi4+0x2d0>
 8000420:	3b02      	subs	r3, #2
 8000422:	443c      	add	r4, r7
 8000424:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000428:	eba4 040c 	sub.w	r4, r4, ip
 800042c:	fba0 8c02 	umull	r8, ip, r0, r2
 8000430:	4564      	cmp	r4, ip
 8000432:	4643      	mov	r3, r8
 8000434:	46e1      	mov	r9, ip
 8000436:	d364      	bcc.n	8000502 <__udivmoddi4+0x2ae>
 8000438:	d061      	beq.n	80004fe <__udivmoddi4+0x2aa>
 800043a:	b15d      	cbz	r5, 8000454 <__udivmoddi4+0x200>
 800043c:	ebbe 0203 	subs.w	r2, lr, r3
 8000440:	eb64 0409 	sbc.w	r4, r4, r9
 8000444:	fa04 f606 	lsl.w	r6, r4, r6
 8000448:	fa22 f301 	lsr.w	r3, r2, r1
 800044c:	431e      	orrs	r6, r3
 800044e:	40cc      	lsrs	r4, r1
 8000450:	e9c5 6400 	strd	r6, r4, [r5]
 8000454:	2100      	movs	r1, #0
 8000456:	e74e      	b.n	80002f6 <__udivmoddi4+0xa2>
 8000458:	fbb1 fcf2 	udiv	ip, r1, r2
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000462:	b280      	uxth	r0, r0
 8000464:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000468:	463b      	mov	r3, r7
 800046a:	fbb1 f1f7 	udiv	r1, r1, r7
 800046e:	4638      	mov	r0, r7
 8000470:	463c      	mov	r4, r7
 8000472:	46b8      	mov	r8, r7
 8000474:	46be      	mov	lr, r7
 8000476:	2620      	movs	r6, #32
 8000478:	eba2 0208 	sub.w	r2, r2, r8
 800047c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000480:	e765      	b.n	800034e <__udivmoddi4+0xfa>
 8000482:	4601      	mov	r1, r0
 8000484:	e717      	b.n	80002b6 <__udivmoddi4+0x62>
 8000486:	4610      	mov	r0, r2
 8000488:	e72b      	b.n	80002e2 <__udivmoddi4+0x8e>
 800048a:	f1c6 0120 	rsb	r1, r6, #32
 800048e:	fa2e fc01 	lsr.w	ip, lr, r1
 8000492:	40b7      	lsls	r7, r6
 8000494:	fa0e fe06 	lsl.w	lr, lr, r6
 8000498:	fa20 f101 	lsr.w	r1, r0, r1
 800049c:	ea41 010e 	orr.w	r1, r1, lr
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	fbbc f8fe 	udiv	r8, ip, lr
 80004a8:	b2bc      	uxth	r4, r7
 80004aa:	fb0e cc18 	mls	ip, lr, r8, ip
 80004ae:	fb08 f904 	mul.w	r9, r8, r4
 80004b2:	0c0a      	lsrs	r2, r1, #16
 80004b4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80004b8:	40b0      	lsls	r0, r6
 80004ba:	4591      	cmp	r9, r2
 80004bc:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c0:	b280      	uxth	r0, r0
 80004c2:	d93e      	bls.n	8000542 <__udivmoddi4+0x2ee>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f108 3cff 	add.w	ip, r8, #4294967295
 80004ca:	d201      	bcs.n	80004d0 <__udivmoddi4+0x27c>
 80004cc:	4591      	cmp	r9, r2
 80004ce:	d81f      	bhi.n	8000510 <__udivmoddi4+0x2bc>
 80004d0:	eba2 0209 	sub.w	r2, r2, r9
 80004d4:	fbb2 f9fe 	udiv	r9, r2, lr
 80004d8:	fb09 f804 	mul.w	r8, r9, r4
 80004dc:	fb0e 2a19 	mls	sl, lr, r9, r2
 80004e0:	b28a      	uxth	r2, r1
 80004e2:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80004e6:	4542      	cmp	r2, r8
 80004e8:	d229      	bcs.n	800053e <__udivmoddi4+0x2ea>
 80004ea:	18ba      	adds	r2, r7, r2
 80004ec:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f0:	d2c2      	bcs.n	8000478 <__udivmoddi4+0x224>
 80004f2:	4542      	cmp	r2, r8
 80004f4:	d2c0      	bcs.n	8000478 <__udivmoddi4+0x224>
 80004f6:	f1a9 0102 	sub.w	r1, r9, #2
 80004fa:	443a      	add	r2, r7
 80004fc:	e7bc      	b.n	8000478 <__udivmoddi4+0x224>
 80004fe:	45c6      	cmp	lr, r8
 8000500:	d29b      	bcs.n	800043a <__udivmoddi4+0x1e6>
 8000502:	ebb8 0302 	subs.w	r3, r8, r2
 8000506:	eb6c 0c07 	sbc.w	ip, ip, r7
 800050a:	3801      	subs	r0, #1
 800050c:	46e1      	mov	r9, ip
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1e6>
 8000510:	eba7 0909 	sub.w	r9, r7, r9
 8000514:	444a      	add	r2, r9
 8000516:	fbb2 f9fe 	udiv	r9, r2, lr
 800051a:	f1a8 0c02 	sub.w	ip, r8, #2
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7db      	b.n	80004dc <__udivmoddi4+0x288>
 8000524:	4603      	mov	r3, r0
 8000526:	e77d      	b.n	8000424 <__udivmoddi4+0x1d0>
 8000528:	46d0      	mov	r8, sl
 800052a:	e765      	b.n	80003f8 <__udivmoddi4+0x1a4>
 800052c:	4608      	mov	r0, r1
 800052e:	e6fa      	b.n	8000326 <__udivmoddi4+0xd2>
 8000530:	443b      	add	r3, r7
 8000532:	3a02      	subs	r2, #2
 8000534:	e730      	b.n	8000398 <__udivmoddi4+0x144>
 8000536:	f1ac 0c02 	sub.w	ip, ip, #2
 800053a:	443b      	add	r3, r7
 800053c:	e719      	b.n	8000372 <__udivmoddi4+0x11e>
 800053e:	4649      	mov	r1, r9
 8000540:	e79a      	b.n	8000478 <__udivmoddi4+0x224>
 8000542:	eba2 0209 	sub.w	r2, r2, r9
 8000546:	fbb2 f9fe 	udiv	r9, r2, lr
 800054a:	46c4      	mov	ip, r8
 800054c:	fb09 f804 	mul.w	r8, r9, r4
 8000550:	e7c4      	b.n	80004dc <__udivmoddi4+0x288>
 8000552:	bf00      	nop

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f003 f8a9 	bl	80036b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f83b 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 f8d7 	bl	8000718 <MX_GPIO_Init>
  MX_TIM1_Init();
 800056a:	f000 f885 	bl	8000678 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 800056e:	4817      	ldr	r0, [pc, #92]	@ (80005cc <main+0x74>)
 8000570:	f004 f908 	bl	8004784 <HAL_TIM_Base_Start>


  ID = readID();
 8000574:	f001 faa2 	bl	8001abc <readID>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <main+0x78>)
 800057e:	801a      	strh	r2, [r3, #0]

  HAL_Delay(100);
 8000580:	2064      	movs	r0, #100	@ 0x64
 8000582:	f003 f8f9 	bl	8003778 <HAL_Delay>

  tft_init (ID);
 8000586:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <main+0x78>)
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fed8 	bl	8001340 <tft_init>

  setRotation(0);
 8000590:	2000      	movs	r0, #0
 8000592:	f001 febb 	bl	800230c <setRotation>

  fillScreen(BLACK);
 8000596:	2000      	movs	r0, #0
 8000598:	f002 fc1e 	bl	8002dd8 <fillScreen>
//  testLines(CYAN);
//  testFastLines(RED, BLUE);
//  testFilledCircles(10, MAGENTA);
//  testCircles(10, WHITE);

  fillScreen(BLACK);
 800059c:	2000      	movs	r0, #0
 800059e:	f002 fc1b 	bl	8002dd8 <fillScreen>

  setRotation(0);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f001 feb2 	bl	800230c <setRotation>

  printnewtstr(100, RED, &mono12x7bold, 1, "yes I am working dude");
 80005a8:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <main+0x7c>)
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2301      	movs	r3, #1
 80005ae:	4a0a      	ldr	r2, [pc, #40]	@ (80005d8 <main+0x80>)
 80005b0:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80005b4:	2064      	movs	r0, #100	@ 0x64
 80005b6:	f002 ffc1 	bl	800353c <printnewtstr>

  scrollup(100);
 80005ba:	2064      	movs	r0, #100	@ 0x64
 80005bc:	f003 f816 	bl	80035ec <scrollup>

  invertDisplay(1);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f002 fc23 	bl	8002e0c <invertDisplay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c6:	bf00      	nop
 80005c8:	e7fd      	b.n	80005c6 <main+0x6e>
 80005ca:	bf00      	nop
 80005cc:	20000038 	.word	0x20000038
 80005d0:	20000080 	.word	0x20000080
 80005d4:	08004d10 	.word	0x08004d10
 80005d8:	080056e8 	.word	0x080056e8

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	2238      	movs	r2, #56	@ 0x38
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f004 fb58 	bl	8004ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fe:	2301      	movs	r3, #1
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000602:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000618:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800061c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800061e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000622:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0318 	add.w	r3, r7, #24
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fb47 	bl	8003cc0 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000638:	f000 f8a2 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800064c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f003 fe48 	bl	80042ec <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000662:	f000 f88d 	bl	8000780 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000666:	4b03      	ldr	r3, [pc, #12]	@ (8000674 <SystemClock_Config+0x98>)
 8000668:	2201      	movs	r2, #1
 800066a:	601a      	str	r2, [r3, #0]
}
 800066c:	bf00      	nop
 800066e:	3750      	adds	r7, #80	@ 0x50
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	42420070 	.word	0x42420070

08000678 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000694:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <MX_TIM1_Init+0x98>)
 8000696:	4a1f      	ldr	r2, [pc, #124]	@ (8000714 <MX_TIM1_Init+0x9c>)
 8000698:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800069a:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <MX_TIM1_Init+0x98>)
 800069c:	2247      	movs	r2, #71	@ 0x47
 800069e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <MX_TIM1_Init+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <MX_TIM1_Init+0x98>)
 80006a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <MX_TIM1_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <MX_TIM1_Init+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <MX_TIM1_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c0:	4813      	ldr	r0, [pc, #76]	@ (8000710 <MX_TIM1_Init+0x98>)
 80006c2:	f004 f80f 	bl	80046e4 <HAL_TIM_Base_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006cc:	f000 f858 	bl	8000780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	4619      	mov	r1, r3
 80006dc:	480c      	ldr	r0, [pc, #48]	@ (8000710 <MX_TIM1_Init+0x98>)
 80006de:	f004 f8a3 	bl	8004828 <HAL_TIM_ConfigClockSource>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006e8:	f000 f84a 	bl	8000780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ec:	2300      	movs	r3, #0
 80006ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_TIM1_Init+0x98>)
 80006fa:	f004 fa6b 	bl	8004bd4 <HAL_TIMEx_MasterConfigSynchronization>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000704:	f000 f83c 	bl	8000780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000038 	.word	0x20000038
 8000714:	40012c00 	.word	0x40012c00

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_GPIO_Init+0x60>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a11      	ldr	r2, [pc, #68]	@ (8000778 <MX_GPIO_Init+0x60>)
 8000732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_GPIO_Init+0x60>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000744:	2200      	movs	r2, #0
 8000746:	f649 71ff 	movw	r1, #40959	@ 0x9fff
 800074a:	480c      	ldr	r0, [pc, #48]	@ (800077c <MX_GPIO_Init+0x64>)
 800074c:	f003 faa0 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000750:	f649 73ff 	movw	r3, #40959	@ 0x9fff
 8000754:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2302      	movs	r3, #2
 8000760:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	4619      	mov	r1, r3
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_GPIO_Init+0x64>)
 800076a:	f003 f90d 	bl	8003988 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000
 800077c:	40011800 	.word	0x40011800

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <Error_Handler+0x8>

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <HAL_MspInit+0x5c>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	4a14      	ldr	r2, [pc, #80]	@ (80007e8 <HAL_MspInit+0x5c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6193      	str	r3, [r2, #24]
 800079e:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a0e      	ldr	r2, [pc, #56]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <HAL_MspInit+0x5c>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80007c2:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <HAL_MspInit+0x60>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	4a04      	ldr	r2, [pc, #16]	@ (80007ec <HAL_MspInit+0x60>)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010000 	.word	0x40010000

080007f0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a09      	ldr	r2, [pc, #36]	@ (8000824 <HAL_TIM_Base_MspInit+0x34>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d10b      	bne.n	800081a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <HAL_TIM_Base_MspInit+0x38>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a08      	ldr	r2, [pc, #32]	@ (8000828 <HAL_TIM_Base_MspInit+0x38>)
 8000808:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800080c:	6193      	str	r3, [r2, #24]
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <HAL_TIM_Base_MspInit+0x38>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	40012c00 	.word	0x40012c00
 8000828:	40021000 	.word	0x40021000

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <NMI_Handler+0x4>

08000834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <MemManage_Handler+0x4>

08000844 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <UsageFault_Handler+0x4>

08000854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f002 ff60 	bl	8003740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000898:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <delay+0x2c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2200      	movs	r2, #0
 800089e:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 80008a0:	bf00      	nop
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <delay+0x2c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d8f9      	bhi.n	80008a2 <delay+0x12>
}
 80008ae:	bf00      	nop
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000038 	.word	0x20000038

080008c0 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80008cc:	887b      	ldrh	r3, [r7, #2]
 80008ce:	2200      	movs	r2, #0
 80008d0:	4619      	mov	r1, r3
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f003 f9dc 	bl	8003c90 <HAL_GPIO_WritePin>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80008ec:	887b      	ldrh	r3, [r7, #2]
 80008ee:	2201      	movs	r2, #1
 80008f0:	4619      	mov	r1, r3
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f003 f9cc 	bl	8003c90 <HAL_GPIO_WritePin>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 800090c:	887b      	ldrh	r3, [r7, #2]
 800090e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000914:	2301      	movs	r3, #1
 8000916:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	4619      	mov	r1, r3
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f003 f832 	bl	8003988 <HAL_GPIO_Init>
}
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000938:	887b      	ldrh	r3, [r7, #2]
 800093a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	4619      	mov	r1, r3
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f003 f81a 	bl	8003988 <HAL_GPIO_Init>
}
 8000954:	bf00      	nop
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
 8000960:	4b02      	ldr	r3, [pc, #8]	@ (800096c <width+0x10>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	20000004 	.word	0x20000004

08000970 <height>:

uint16_t height(void)
{ return _height; }
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
 8000974:	4b02      	ldr	r3, [pc, #8]	@ (8000980 <height+0x10>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	20000006 	.word	0x20000006

08000984 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 800098e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000992:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000996:	b21a      	sxth	r2, r3
 8000998:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	b21b      	sxth	r3, r3
 80009a0:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80009a4:	b21b      	sxth	r3, r3
 80009a6:	4313      	orrs	r3, r2
 80009a8:	b21a      	sxth	r2, r3
 80009aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	4313      	orrs	r3, r2
 80009b6:	b21b      	sxth	r3, r3
 80009b8:	b29b      	uxth	r3, r3
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 80009ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	115b      	asrs	r3, r3, #5
 80009dc:	b21b      	sxth	r3, r3
 80009de:	f003 0320 	and.w	r3, r3, #32
 80009e2:	b21b      	sxth	r3, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	b21a      	sxth	r2, r3
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	105b      	asrs	r3, r3, #1
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	f003 031f 	and.w	r3, r3, #31
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b21b      	sxth	r3, r3
 80009f8:	b29b      	uxth	r3, r3
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	121b      	asrs	r3, r3, #8
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	f023 0307 	bic.w	r3, r3, #7
 8000a18:	b2db      	uxtb	r3, r3
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	10db      	asrs	r3, r3, #3
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	f023 0303 	bic.w	r3, r3, #3
 8000a38:	b2db      	uxtb	r3, r3
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	b2db      	uxtb	r3, r3
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	71bb      	strb	r3, [r7, #6]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	717b      	strb	r3, [r7, #5]
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	b21b      	sxth	r3, r3
 8000a76:	021b      	lsls	r3, r3, #8
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000a7e:	f023 0307 	bic.w	r3, r3, #7
 8000a82:	b21a      	sxth	r2, r3
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8000a90:	b21b      	sxth	r3, r3
 8000a92:	4313      	orrs	r3, r2
 8000a94:	b21a      	sxth	r2, r3
 8000a96:	797b      	ldrb	r3, [r7, #5]
 8000a98:	08db      	lsrs	r3, r3, #3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	b21b      	sxth	r3, r3
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af02      	add	r7, sp, #8
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	460a      	mov	r2, r1
 8000ab8:	80fb      	strh	r3, [r7, #6]
 8000aba:	4613      	mov	r3, r2
 8000abc:	80bb      	strh	r3, [r7, #4]
 8000abe:	f107 020e 	add.w	r2, r7, #14
 8000ac2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000ac6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000aca:	2301      	movs	r3, #1
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f001 f934 	bl	8001d3c <readGRAM>
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	460a      	mov	r2, r1
 8000ae8:	80fb      	strh	r3, [r7, #6]
 8000aea:	4613      	mov	r3, r2
 8000aec:	80bb      	strh	r3, [r7, #4]
 8000aee:	88ba      	ldrh	r2, [r7, #4]
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f8c3 	bl	8000c80 <writecmddata>
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	6039      	str	r1, [r7, #0]
 8000b0c:	80fb      	strh	r3, [r7, #6]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	717b      	strb	r3, [r7, #5]
 8000b12:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f000 f936 	bl	8000d8c <WriteCmdParamN>
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <setReadDir>:


//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	4810      	ldr	r0, [pc, #64]	@ (8000b70 <setReadDir+0x48>)
 8000b30:	f7ff fee6 	bl	8000900 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8000b34:	2102      	movs	r1, #2
 8000b36:	480e      	ldr	r0, [pc, #56]	@ (8000b70 <setReadDir+0x48>)
 8000b38:	f7ff fee2 	bl	8000900 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <setReadDir+0x48>)
 8000b40:	f7ff fede 	bl	8000900 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8000b44:	2108      	movs	r1, #8
 8000b46:	480a      	ldr	r0, [pc, #40]	@ (8000b70 <setReadDir+0x48>)
 8000b48:	f7ff feda 	bl	8000900 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8000b4c:	2110      	movs	r1, #16
 8000b4e:	4808      	ldr	r0, [pc, #32]	@ (8000b70 <setReadDir+0x48>)
 8000b50:	f7ff fed6 	bl	8000900 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8000b54:	2120      	movs	r1, #32
 8000b56:	4806      	ldr	r0, [pc, #24]	@ (8000b70 <setReadDir+0x48>)
 8000b58:	f7ff fed2 	bl	8000900 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8000b5c:	2140      	movs	r1, #64	@ 0x40
 8000b5e:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <setReadDir+0x48>)
 8000b60:	f7ff fece 	bl	8000900 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8000b64:	2180      	movs	r1, #128	@ 0x80
 8000b66:	4802      	ldr	r0, [pc, #8]	@ (8000b70 <setReadDir+0x48>)
 8000b68:	f7ff feca 	bl	8000900 <PIN_INPUT>
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40011800 	.word	0x40011800

08000b74 <setWriteDir>:

void setWriteDir (void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8000b78:	2101      	movs	r1, #1
 8000b7a:	4810      	ldr	r0, [pc, #64]	@ (8000bbc <setWriteDir+0x48>)
 8000b7c:	f7ff fed6 	bl	800092c <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8000b80:	2102      	movs	r1, #2
 8000b82:	480e      	ldr	r0, [pc, #56]	@ (8000bbc <setWriteDir+0x48>)
 8000b84:	f7ff fed2 	bl	800092c <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8000b88:	2104      	movs	r1, #4
 8000b8a:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <setWriteDir+0x48>)
 8000b8c:	f7ff fece 	bl	800092c <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8000b90:	2108      	movs	r1, #8
 8000b92:	480a      	ldr	r0, [pc, #40]	@ (8000bbc <setWriteDir+0x48>)
 8000b94:	f7ff feca 	bl	800092c <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8000b98:	2110      	movs	r1, #16
 8000b9a:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <setWriteDir+0x48>)
 8000b9c:	f7ff fec6 	bl	800092c <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	4806      	ldr	r0, [pc, #24]	@ (8000bbc <setWriteDir+0x48>)
 8000ba4:	f7ff fec2 	bl	800092c <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8000ba8:	2140      	movs	r1, #64	@ 0x40
 8000baa:	4804      	ldr	r0, [pc, #16]	@ (8000bbc <setWriteDir+0x48>)
 8000bac:	f7ff febe 	bl	800092c <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8000bb0:	2180      	movs	r1, #128	@ 0x80
 8000bb2:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <setWriteDir+0x48>)
 8000bb4:	f7ff feba 	bl	800092c <PIN_OUTPUT>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40011800 	.word	0x40011800

08000bc0 <write24>:
    }
    CS_IDLE;
}

static void write24(uint16_t color)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff19 	bl	8000a04 <color565_to_r>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff23 	bl	8000a24 <color565_to_g>
 8000bde:	4603      	mov	r3, r0
 8000be0:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff2d 	bl	8000a44 <color565_to_b>
 8000bea:	4603      	mov	r3, r0
 8000bec:	737b      	strb	r3, [r7, #13]
    write8(r);
 8000bee:	4b23      	ldr	r3, [pc, #140]	@ (8000c7c <write24+0xbc>)
 8000bf0:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000bf4:	611a      	str	r2, [r3, #16]
 8000bf6:	4a21      	ldr	r2, [pc, #132]	@ (8000c7c <write24+0xbc>)
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	6113      	str	r3, [r2, #16]
 8000bfc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c00:	481e      	ldr	r0, [pc, #120]	@ (8000c7c <write24+0xbc>)
 8000c02:	f7ff fe5d 	bl	80008c0 <PIN_LOW>
 8000c06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c0a:	481c      	ldr	r0, [pc, #112]	@ (8000c7c <write24+0xbc>)
 8000c0c:	f7ff fe68 	bl	80008e0 <PIN_HIGH>
 8000c10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c14:	4819      	ldr	r0, [pc, #100]	@ (8000c7c <write24+0xbc>)
 8000c16:	f7ff fe63 	bl	80008e0 <PIN_HIGH>
    write8(g);
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <write24+0xbc>)
 8000c1c:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	4a16      	ldr	r2, [pc, #88]	@ (8000c7c <write24+0xbc>)
 8000c24:	7bbb      	ldrb	r3, [r7, #14]
 8000c26:	6113      	str	r3, [r2, #16]
 8000c28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c2c:	4813      	ldr	r0, [pc, #76]	@ (8000c7c <write24+0xbc>)
 8000c2e:	f7ff fe47 	bl	80008c0 <PIN_LOW>
 8000c32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c36:	4811      	ldr	r0, [pc, #68]	@ (8000c7c <write24+0xbc>)
 8000c38:	f7ff fe52 	bl	80008e0 <PIN_HIGH>
 8000c3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c40:	480e      	ldr	r0, [pc, #56]	@ (8000c7c <write24+0xbc>)
 8000c42:	f7ff fe4d 	bl	80008e0 <PIN_HIGH>
    write8(b);
 8000c46:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <write24+0xbc>)
 8000c48:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000c4c:	611a      	str	r2, [r3, #16]
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c7c <write24+0xbc>)
 8000c50:	7b7b      	ldrb	r3, [r7, #13]
 8000c52:	6113      	str	r3, [r2, #16]
 8000c54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c58:	4808      	ldr	r0, [pc, #32]	@ (8000c7c <write24+0xbc>)
 8000c5a:	f7ff fe31 	bl	80008c0 <PIN_LOW>
 8000c5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c62:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <write24+0xbc>)
 8000c64:	f7ff fe3c 	bl	80008e0 <PIN_HIGH>
 8000c68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c6c:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <write24+0xbc>)
 8000c6e:	f7ff fe37 	bl	80008e0 <PIN_HIGH>
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40011800 	.word	0x40011800

08000c80 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	460a      	mov	r2, r1
 8000c8a:	80fb      	strh	r3, [r7, #6]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 8000c90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c94:	483c      	ldr	r0, [pc, #240]	@ (8000d88 <writecmddata+0x108>)
 8000c96:	f7ff fe13 	bl	80008c0 <PIN_LOW>
    WriteCmd(cmd);
 8000c9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c9e:	483a      	ldr	r0, [pc, #232]	@ (8000d88 <writecmddata+0x108>)
 8000ca0:	f7ff fe0e 	bl	80008c0 <PIN_LOW>
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	0a1b      	lsrs	r3, r3, #8
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	73fb      	strb	r3, [r7, #15]
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	73bb      	strb	r3, [r7, #14]
 8000cb0:	4b35      	ldr	r3, [pc, #212]	@ (8000d88 <writecmddata+0x108>)
 8000cb2:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000cb6:	611a      	str	r2, [r3, #16]
 8000cb8:	4a33      	ldr	r2, [pc, #204]	@ (8000d88 <writecmddata+0x108>)
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	6113      	str	r3, [r2, #16]
 8000cbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cc2:	4831      	ldr	r0, [pc, #196]	@ (8000d88 <writecmddata+0x108>)
 8000cc4:	f7ff fdfc 	bl	80008c0 <PIN_LOW>
 8000cc8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ccc:	482e      	ldr	r0, [pc, #184]	@ (8000d88 <writecmddata+0x108>)
 8000cce:	f7ff fe07 	bl	80008e0 <PIN_HIGH>
 8000cd2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cd6:	482c      	ldr	r0, [pc, #176]	@ (8000d88 <writecmddata+0x108>)
 8000cd8:	f7ff fe02 	bl	80008e0 <PIN_HIGH>
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8000d88 <writecmddata+0x108>)
 8000cde:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	4a28      	ldr	r2, [pc, #160]	@ (8000d88 <writecmddata+0x108>)
 8000ce6:	7bbb      	ldrb	r3, [r7, #14]
 8000ce8:	6113      	str	r3, [r2, #16]
 8000cea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cee:	4826      	ldr	r0, [pc, #152]	@ (8000d88 <writecmddata+0x108>)
 8000cf0:	f7ff fde6 	bl	80008c0 <PIN_LOW>
 8000cf4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cf8:	4823      	ldr	r0, [pc, #140]	@ (8000d88 <writecmddata+0x108>)
 8000cfa:	f7ff fdf1 	bl	80008e0 <PIN_HIGH>
 8000cfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d02:	4821      	ldr	r0, [pc, #132]	@ (8000d88 <writecmddata+0x108>)
 8000d04:	f7ff fdec 	bl	80008e0 <PIN_HIGH>
 8000d08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d0c:	481e      	ldr	r0, [pc, #120]	@ (8000d88 <writecmddata+0x108>)
 8000d0e:	f7ff fde7 	bl	80008e0 <PIN_HIGH>
    WriteData(dat);
 8000d12:	88bb      	ldrh	r3, [r7, #4]
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	737b      	strb	r3, [r7, #13]
 8000d1a:	88bb      	ldrh	r3, [r7, #4]
 8000d1c:	733b      	strb	r3, [r7, #12]
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <writecmddata+0x108>)
 8000d20:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000d24:	611a      	str	r2, [r3, #16]
 8000d26:	4a18      	ldr	r2, [pc, #96]	@ (8000d88 <writecmddata+0x108>)
 8000d28:	7b7b      	ldrb	r3, [r7, #13]
 8000d2a:	6113      	str	r3, [r2, #16]
 8000d2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d30:	4815      	ldr	r0, [pc, #84]	@ (8000d88 <writecmddata+0x108>)
 8000d32:	f7ff fdc5 	bl	80008c0 <PIN_LOW>
 8000d36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d3a:	4813      	ldr	r0, [pc, #76]	@ (8000d88 <writecmddata+0x108>)
 8000d3c:	f7ff fdd0 	bl	80008e0 <PIN_HIGH>
 8000d40:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d44:	4810      	ldr	r0, [pc, #64]	@ (8000d88 <writecmddata+0x108>)
 8000d46:	f7ff fdcb 	bl	80008e0 <PIN_HIGH>
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <writecmddata+0x108>)
 8000d4c:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	4a0d      	ldr	r2, [pc, #52]	@ (8000d88 <writecmddata+0x108>)
 8000d54:	7b3b      	ldrb	r3, [r7, #12]
 8000d56:	6113      	str	r3, [r2, #16]
 8000d58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d5c:	480a      	ldr	r0, [pc, #40]	@ (8000d88 <writecmddata+0x108>)
 8000d5e:	f7ff fdaf 	bl	80008c0 <PIN_LOW>
 8000d62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d66:	4808      	ldr	r0, [pc, #32]	@ (8000d88 <writecmddata+0x108>)
 8000d68:	f7ff fdba 	bl	80008e0 <PIN_HIGH>
 8000d6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d70:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <writecmddata+0x108>)
 8000d72:	f7ff fdb5 	bl	80008e0 <PIN_HIGH>
    CS_IDLE;
 8000d76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d7a:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <writecmddata+0x108>)
 8000d7c:	f7ff fdb0 	bl	80008e0 <PIN_HIGH>
}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40011800 	.word	0x40011800

08000d8c <WriteCmdParamN>:



static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	603a      	str	r2, [r7, #0]
 8000d96:	80fb      	strh	r3, [r7, #6]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 8000d9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000da0:	4859      	ldr	r0, [pc, #356]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000da2:	f7ff fd8d 	bl	80008c0 <PIN_LOW>
    WriteCmd(cmd);
 8000da6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000daa:	4857      	ldr	r0, [pc, #348]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000dac:	f7ff fd88 	bl	80008c0 <PIN_LOW>
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	0a1b      	lsrs	r3, r3, #8
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	73bb      	strb	r3, [r7, #14]
 8000dbc:	4b52      	ldr	r3, [pc, #328]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000dbe:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000dc2:	611a      	str	r2, [r3, #16]
 8000dc4:	4a50      	ldr	r2, [pc, #320]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	6113      	str	r3, [r2, #16]
 8000dca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dce:	484e      	ldr	r0, [pc, #312]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000dd0:	f7ff fd76 	bl	80008c0 <PIN_LOW>
 8000dd4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dd8:	484b      	ldr	r0, [pc, #300]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000dda:	f7ff fd81 	bl	80008e0 <PIN_HIGH>
 8000dde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000de2:	4849      	ldr	r0, [pc, #292]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000de4:	f7ff fd7c 	bl	80008e0 <PIN_HIGH>
 8000de8:	4b47      	ldr	r3, [pc, #284]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000dea:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	4a45      	ldr	r2, [pc, #276]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000df2:	7bbb      	ldrb	r3, [r7, #14]
 8000df4:	6113      	str	r3, [r2, #16]
 8000df6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dfa:	4843      	ldr	r0, [pc, #268]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000dfc:	f7ff fd60 	bl	80008c0 <PIN_LOW>
 8000e00:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e04:	4840      	ldr	r0, [pc, #256]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000e06:	f7ff fd6b 	bl	80008e0 <PIN_HIGH>
 8000e0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e0e:	483e      	ldr	r0, [pc, #248]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000e10:	f7ff fd66 	bl	80008e0 <PIN_HIGH>
 8000e14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e18:	483b      	ldr	r0, [pc, #236]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000e1a:	f7ff fd61 	bl	80008e0 <PIN_HIGH>
    while (N-- > 0) {
 8000e1e:	e061      	b.n	8000ee4 <WriteCmdParamN+0x158>
        uint8_t u8 = *block++;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	603a      	str	r2, [r7, #0]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	737b      	strb	r3, [r7, #13]
        write8(u8);
 8000e2a:	4b37      	ldr	r3, [pc, #220]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000e2c:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000e30:	611a      	str	r2, [r3, #16]
 8000e32:	4a35      	ldr	r2, [pc, #212]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000e34:	7b7b      	ldrb	r3, [r7, #13]
 8000e36:	6113      	str	r3, [r2, #16]
 8000e38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e3c:	4832      	ldr	r0, [pc, #200]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000e3e:	f7ff fd3f 	bl	80008c0 <PIN_LOW>
 8000e42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e46:	4830      	ldr	r0, [pc, #192]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000e48:	f7ff fd4a 	bl	80008e0 <PIN_HIGH>
 8000e4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e50:	482d      	ldr	r0, [pc, #180]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000e52:	f7ff fd45 	bl	80008e0 <PIN_HIGH>
        if (N && is8347) {
 8000e56:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d042      	beq.n	8000ee4 <WriteCmdParamN+0x158>
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f0c <WriteCmdParamN+0x180>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d03e      	beq.n	8000ee4 <WriteCmdParamN+0x158>
            cmd++;
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8000e6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e70:	4825      	ldr	r0, [pc, #148]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000e72:	f7ff fd25 	bl	80008c0 <PIN_LOW>
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	733b      	strb	r3, [r7, #12]
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	72fb      	strb	r3, [r7, #11]
 8000e82:	4b21      	ldr	r3, [pc, #132]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000e84:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000e8c:	7b3b      	ldrb	r3, [r7, #12]
 8000e8e:	6113      	str	r3, [r2, #16]
 8000e90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e94:	481c      	ldr	r0, [pc, #112]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000e96:	f7ff fd13 	bl	80008c0 <PIN_LOW>
 8000e9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e9e:	481a      	ldr	r0, [pc, #104]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000ea0:	f7ff fd1e 	bl	80008e0 <PIN_HIGH>
 8000ea4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ea8:	4817      	ldr	r0, [pc, #92]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000eaa:	f7ff fd19 	bl	80008e0 <PIN_HIGH>
 8000eae:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000eb0:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000eb4:	611a      	str	r2, [r3, #16]
 8000eb6:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000eb8:	7afb      	ldrb	r3, [r7, #11]
 8000eba:	6113      	str	r3, [r2, #16]
 8000ebc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ec0:	4811      	ldr	r0, [pc, #68]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000ec2:	f7ff fcfd 	bl	80008c0 <PIN_LOW>
 8000ec6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eca:	480f      	ldr	r0, [pc, #60]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000ecc:	f7ff fd08 	bl	80008e0 <PIN_HIGH>
 8000ed0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ed4:	480c      	ldr	r0, [pc, #48]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000ed6:	f7ff fd03 	bl	80008e0 <PIN_HIGH>
 8000eda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ede:	480a      	ldr	r0, [pc, #40]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000ee0:	f7ff fcfe 	bl	80008e0 <PIN_HIGH>
    while (N-- > 0) {
 8000ee4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	3a01      	subs	r2, #1
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	717a      	strb	r2, [r7, #5]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dc95      	bgt.n	8000e20 <WriteCmdParamN+0x94>
        }
    }
    CS_IDLE;
 8000ef4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <WriteCmdParamN+0x17c>)
 8000efa:	f7ff fcf1 	bl	80008e0 <PIN_HIGH>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40011800 	.word	0x40011800
 8000f0c:	20000083 	.word	0x20000083

08000f10 <WriteCmdParam4>:

static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4604      	mov	r4, r0
 8000f18:	4608      	mov	r0, r1
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4623      	mov	r3, r4
 8000f20:	71fb      	strb	r3, [r7, #7]
 8000f22:	4603      	mov	r3, r0
 8000f24:	71bb      	strb	r3, [r7, #6]
 8000f26:	460b      	mov	r3, r1
 8000f28:	717b      	strb	r3, [r7, #5]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	733b      	strb	r3, [r7, #12]
 8000f32:	797b      	ldrb	r3, [r7, #5]
 8000f34:	737b      	strb	r3, [r7, #13]
 8000f36:	793b      	ldrb	r3, [r7, #4]
 8000f38:	73bb      	strb	r3, [r7, #14]
 8000f3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f3e:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	f107 020c 	add.w	r2, r7, #12
 8000f48:	2104      	movs	r1, #4
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff1e 	bl	8000d8c <WriteCmdParamN>
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd90      	pop	{r4, r7, pc}

08000f58 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F
static void init_table(const void *table, int16_t size)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24

    while (size > 0)
 8000f68:	e046      	b.n	8000ff8 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        uint8_t len = pgm_read_byte(p++);
 8000f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (cmd == TFTLCD_DELAY8)
 8000f82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000f86:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f88:	d108      	bne.n	8000f9c <init_table+0x44>
        {
            delay(len);
 8000f8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fc7e 	bl	8000890 <delay>
            len = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000f9a:	e024      	b.n	8000fe6 <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8000fa2:	e010      	b.n	8000fc6 <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	627a      	str	r2, [r7, #36]	@ 0x24
 8000faa:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8000fae:	7819      	ldrb	r1, [r3, #0]
 8000fb0:	f102 0328 	add.w	r3, r2, #40	@ 0x28
 8000fb4:	443b      	add	r3, r7
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 8000fbc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8000fc6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8000fca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d3e8      	bcc.n	8000fa4 <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 8000fd2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	f997 1023 	ldrsb.w	r1, [r7, #35]	@ 0x23
 8000fdc:	f107 0208 	add.w	r2, r7, #8
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fed3 	bl	8000d8c <WriteCmdParamN>
        }
        size -= len + 2;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	3b02      	subs	r3, #2
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 8000ff8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	dcb4      	bgt.n	8000f6a <init_table+0x12>
    }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	@ 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
 8001012:	460b      	mov	r3, r1
 8001014:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 800101a:	e01d      	b.n	8001058 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	1c9a      	adds	r2, r3, #2
 8001020:	60fa      	str	r2, [r7, #12]
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	1c9a      	adds	r2, r3, #2
 800102a:	60fa      	str	r2, [r7, #12]
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8001030:	897b      	ldrh	r3, [r7, #10]
 8001032:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001036:	4293      	cmp	r3, r2
 8001038:	d104      	bne.n	8001044 <init_table16+0x3a>
            delay(d);
 800103a:	893b      	ldrh	r3, [r7, #8]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fc27 	bl	8000890 <delay>
 8001042:	e005      	b.n	8001050 <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 8001044:	893a      	ldrh	r2, [r7, #8]
 8001046:	897b      	ldrh	r3, [r7, #10]
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fe18 	bl	8000c80 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8001050:	887b      	ldrh	r3, [r7, #2]
 8001052:	3b04      	subs	r3, #4
 8001054:	b29b      	uxth	r3, r3
 8001056:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8001058:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800105c:	2b00      	cmp	r3, #0
 800105e:	dcdd      	bgt.n	800101c <init_table16+0x12>
    }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <reset>:



void reset(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
    done_reset = 1;
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <reset+0x9c>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 8001076:	f7ff fd7d 	bl	8000b74 <setWriteDir>
    CTL_INIT();
 800107a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107e:	4823      	ldr	r0, [pc, #140]	@ (800110c <reset+0xa0>)
 8001080:	f7ff fc54 	bl	800092c <PIN_OUTPUT>
 8001084:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001088:	4820      	ldr	r0, [pc, #128]	@ (800110c <reset+0xa0>)
 800108a:	f7ff fc4f 	bl	800092c <PIN_OUTPUT>
 800108e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001092:	481e      	ldr	r0, [pc, #120]	@ (800110c <reset+0xa0>)
 8001094:	f7ff fc4a 	bl	800092c <PIN_OUTPUT>
 8001098:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800109c:	481b      	ldr	r0, [pc, #108]	@ (800110c <reset+0xa0>)
 800109e:	f7ff fc45 	bl	800092c <PIN_OUTPUT>
 80010a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010a6:	4819      	ldr	r0, [pc, #100]	@ (800110c <reset+0xa0>)
 80010a8:	f7ff fc40 	bl	800092c <PIN_OUTPUT>
    CS_IDLE;
 80010ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010b0:	4816      	ldr	r0, [pc, #88]	@ (800110c <reset+0xa0>)
 80010b2:	f7ff fc15 	bl	80008e0 <PIN_HIGH>
    RD_IDLE;
 80010b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010ba:	4814      	ldr	r0, [pc, #80]	@ (800110c <reset+0xa0>)
 80010bc:	f7ff fc10 	bl	80008e0 <PIN_HIGH>
    WR_IDLE;
 80010c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010c4:	4811      	ldr	r0, [pc, #68]	@ (800110c <reset+0xa0>)
 80010c6:	f7ff fc0b 	bl	80008e0 <PIN_HIGH>
    RESET_IDLE;
 80010ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ce:	480f      	ldr	r0, [pc, #60]	@ (800110c <reset+0xa0>)
 80010d0:	f7ff fc06 	bl	80008e0 <PIN_HIGH>
    delay(50);
 80010d4:	2032      	movs	r0, #50	@ 0x32
 80010d6:	f7ff fbdb 	bl	8000890 <delay>
    RESET_ACTIVE;
 80010da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010de:	480b      	ldr	r0, [pc, #44]	@ (800110c <reset+0xa0>)
 80010e0:	f7ff fbee 	bl	80008c0 <PIN_LOW>
    delay(100);
 80010e4:	2064      	movs	r0, #100	@ 0x64
 80010e6:	f7ff fbd3 	bl	8000890 <delay>
    RESET_IDLE;
 80010ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ee:	4807      	ldr	r0, [pc, #28]	@ (800110c <reset+0xa0>)
 80010f0:	f7ff fbf6 	bl	80008e0 <PIN_HIGH>
    delay(100);
 80010f4:	2064      	movs	r0, #100	@ 0x64
 80010f6:	f7ff fbcb 	bl	8000890 <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 80010fa:	2100      	movs	r1, #0
 80010fc:	20b0      	movs	r0, #176	@ 0xb0
 80010fe:	f7ff fcee 	bl	8000ade <WriteCmdData>
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000082 	.word	0x20000082
 800110c:	40011800 	.word	0x40011800

08001110 <read16bits>:

static uint16_t read16bits(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8001116:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800111a:	482c      	ldr	r0, [pc, #176]	@ (80011cc <read16bits+0xbc>)
 800111c:	f7ff fbe0 	bl	80008e0 <PIN_HIGH>
 8001120:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001124:	4829      	ldr	r0, [pc, #164]	@ (80011cc <read16bits+0xbc>)
 8001126:	f7ff fbcb 	bl	80008c0 <PIN_LOW>
 800112a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800112e:	4827      	ldr	r0, [pc, #156]	@ (80011cc <read16bits+0xbc>)
 8001130:	f7ff fbc6 	bl	80008c0 <PIN_LOW>
 8001134:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001138:	4824      	ldr	r0, [pc, #144]	@ (80011cc <read16bits+0xbc>)
 800113a:	f7ff fbc1 	bl	80008c0 <PIN_LOW>
 800113e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001142:	4822      	ldr	r0, [pc, #136]	@ (80011cc <read16bits+0xbc>)
 8001144:	f7ff fbbc 	bl	80008c0 <PIN_LOW>
 8001148:	4b20      	ldr	r3, [pc, #128]	@ (80011cc <read16bits+0xbc>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	80fb      	strh	r3, [r7, #6]
 8001150:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001154:	481d      	ldr	r0, [pc, #116]	@ (80011cc <read16bits+0xbc>)
 8001156:	f7ff fbc3 	bl	80008e0 <PIN_HIGH>
 800115a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800115e:	481b      	ldr	r0, [pc, #108]	@ (80011cc <read16bits+0xbc>)
 8001160:	f7ff fbbe 	bl	80008e0 <PIN_HIGH>
    READ_8(lo);
 8001164:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001168:	4818      	ldr	r0, [pc, #96]	@ (80011cc <read16bits+0xbc>)
 800116a:	f7ff fbb9 	bl	80008e0 <PIN_HIGH>
 800116e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001172:	4816      	ldr	r0, [pc, #88]	@ (80011cc <read16bits+0xbc>)
 8001174:	f7ff fba4 	bl	80008c0 <PIN_LOW>
 8001178:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800117c:	4813      	ldr	r0, [pc, #76]	@ (80011cc <read16bits+0xbc>)
 800117e:	f7ff fb9f 	bl	80008c0 <PIN_LOW>
 8001182:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001186:	4811      	ldr	r0, [pc, #68]	@ (80011cc <read16bits+0xbc>)
 8001188:	f7ff fb9a 	bl	80008c0 <PIN_LOW>
 800118c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001190:	480e      	ldr	r0, [pc, #56]	@ (80011cc <read16bits+0xbc>)
 8001192:	f7ff fb95 	bl	80008c0 <PIN_LOW>
 8001196:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <read16bits+0xbc>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	717b      	strb	r3, [r7, #5]
 800119c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011a0:	480a      	ldr	r0, [pc, #40]	@ (80011cc <read16bits+0xbc>)
 80011a2:	f7ff fb9d 	bl	80008e0 <PIN_HIGH>
 80011a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011aa:	4808      	ldr	r0, [pc, #32]	@ (80011cc <read16bits+0xbc>)
 80011ac:	f7ff fb98 	bl	80008e0 <PIN_HIGH>
    return (ret << 8) | lo;
 80011b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	797b      	ldrb	r3, [r7, #5]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21b      	sxth	r3, r3
 80011c0:	b29b      	uxth	r3, r3
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40011800 	.word	0x40011800

080011d0 <readReg>:

uint16_t readReg(uint16_t reg, int8_t index)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	80fb      	strh	r3, [r7, #6]
 80011dc:	4613      	mov	r3, r2
 80011de:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 80011e0:	4b34      	ldr	r3, [pc, #208]	@ (80012b4 <readReg+0xe4>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <readReg+0x1c>
        reset();
 80011e8:	f7ff ff40 	bl	800106c <reset>
    CS_ACTIVE;
 80011ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011f0:	4831      	ldr	r0, [pc, #196]	@ (80012b8 <readReg+0xe8>)
 80011f2:	f7ff fb65 	bl	80008c0 <PIN_LOW>
    WriteCmd(reg);
 80011f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011fa:	482f      	ldr	r0, [pc, #188]	@ (80012b8 <readReg+0xe8>)
 80011fc:	f7ff fb60 	bl	80008c0 <PIN_LOW>
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	0a1b      	lsrs	r3, r3, #8
 8001204:	b29b      	uxth	r3, r3
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	73bb      	strb	r3, [r7, #14]
 800120c:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <readReg+0xe8>)
 800120e:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	4a28      	ldr	r2, [pc, #160]	@ (80012b8 <readReg+0xe8>)
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	6113      	str	r3, [r2, #16]
 800121a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800121e:	4826      	ldr	r0, [pc, #152]	@ (80012b8 <readReg+0xe8>)
 8001220:	f7ff fb4e 	bl	80008c0 <PIN_LOW>
 8001224:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001228:	4823      	ldr	r0, [pc, #140]	@ (80012b8 <readReg+0xe8>)
 800122a:	f7ff fb59 	bl	80008e0 <PIN_HIGH>
 800122e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001232:	4821      	ldr	r0, [pc, #132]	@ (80012b8 <readReg+0xe8>)
 8001234:	f7ff fb54 	bl	80008e0 <PIN_HIGH>
 8001238:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <readReg+0xe8>)
 800123a:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 800123e:	611a      	str	r2, [r3, #16]
 8001240:	4a1d      	ldr	r2, [pc, #116]	@ (80012b8 <readReg+0xe8>)
 8001242:	7bbb      	ldrb	r3, [r7, #14]
 8001244:	6113      	str	r3, [r2, #16]
 8001246:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800124a:	481b      	ldr	r0, [pc, #108]	@ (80012b8 <readReg+0xe8>)
 800124c:	f7ff fb38 	bl	80008c0 <PIN_LOW>
 8001250:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001254:	4818      	ldr	r0, [pc, #96]	@ (80012b8 <readReg+0xe8>)
 8001256:	f7ff fb43 	bl	80008e0 <PIN_HIGH>
 800125a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800125e:	4816      	ldr	r0, [pc, #88]	@ (80012b8 <readReg+0xe8>)
 8001260:	f7ff fb3e 	bl	80008e0 <PIN_HIGH>
 8001264:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001268:	4813      	ldr	r0, [pc, #76]	@ (80012b8 <readReg+0xe8>)
 800126a:	f7ff fb39 	bl	80008e0 <PIN_HIGH>
    setReadDir();
 800126e:	f7ff fc5b 	bl	8000b28 <setReadDir>
    delay(1);    //1us should be adequate
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff fb0c 	bl	8000890 <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8001278:	f7ff ff4a 	bl	8001110 <read16bits>
 800127c:	4603      	mov	r3, r0
 800127e:	81bb      	strh	r3, [r7, #12]
 8001280:	797b      	ldrb	r3, [r7, #5]
 8001282:	3b01      	subs	r3, #1
 8001284:	b2db      	uxtb	r3, r3
 8001286:	717b      	strb	r3, [r7, #5]
 8001288:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800128c:	2b00      	cmp	r3, #0
 800128e:	daf3      	bge.n	8001278 <readReg+0xa8>
    RD_IDLE;
 8001290:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001294:	4808      	ldr	r0, [pc, #32]	@ (80012b8 <readReg+0xe8>)
 8001296:	f7ff fb23 	bl	80008e0 <PIN_HIGH>
    CS_IDLE;
 800129a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800129e:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <readReg+0xe8>)
 80012a0:	f7ff fb1e 	bl	80008e0 <PIN_HIGH>
    setWriteDir();
 80012a4:	f7ff fc66 	bl	8000b74 <setWriteDir>
    return ret;
 80012a8:	89bb      	ldrh	r3, [r7, #12]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000082 	.word	0x20000082
 80012b8:	40011800 	.word	0x40011800

080012bc <readReg32>:

uint32_t readReg32(uint16_t reg)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff80 	bl	80011d0 <readReg>
 80012d0:	4603      	mov	r3, r0
 80012d2:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	2101      	movs	r1, #1
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff79 	bl	80011d0 <readReg>
 80012de:	4603      	mov	r3, r0
 80012e0:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 80012e2:	89fb      	ldrh	r3, [r7, #14]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	89bb      	ldrh	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <readReg40>:

uint32_t readReg40(uint16_t reg)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff65 	bl	80011d0 <readReg>
 8001306:	4603      	mov	r3, r0
 8001308:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	2101      	movs	r1, #1
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff5e 	bl	80011d0 <readReg>
 8001314:	4603      	mov	r3, r0
 8001316:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	2102      	movs	r1, #2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff57 	bl	80011d0 <readReg>
 8001322:	4603      	mov	r3, r0
 8001324:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8001326:	89fb      	ldrh	r3, [r7, #14]
 8001328:	061a      	lsls	r2, r3, #24
 800132a:	89bb      	ldrh	r3, [r7, #12]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	4313      	orrs	r3, r2
 8001330:	897a      	ldrh	r2, [r7, #10]
 8001332:	0a12      	lsrs	r2, r2, #8
 8001334:	b292      	uxth	r2, r2
 8001336:	4313      	orrs	r3, r2
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <tft_init>:


void tft_init(uint16_t ID)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 8001352:	4bd7      	ldr	r3, [pc, #860]	@ (80016b0 <tft_init+0x370>)
 8001354:	2200      	movs	r2, #0
 8001356:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8001358:	4ad6      	ldr	r2, [pc, #856]	@ (80016b4 <tft_init+0x374>)
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	8013      	strh	r3, [r2, #0]
 800135e:	4bd5      	ldr	r3, [pc, #852]	@ (80016b4 <tft_init+0x374>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	f24c 5205 	movw	r2, #50437	@ 0xc505
 8001366:	4293      	cmp	r3, r2
 8001368:	f000 8320 	beq.w	80019ac <tft_init+0x66c>
 800136c:	f24c 5205 	movw	r2, #50437	@ 0xc505
 8001370:	4293      	cmp	r3, r2
 8001372:	f300 8333 	bgt.w	80019dc <tft_init+0x69c>
 8001376:	f24b 5209 	movw	r2, #46345	@ 0xb509
 800137a:	4293      	cmp	r3, r2
 800137c:	f000 831f 	beq.w	80019be <tft_init+0x67e>
 8001380:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8001384:	4293      	cmp	r3, r2
 8001386:	f300 8329 	bgt.w	80019dc <tft_init+0x69c>
 800138a:	f24b 5205 	movw	r2, #46341	@ 0xb505
 800138e:	4293      	cmp	r3, r2
 8001390:	f000 830c 	beq.w	80019ac <tft_init+0x66c>
 8001394:	f24b 5205 	movw	r2, #46341	@ 0xb505
 8001398:	4293      	cmp	r3, r2
 800139a:	f300 831f 	bgt.w	80019dc <tft_init+0x69c>
 800139e:	f64a 4211 	movw	r2, #44049	@ 0xac11
 80013a2:	4293      	cmp	r3, r2
 80013a4:	f000 8263 	beq.w	800186e <tft_init+0x52e>
 80013a8:	f64a 4211 	movw	r2, #44049	@ 0xac11
 80013ac:	4293      	cmp	r3, r2
 80013ae:	f300 8315 	bgt.w	80019dc <tft_init+0x69c>
 80013b2:	f249 5295 	movw	r2, #38293	@ 0x9595
 80013b6:	4293      	cmp	r3, r2
 80013b8:	f000 81d0 	beq.w	800175c <tft_init+0x41c>
 80013bc:	f249 5295 	movw	r2, #38293	@ 0x9595
 80013c0:	4293      	cmp	r3, r2
 80013c2:	f300 830b 	bgt.w	80019dc <tft_init+0x69c>
 80013c6:	f249 4288 	movw	r2, #38024	@ 0x9488
 80013ca:	4293      	cmp	r3, r2
 80013cc:	f300 8306 	bgt.w	80019dc <tft_init+0x69c>
 80013d0:	f249 4287 	movw	r2, #38023	@ 0x9487
 80013d4:	4293      	cmp	r3, r2
 80013d6:	f280 82d2 	bge.w	800197e <tft_init+0x63e>
 80013da:	f249 4286 	movw	r2, #38022	@ 0x9486
 80013de:	4293      	cmp	r3, r2
 80013e0:	f000 8289 	beq.w	80018f6 <tft_init+0x5b6>
 80013e4:	f249 4286 	movw	r2, #38022	@ 0x9486
 80013e8:	4293      	cmp	r3, r2
 80013ea:	f300 82f7 	bgt.w	80019dc <tft_init+0x69c>
 80013ee:	f249 4281 	movw	r2, #38017	@ 0x9481
 80013f2:	4293      	cmp	r3, r2
 80013f4:	f000 8268 	beq.w	80018c8 <tft_init+0x588>
 80013f8:	f249 4281 	movw	r2, #38017	@ 0x9481
 80013fc:	4293      	cmp	r3, r2
 80013fe:	f300 82ed 	bgt.w	80019dc <tft_init+0x69c>
 8001402:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001406:	4293      	cmp	r3, r2
 8001408:	f300 82e8 	bgt.w	80019dc <tft_init+0x69c>
 800140c:	f249 3202 	movw	r2, #37634	@ 0x9302
 8001410:	4293      	cmp	r3, r2
 8001412:	f280 80c3 	bge.w	800159c <tft_init+0x25c>
 8001416:	f249 0290 	movw	r2, #37008	@ 0x9090
 800141a:	4293      	cmp	r3, r2
 800141c:	f000 81af 	beq.w	800177e <tft_init+0x43e>
 8001420:	f249 0290 	movw	r2, #37008	@ 0x9090
 8001424:	4293      	cmp	r3, r2
 8001426:	f300 82d9 	bgt.w	80019dc <tft_init+0x69c>
 800142a:	f248 3257 	movw	r2, #33623	@ 0x8357
 800142e:	4293      	cmp	r3, r2
 8001430:	f000 81a0 	beq.w	8001774 <tft_init+0x434>
 8001434:	f248 3257 	movw	r2, #33623	@ 0x8357
 8001438:	4293      	cmp	r3, r2
 800143a:	f300 82cf 	bgt.w	80019dc <tft_init+0x69c>
 800143e:	f248 0231 	movw	r2, #32817	@ 0x8031
 8001442:	4293      	cmp	r3, r2
 8001444:	f000 817c 	beq.w	8001740 <tft_init+0x400>
 8001448:	f248 0231 	movw	r2, #32817	@ 0x8031
 800144c:	4293      	cmp	r3, r2
 800144e:	f300 82c5 	bgt.w	80019dc <tft_init+0x69c>
 8001452:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001456:	4293      	cmp	r3, r2
 8001458:	f000 828c 	beq.w	8001974 <tft_init+0x634>
 800145c:	f247 7296 	movw	r2, #30614	@ 0x7796
 8001460:	4293      	cmp	r3, r2
 8001462:	f300 82bb 	bgt.w	80019dc <tft_init+0x69c>
 8001466:	f247 7293 	movw	r2, #30611	@ 0x7793
 800146a:	4293      	cmp	r3, r2
 800146c:	f000 82a7 	beq.w	80019be <tft_init+0x67e>
 8001470:	f247 7293 	movw	r2, #30611	@ 0x7793
 8001474:	4293      	cmp	r3, r2
 8001476:	f300 82b1 	bgt.w	80019dc <tft_init+0x69c>
 800147a:	f247 7289 	movw	r2, #30601	@ 0x7789
 800147e:	4293      	cmp	r3, r2
 8001480:	f000 8155 	beq.w	800172e <tft_init+0x3ee>
 8001484:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001488:	4293      	cmp	r3, r2
 800148a:	f300 82a7 	bgt.w	80019dc <tft_init+0x69c>
 800148e:	f247 5275 	movw	r2, #30069	@ 0x7575
 8001492:	4293      	cmp	r3, r2
 8001494:	f000 8162 	beq.w	800175c <tft_init+0x41c>
 8001498:	f247 5275 	movw	r2, #30069	@ 0x7575
 800149c:	4293      	cmp	r3, r2
 800149e:	f300 829d 	bgt.w	80019dc <tft_init+0x69c>
 80014a2:	f646 0209 	movw	r2, #26633	@ 0x6809
 80014a6:	4293      	cmp	r3, r2
 80014a8:	f000 81aa 	beq.w	8001800 <tft_init+0x4c0>
 80014ac:	f646 0209 	movw	r2, #26633	@ 0x6809
 80014b0:	4293      	cmp	r3, r2
 80014b2:	f300 8293 	bgt.w	80019dc <tft_init+0x69c>
 80014b6:	f246 7267 	movw	r2, #26471	@ 0x6767
 80014ba:	4293      	cmp	r3, r2
 80014bc:	f000 814e 	beq.w	800175c <tft_init+0x41c>
 80014c0:	f246 7267 	movw	r2, #26471	@ 0x6767
 80014c4:	4293      	cmp	r3, r2
 80014c6:	f300 8289 	bgt.w	80019dc <tft_init+0x69c>
 80014ca:	f245 4208 	movw	r2, #21512	@ 0x5408
 80014ce:	4293      	cmp	r3, r2
 80014d0:	f000 8186 	beq.w	80017e0 <tft_init+0x4a0>
 80014d4:	f245 4208 	movw	r2, #21512	@ 0x5408
 80014d8:	4293      	cmp	r3, r2
 80014da:	f300 827f 	bgt.w	80019dc <tft_init+0x69c>
 80014de:	f245 3210 	movw	r2, #21264	@ 0x5310
 80014e2:	4293      	cmp	r3, r2
 80014e4:	f000 810e 	beq.w	8001704 <tft_init+0x3c4>
 80014e8:	f245 3210 	movw	r2, #21264	@ 0x5310
 80014ec:	4293      	cmp	r3, r2
 80014ee:	f300 8275 	bgt.w	80019dc <tft_init+0x69c>
 80014f2:	f244 7247 	movw	r2, #18247	@ 0x4747
 80014f6:	4293      	cmp	r3, r2
 80014f8:	f000 812b 	beq.w	8001752 <tft_init+0x412>
 80014fc:	f244 7247 	movw	r2, #18247	@ 0x4747
 8001500:	4293      	cmp	r3, r2
 8001502:	f300 826b 	bgt.w	80019dc <tft_init+0x69c>
 8001506:	f242 0253 	movw	r2, #8275	@ 0x2053
 800150a:	4293      	cmp	r3, r2
 800150c:	f000 81aa 	beq.w	8001864 <tft_init+0x524>
 8001510:	f242 0253 	movw	r2, #8275	@ 0x2053
 8001514:	4293      	cmp	r3, r2
 8001516:	f300 8261 	bgt.w	80019dc <tft_init+0x69c>
 800151a:	f241 6202 	movw	r2, #5634	@ 0x1602
 800151e:	4293      	cmp	r3, r2
 8001520:	f000 8197 	beq.w	8001852 <tft_init+0x512>
 8001524:	f241 6202 	movw	r2, #5634	@ 0x1602
 8001528:	4293      	cmp	r3, r2
 800152a:	f300 8257 	bgt.w	80019dc <tft_init+0x69c>
 800152e:	f241 5281 	movw	r2, #5505	@ 0x1581
 8001532:	4293      	cmp	r3, r2
 8001534:	f000 81c3 	beq.w	80018be <tft_init+0x57e>
 8001538:	f241 5281 	movw	r2, #5505	@ 0x1581
 800153c:	4293      	cmp	r3, r2
 800153e:	f300 824d 	bgt.w	80019dc <tft_init+0x69c>
 8001542:	f241 5226 	movw	r2, #5414	@ 0x1526
 8001546:	4293      	cmp	r3, r2
 8001548:	f000 80d3 	beq.w	80016f2 <tft_init+0x3b2>
 800154c:	f241 5226 	movw	r2, #5414	@ 0x1526
 8001550:	4293      	cmp	r3, r2
 8001552:	f300 8243 	bgt.w	80019dc <tft_init+0x69c>
 8001556:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 800155a:	f000 80c1 	beq.w	80016e0 <tft_init+0x3a0>
 800155e:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 8001562:	f300 823b 	bgt.w	80019dc <tft_init+0x69c>
 8001566:	f241 5211 	movw	r2, #5393	@ 0x1511
 800156a:	4293      	cmp	r3, r2
 800156c:	f000 80a4 	beq.w	80016b8 <tft_init+0x378>
 8001570:	f241 5211 	movw	r2, #5393	@ 0x1511
 8001574:	4293      	cmp	r3, r2
 8001576:	f300 8231 	bgt.w	80019dc <tft_init+0x69c>
 800157a:	f241 5205 	movw	r2, #5381	@ 0x1505
 800157e:	4293      	cmp	r3, r2
 8001580:	f000 8133 	beq.w	80017ea <tft_init+0x4aa>
 8001584:	f241 5205 	movw	r2, #5381	@ 0x1505
 8001588:	4293      	cmp	r3, r2
 800158a:	f300 8227 	bgt.w	80019dc <tft_init+0x69c>
 800158e:	2b01      	cmp	r3, #1
 8001590:	f000 8121 	beq.w	80017d6 <tft_init+0x496>
 8001594:	2b99      	cmp	r3, #153	@ 0x99
 8001596:	f000 8109 	beq.w	80017ac <tft_init+0x46c>
 800159a:	e21f      	b.n	80019dc <tft_init+0x69c>
 800159c:	f5a3 4313 	sub.w	r3, r3, #37632	@ 0x9300
 80015a0:	3b02      	subs	r3, #2
 80015a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80015a4:	f200 821a 	bhi.w	80019dc <tft_init+0x69c>
 80015a8:	a201      	add	r2, pc, #4	@ (adr r2, 80015b0 <tft_init+0x270>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	08001879 	.word	0x08001879
 80015b4:	080019dd 	.word	0x080019dd
 80015b8:	080019dd 	.word	0x080019dd
 80015bc:	080019dd 	.word	0x080019dd
 80015c0:	080019dd 	.word	0x080019dd
 80015c4:	080019dd 	.word	0x080019dd
 80015c8:	080019dd 	.word	0x080019dd
 80015cc:	080019dd 	.word	0x080019dd
 80015d0:	080019dd 	.word	0x080019dd
 80015d4:	080019dd 	.word	0x080019dd
 80015d8:	080019dd 	.word	0x080019dd
 80015dc:	080019dd 	.word	0x080019dd
 80015e0:	080019dd 	.word	0x080019dd
 80015e4:	080019dd 	.word	0x080019dd
 80015e8:	080019dd 	.word	0x080019dd
 80015ec:	080019dd 	.word	0x080019dd
 80015f0:	080019dd 	.word	0x080019dd
 80015f4:	080019dd 	.word	0x080019dd
 80015f8:	080019dd 	.word	0x080019dd
 80015fc:	080019dd 	.word	0x080019dd
 8001600:	080019dd 	.word	0x080019dd
 8001604:	080019dd 	.word	0x080019dd
 8001608:	080019dd 	.word	0x080019dd
 800160c:	080019dd 	.word	0x080019dd
 8001610:	080019dd 	.word	0x080019dd
 8001614:	080019dd 	.word	0x080019dd
 8001618:	080019dd 	.word	0x080019dd
 800161c:	080019dd 	.word	0x080019dd
 8001620:	080019dd 	.word	0x080019dd
 8001624:	080019dd 	.word	0x080019dd
 8001628:	080017eb 	.word	0x080017eb
 800162c:	080019dd 	.word	0x080019dd
 8001630:	080019dd 	.word	0x080019dd
 8001634:	080019dd 	.word	0x080019dd
 8001638:	080019dd 	.word	0x080019dd
 800163c:	0800180b 	.word	0x0800180b
 8001640:	080019dd 	.word	0x080019dd
 8001644:	0800182b 	.word	0x0800182b
 8001648:	0800180b 	.word	0x0800180b
 800164c:	0800188d 	.word	0x0800188d
 8001650:	080019dd 	.word	0x080019dd
 8001654:	080019dd 	.word	0x080019dd
 8001658:	080019dd 	.word	0x080019dd
 800165c:	080019dd 	.word	0x080019dd
 8001660:	080019dd 	.word	0x080019dd
 8001664:	080019dd 	.word	0x080019dd
 8001668:	080019dd 	.word	0x080019dd
 800166c:	08001815 	.word	0x08001815
 8001670:	080019dd 	.word	0x080019dd
 8001674:	080019dd 	.word	0x080019dd
 8001678:	080019dd 	.word	0x080019dd
 800167c:	08001815 	.word	0x08001815
 8001680:	080019dd 	.word	0x080019dd
 8001684:	080019dd 	.word	0x080019dd
 8001688:	08001883 	.word	0x08001883
 800168c:	080019dd 	.word	0x080019dd
 8001690:	080019dd 	.word	0x080019dd
 8001694:	080019dd 	.word	0x080019dd
 8001698:	080019dd 	.word	0x080019dd
 800169c:	080019dd 	.word	0x080019dd
 80016a0:	080019dd 	.word	0x080019dd
 80016a4:	080019dd 	.word	0x080019dd
 80016a8:	080018a3 	.word	0x080018a3
 80016ac:	080018ad 	.word	0x080018ad
 80016b0:	2000008a 	.word	0x2000008a
 80016b4:	2000008e 	.word	0x2000008e
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 80016b8:	4b99      	ldr	r3, [pc, #612]	@ (8001920 <tft_init+0x5e0>)
 80016ba:	2203      	movs	r2, #3
 80016bc:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 80016be:	4b99      	ldr	r3, [pc, #612]	@ (8001924 <tft_init+0x5e4>)
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	2303      	movs	r3, #3
 80016c4:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80016c6:	4b98      	ldr	r3, [pc, #608]	@ (8001928 <tft_init+0x5e8>)
 80016c8:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80016d0:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80016d2:	4b96      	ldr	r3, [pc, #600]	@ (800192c <tft_init+0x5ec>)
 80016d4:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80016dc:	801a      	strh	r2, [r3, #0]
        break;
 80016de:	e183      	b.n	80019e8 <tft_init+0x6a8>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80016e0:	4b8f      	ldr	r3, [pc, #572]	@ (8001920 <tft_init+0x5e0>)
 80016e2:	f240 4213 	movw	r2, #1043	@ 0x413
 80016e6:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 80016e8:	4b91      	ldr	r3, [pc, #580]	@ (8001930 <tft_init+0x5f0>)
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	2306      	movs	r3, #6
 80016ee:	837b      	strh	r3, [r7, #26]
        break;
 80016f0:	e17a      	b.n	80019e8 <tft_init+0x6a8>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80016f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001920 <tft_init+0x5e0>)
 80016f4:	f240 4213 	movw	r2, #1043	@ 0x413
 80016f8:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 80016fa:	4b8e      	ldr	r3, [pc, #568]	@ (8001934 <tft_init+0x5f4>)
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	230c      	movs	r3, #12
 8001700:	837b      	strh	r3, [r7, #26]
        break;
 8001702:	e171      	b.n	80019e8 <tft_init+0x6a8>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8001704:	4b86      	ldr	r3, [pc, #536]	@ (8001920 <tft_init+0x5e0>)
 8001706:	f640 6213 	movw	r2, #3603	@ 0xe13
 800170a:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 800170c:	4b8a      	ldr	r3, [pc, #552]	@ (8001938 <tft_init+0x5f8>)
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	2302      	movs	r3, #2
 8001712:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001714:	4b84      	ldr	r3, [pc, #528]	@ (8001928 <tft_init+0x5e8>)
 8001716:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800171e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001720:	4b82      	ldr	r3, [pc, #520]	@ (800192c <tft_init+0x5ec>)
 8001722:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800172a:	801a      	strh	r2, [r3, #0]
        break;
 800172c:	e15c      	b.n	80019e8 <tft_init+0x6a8>
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800172e:	4b7c      	ldr	r3, [pc, #496]	@ (8001920 <tft_init+0x5e0>)
 8001730:	f240 4213 	movw	r2, #1043	@ 0x413
 8001734:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 8001736:	4b81      	ldr	r3, [pc, #516]	@ (800193c <tft_init+0x5fc>)
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	2341      	movs	r3, #65	@ 0x41
 800173c:	837b      	strh	r3, [r7, #26]
        break;
 800173e:	e153      	b.n	80019e8 <tft_init+0x6a8>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 8001740:	4b77      	ldr	r3, [pc, #476]	@ (8001920 <tft_init+0x5e0>)
 8001742:	f241 4213 	movw	r2, #5139	@ 0x1413
 8001746:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 8001748:	4b7d      	ldr	r3, [pc, #500]	@ (8001940 <tft_init+0x600>)
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	2312      	movs	r3, #18
 800174e:	837b      	strh	r3, [r7, #26]
        break;
 8001750:	e14a      	b.n	80019e8 <tft_init+0x6a8>

#ifdef SUPPORT_8347D
    case 0x4747:       //HX8347-D
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | AUTO_READINC | READ_24BITS;
 8001752:	4b73      	ldr	r3, [pc, #460]	@ (8001920 <tft_init+0x5e0>)
 8001754:	f241 6213 	movw	r2, #5651	@ 0x1613
 8001758:	801a      	strh	r2, [r3, #0]
		goto common_8347DGI;
 800175a:	e003      	b.n	8001764 <tft_init+0x424>
    case 0x6767:       //HX8367-A
	case 0x7575:       //HX8347-G
	case 0x9595:       //HX8347-I
        _lcd_capable = REV_SCREEN | MIPI_DCS_REV1 | MV_AXIS;
 800175c:	4b70      	ldr	r3, [pc, #448]	@ (8001920 <tft_init+0x5e0>)
 800175e:	f241 4201 	movw	r2, #5121	@ 0x1401
 8001762:	801a      	strh	r2, [r3, #0]
      common_8347DGI:
		is8347 = 1;
 8001764:	4b77      	ldr	r3, [pc, #476]	@ (8001944 <tft_init+0x604>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
            TFTLCD_DELAY8, 40,
            0x28, 1, 0x3F,      //GON=1, DTE=1, D=1100

            0x16, 1, 0x18,
        };
        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
 800176a:	2170      	movs	r1, #112	@ 0x70
 800176c:	4876      	ldr	r0, [pc, #472]	@ (8001948 <tft_init+0x608>)
 800176e:	f7ff fbf3 	bl	8000f58 <init_table>
        break;
 8001772:	e139      	b.n	80019e8 <tft_init+0x6a8>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 8001774:	4b6a      	ldr	r3, [pc, #424]	@ (8001920 <tft_init+0x5e0>)
 8001776:	f241 4203 	movw	r2, #5123	@ 0x1403
 800177a:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 800177c:	e003      	b.n	8001786 <tft_init+0x446>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 800177e:	4b68      	ldr	r3, [pc, #416]	@ (8001920 <tft_init+0x5e0>)
 8001780:	f241 4213 	movw	r2, #5139	@ 0x1413
 8001784:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 8001786:	2301      	movs	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 800178a:	4b70      	ldr	r3, [pc, #448]	@ (800194c <tft_init+0x60c>)
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	2302      	movs	r3, #2
 8001790:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001792:	4b65      	ldr	r3, [pc, #404]	@ (8001928 <tft_init+0x5e8>)
 8001794:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800179c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800179e:	4b63      	ldr	r3, [pc, #396]	@ (800192c <tft_init+0x5ec>)
 80017a0:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80017a8:	801a      	strh	r2, [r3, #0]
        break;
 80017aa:	e11d      	b.n	80019e8 <tft_init+0x6a8>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 80017ac:	4b5c      	ldr	r3, [pc, #368]	@ (8001920 <tft_init+0x5e0>)
 80017ae:	f241 4213 	movw	r2, #5139	@ 0x1413
 80017b2:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 80017b4:	4b66      	ldr	r3, [pc, #408]	@ (8001950 <tft_init+0x610>)
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	231d      	movs	r3, #29
 80017ba:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80017bc:	4b5a      	ldr	r3, [pc, #360]	@ (8001928 <tft_init+0x5e8>)
 80017be:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80017c6:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80017c8:	4b58      	ldr	r3, [pc, #352]	@ (800192c <tft_init+0x5ec>)
 80017ca:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80017d2:	801a      	strh	r2, [r3, #0]
        break;
 80017d4:	e108      	b.n	80019e8 <tft_init+0x6a8>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 80017d6:	4b52      	ldr	r3, [pc, #328]	@ (8001920 <tft_init+0x5e0>)
 80017d8:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 80017dc:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 80017de:	e008      	b.n	80017f2 <tft_init+0x4b2>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 80017e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001920 <tft_init+0x5e0>)
 80017e2:	f241 0204 	movw	r2, #4100	@ 0x1004
 80017e6:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 80017e8:	e003      	b.n	80017f2 <tft_init+0x4b2>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 80017ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001920 <tft_init+0x5e0>)
 80017ec:	f241 0204 	movw	r2, #4100	@ 0x1004
 80017f0:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 80017f2:	2301      	movs	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 80017f6:	21d8      	movs	r1, #216	@ 0xd8
 80017f8:	4856      	ldr	r0, [pc, #344]	@ (8001954 <tft_init+0x614>)
 80017fa:	f7ff fc06 	bl	800100a <init_table16>
        break;
 80017fe:	e0f3      	b.n	80019e8 <tft_init+0x6a8>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8001800:	4b47      	ldr	r3, [pc, #284]	@ (8001920 <tft_init+0x5e0>)
 8001802:	f241 1202 	movw	r2, #4354	@ 0x1102
 8001806:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001808:	e008      	b.n	800181c <tft_init+0x4dc>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 800180a:	4b45      	ldr	r3, [pc, #276]	@ (8001920 <tft_init+0x5e0>)
 800180c:	f44f 5288 	mov.w	r2, #4352	@ 0x1100
 8001810:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8001812:	e003      	b.n	800181c <tft_init+0x4dc>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 8001814:	4b42      	ldr	r3, [pc, #264]	@ (8001920 <tft_init+0x5e0>)
 8001816:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800181a:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 800181c:	2301      	movs	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 8001820:	21cc      	movs	r1, #204	@ 0xcc
 8001822:	484d      	ldr	r0, [pc, #308]	@ (8001958 <tft_init+0x618>)
 8001824:	f7ff fbf1 	bl	800100a <init_table16>
        break;
 8001828:	e0de      	b.n	80019e8 <tft_init+0x6a8>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 800182a:	4b3d      	ldr	r3, [pc, #244]	@ (8001920 <tft_init+0x5e0>)
 800182c:	f240 4203 	movw	r2, #1027	@ 0x403
 8001830:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 8001832:	4b4a      	ldr	r3, [pc, #296]	@ (800195c <tft_init+0x61c>)
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	231e      	movs	r3, #30
 8001838:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800183a:	4b3b      	ldr	r3, [pc, #236]	@ (8001928 <tft_init+0x5e8>)
 800183c:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001844:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001846:	4b39      	ldr	r3, [pc, #228]	@ (800192c <tft_init+0x5ec>)
 8001848:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	22f0      	movs	r2, #240	@ 0xf0
 800184e:	801a      	strh	r2, [r3, #0]
        break;
 8001850:	e0ca      	b.n	80019e8 <tft_init+0x6a8>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 8001852:	4b33      	ldr	r3, [pc, #204]	@ (8001920 <tft_init+0x5e0>)
 8001854:	f240 4203 	movw	r2, #1027	@ 0x403
 8001858:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 800185a:	4b41      	ldr	r3, [pc, #260]	@ (8001960 <tft_init+0x620>)
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	2306      	movs	r3, #6
 8001860:	837b      	strh	r3, [r7, #26]
        break;
 8001862:	e0c1      	b.n	80019e8 <tft_init+0x6a8>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 8001864:	4b2e      	ldr	r3, [pc, #184]	@ (8001920 <tft_init+0x5e0>)
 8001866:	f241 4217 	movw	r2, #5143	@ 0x1417
 800186a:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800186c:	e012      	b.n	8001894 <tft_init+0x554>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 800186e:	4b2c      	ldr	r3, [pc, #176]	@ (8001920 <tft_init+0x5e0>)
 8001870:	f241 4213 	movw	r2, #5139	@ 0x1413
 8001874:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001876:	e00d      	b.n	8001894 <tft_init+0x554>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8001878:	4b29      	ldr	r3, [pc, #164]	@ (8001920 <tft_init+0x5e0>)
 800187a:	f240 4203 	movw	r2, #1027	@ 0x403
 800187e:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8001880:	e008      	b.n	8001894 <tft_init+0x554>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8001882:	4b27      	ldr	r3, [pc, #156]	@ (8001920 <tft_init+0x5e0>)
 8001884:	f240 4213 	movw	r2, #1043	@ 0x413
 8001888:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 800188a:	e003      	b.n	8001894 <tft_init+0x554>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 800188c:	4b24      	ldr	r3, [pc, #144]	@ (8001920 <tft_init+0x5e0>)
 800188e:	f241 6203 	movw	r2, #5635	@ 0x1603
 8001892:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 8001894:	2301      	movs	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8001898:	4b32      	ldr	r3, [pc, #200]	@ (8001964 <tft_init+0x624>)
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	2303      	movs	r3, #3
 800189e:	837b      	strh	r3, [r7, #26]
        break;
 80018a0:	e0a2      	b.n	80019e8 <tft_init+0x6a8>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80018a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001920 <tft_init+0x5e0>)
 80018a4:	f241 4213 	movw	r2, #5139	@ 0x1413
 80018a8:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 80018aa:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001920 <tft_init+0x5e0>)
 80018ae:	f240 4213 	movw	r2, #1043	@ 0x413
 80018b2:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 80018b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001968 <tft_init+0x628>)
 80018b6:	61fb      	str	r3, [r7, #28]
 80018b8:	2365      	movs	r3, #101	@ 0x65
 80018ba:	837b      	strh	r3, [r7, #26]
        break;
 80018bc:	e094      	b.n	80019e8 <tft_init+0x6a8>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 80018be:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <tft_init+0x5e0>)
 80018c0:	f240 4213 	movw	r2, #1043	@ 0x413
 80018c4:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 80018c6:	e003      	b.n	80018d0 <tft_init+0x590>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 80018c8:	4b15      	ldr	r3, [pc, #84]	@ (8001920 <tft_init+0x5e0>)
 80018ca:	f240 4207 	movw	r2, #1031	@ 0x407
 80018ce:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 80018d0:	2301      	movs	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 80018d4:	4b25      	ldr	r3, [pc, #148]	@ (800196c <tft_init+0x62c>)
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	2345      	movs	r3, #69	@ 0x45
 80018da:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 80018dc:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <tft_init+0x5e8>)
 80018de:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80018e6:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <tft_init+0x5ec>)
 80018ea:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80018f2:	801a      	strh	r2, [r3, #0]
        break;
 80018f4:	e078      	b.n	80019e8 <tft_init+0x6a8>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <tft_init+0x5e0>)
 80018f8:	f240 4203 	movw	r2, #1027	@ 0x403
 80018fc:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 80018fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <tft_init+0x630>)
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	233b      	movs	r3, #59	@ 0x3b
 8001904:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <tft_init+0x5e8>)
 8001908:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001910:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <tft_init+0x5ec>)
 8001914:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800191c:	801a      	strh	r2, [r3, #0]
        break;
 800191e:	e063      	b.n	80019e8 <tft_init+0x6a8>
 8001920:	2000008c 	.word	0x2000008c
 8001924:	08005704 	.word	0x08005704
 8001928:	08000971 	.word	0x08000971
 800192c:	0800095d 	.word	0x0800095d
 8001930:	08005708 	.word	0x08005708
 8001934:	08005710 	.word	0x08005710
 8001938:	0800571c 	.word	0x0800571c
 800193c:	08005720 	.word	0x08005720
 8001940:	08005764 	.word	0x08005764
 8001944:	20000083 	.word	0x20000083
 8001948:	08005778 	.word	0x08005778
 800194c:	080057e8 	.word	0x080057e8
 8001950:	080057ec 	.word	0x080057ec
 8001954:	0800580c 	.word	0x0800580c
 8001958:	080058e4 	.word	0x080058e4
 800195c:	080059b0 	.word	0x080059b0
 8001960:	080059d0 	.word	0x080059d0
 8001964:	080059d8 	.word	0x080059d8
 8001968:	080059dc 	.word	0x080059dc
 800196c:	08005a44 	.word	0x08005a44
 8001970:	08005a8c 	.word	0x08005a8c
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 8001974:	4b46      	ldr	r3, [pc, #280]	@ (8001a90 <tft_init+0x750>)
 8001976:	f240 4203 	movw	r2, #1027	@ 0x403
 800197a:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 800197c:	e003      	b.n	8001986 <tft_init+0x646>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800197e:	4b44      	ldr	r3, [pc, #272]	@ (8001a90 <tft_init+0x750>)
 8001980:	f240 4213 	movw	r2, #1043	@ 0x413
 8001984:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 8001986:	2301      	movs	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 800198a:	4b42      	ldr	r3, [pc, #264]	@ (8001a94 <tft_init+0x754>)
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	232b      	movs	r3, #43	@ 0x2b
 8001990:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8001992:	4b41      	ldr	r3, [pc, #260]	@ (8001a98 <tft_init+0x758>)
 8001994:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800199c:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800199e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a9c <tft_init+0x75c>)
 80019a0:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019a8:	801a      	strh	r2, [r3, #0]
        break;
 80019aa:	e01d      	b.n	80019e8 <tft_init+0x6a8>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 80019ac:	4b38      	ldr	r3, [pc, #224]	@ (8001a90 <tft_init+0x750>)
 80019ae:	f241 0208 	movw	r2, #4104	@ 0x1008
 80019b2:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 80019b4:	21b0      	movs	r1, #176	@ 0xb0
 80019b6:	483a      	ldr	r0, [pc, #232]	@ (8001aa0 <tft_init+0x760>)
 80019b8:	f7ff fb27 	bl	800100a <init_table16>
        break;
 80019bc:	e014      	b.n	80019e8 <tft_init+0x6a8>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 80019be:	4b34      	ldr	r3, [pc, #208]	@ (8001a90 <tft_init+0x750>)
 80019c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019c4:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 80019c6:	21c0      	movs	r1, #192	@ 0xc0
 80019c8:	4836      	ldr	r0, [pc, #216]	@ (8001aa4 <tft_init+0x764>)
 80019ca:	f7ff fb1e 	bl	800100a <init_table16>
        p16 = (int16_t *) & height;
 80019ce:	4b32      	ldr	r3, [pc, #200]	@ (8001a98 <tft_init+0x758>)
 80019d0:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80019d8:	801a      	strh	r2, [r3, #0]
        break;
 80019da:	e005      	b.n	80019e8 <tft_init+0x6a8>
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 80019dc:	4b2f      	ldr	r3, [pc, #188]	@ (8001a9c <tft_init+0x75c>)
 80019de:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2200      	movs	r2, #0
 80019e4:	801a      	strh	r2, [r3, #0]
        break;
 80019e6:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 80019e8:	4b29      	ldr	r3, [pc, #164]	@ (8001a90 <tft_init+0x750>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa8 <tft_init+0x768>)
 80019fe:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00d      	beq.n	8001a22 <tft_init+0x6e2>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 8001a06:	2109      	movs	r1, #9
 8001a08:	4828      	ldr	r0, [pc, #160]	@ (8001aac <tft_init+0x76c>)
 8001a0a:	f7ff faa5 	bl	8000f58 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 8001a0e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a12:	4619      	mov	r1, r3
 8001a14:	69f8      	ldr	r0, [r7, #28]
 8001a16:	f7ff fa9f 	bl	8000f58 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8001a1a:	2106      	movs	r1, #6
 8001a1c:	4824      	ldr	r0, [pc, #144]	@ (8001ab0 <tft_init+0x770>)
 8001a1e:	f7ff fa9b 	bl	8000f58 <init_table>
    }
    setRotation(0);             //PORTRAIT
 8001a22:	2000      	movs	r0, #0
 8001a24:	f000 fc72 	bl	800230c <setRotation>
    invertDisplay(false);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f001 f9ef 	bl	8002e0c <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 8001a2e:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <tft_init+0x774>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	f249 4288 	movw	r2, #38024	@ 0x9488
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d125      	bne.n	8001a86 <tft_init+0x746>
		is555 = 0;
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <tft_init+0x778>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 8001a40:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001a44:	2100      	movs	r1, #0
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 fee6 	bl	8002818 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7ff f82d 	bl	8000aae <readPixel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d112      	bne.n	8001a86 <tft_init+0x746>
			uint8_t pixfmt = 0x06;
 8001a60:	2306      	movs	r3, #6
 8001a62:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 8001a64:	f107 030f 	add.w	r3, r7, #15
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	203a      	movs	r0, #58	@ 0x3a
 8001a6e:	f7ff f848 	bl	8000b02 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 8001a72:	4b07      	ldr	r3, [pc, #28]	@ (8001a90 <tft_init+0x750>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	f023 0310 	bic.w	r3, r3, #16
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <tft_init+0x750>)
 8001a7e:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 8001a80:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <tft_init+0x778>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8001a86:	bf00      	nop
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000008c 	.word	0x2000008c
 8001a94:	08005ac8 	.word	0x08005ac8
 8001a98:	08000971 	.word	0x08000971
 8001a9c:	0800095d 	.word	0x0800095d
 8001aa0:	08005af4 	.word	0x08005af4
 8001aa4:	08005ba4 	.word	0x08005ba4
 8001aa8:	20000090 	.word	0x20000090
 8001aac:	08005c64 	.word	0x08005c64
 8001ab0:	08005c70 	.word	0x08005c70
 8001ab4:	2000008e 	.word	0x2000008e
 8001ab8:	20000084 	.word	0x20000084

08001abc <readID>:




uint16_t readID(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff fb83 	bl	80011d0 <readReg>
 8001aca:	4603      	mov	r3, r0
 8001acc:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 8001ace:	89fb      	ldrh	r3, [r7, #14]
 8001ad0:	f245 4208 	movw	r2, #21512	@ 0x5408
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d102      	bne.n	8001ade <readID+0x22>
        return 0x5408;
 8001ad8:	f245 4308 	movw	r3, #21512	@ 0x5408
 8001adc:	e128      	b.n	8001d30 <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 8001ade:	89fb      	ldrh	r3, [r7, #14]
 8001ae0:	f245 4220 	movw	r2, #21536	@ 0x5420
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d102      	bne.n	8001aee <readID+0x32>
        return 0x5420;
 8001ae8:	f245 4320 	movw	r3, #21536	@ 0x5420
 8001aec:	e120      	b.n	8001d30 <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 8001aee:	89fb      	ldrh	r3, [r7, #14]
 8001af0:	f648 1289 	movw	r2, #35209	@ 0x8989
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d102      	bne.n	8001afe <readID+0x42>
        return 0x1289;
 8001af8:	f241 2389 	movw	r3, #4745	@ 0x1289
 8001afc:	e118      	b.n	8001d30 <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 8001afe:	2100      	movs	r1, #0
 8001b00:	2067      	movs	r0, #103	@ 0x67
 8001b02:	f7ff fb65 	bl	80011d0 <readReg>
 8001b06:	4603      	mov	r3, r0
 8001b08:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8001b0a:	89fb      	ldrh	r3, [r7, #14]
 8001b0c:	f244 7247 	movw	r2, #18247	@ 0x4747
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d102      	bne.n	8001b1a <readID+0x5e>
        return 0x8347;
 8001b14:	f248 3347 	movw	r3, #33607	@ 0x8347
 8001b18:	e10a      	b.n	8001d30 <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8001b1a:	20a1      	movs	r0, #161	@ 0xa1
 8001b1c:	f7ff fbce 	bl	80012bc <readReg32>
 8001b20:	4603      	mov	r3, r0
 8001b22:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8001b24:	89fb      	ldrh	r3, [r7, #14]
 8001b26:	f246 1201 	movw	r2, #24833	@ 0x6101
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d102      	bne.n	8001b34 <readID+0x78>
        return 0x1963;
 8001b2e:	f641 1363 	movw	r3, #6499	@ 0x1963
 8001b32:	e0fd      	b.n	8001d30 <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 8001b34:	89fb      	ldrh	r3, [r7, #14]
 8001b36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d102      	bne.n	8001b44 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 8001b3e:	f241 5326 	movw	r3, #5414	@ 0x1526
 8001b42:	e0f5      	b.n	8001d30 <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 8001b44:	20bf      	movs	r0, #191	@ 0xbf
 8001b46:	f7ff fbd4 	bl	80012f2 <readReg40>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	f248 3257 	movw	r2, #33623	@ 0x8357
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d102      	bne.n	8001b5e <readID+0xa2>
        return 0x8357;
 8001b58:	f248 3357 	movw	r3, #33623	@ 0x8357
 8001b5c:	e0e8      	b.n	8001d30 <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 8001b5e:	89fb      	ldrh	r3, [r7, #14]
 8001b60:	f249 4281 	movw	r2, #38017	@ 0x9481
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d102      	bne.n	8001b6e <readID+0xb2>
        return 0x9481;
 8001b68:	f249 4381 	movw	r3, #38017	@ 0x9481
 8001b6c:	e0e0      	b.n	8001d30 <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 8001b6e:	89fb      	ldrh	r3, [r7, #14]
 8001b70:	f241 5211 	movw	r2, #5393	@ 0x1511
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d102      	bne.n	8001b7e <readID+0xc2>
        return 0x1511;
 8001b78:	f241 5311 	movw	r3, #5393	@ 0x1511
 8001b7c:	e0d8      	b.n	8001d30 <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 8001b7e:	89fb      	ldrh	r3, [r7, #14]
 8001b80:	f5b3 5fa9 	cmp.w	r3, #5408	@ 0x1520
 8001b84:	d102      	bne.n	8001b8c <readID+0xd0>
        return 0x1520;
 8001b86:	f44f 53a9 	mov.w	r3, #5408	@ 0x1520
 8001b8a:	e0d1      	b.n	8001d30 <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 8001b8c:	89fb      	ldrh	r3, [r7, #14]
 8001b8e:	f241 5226 	movw	r2, #5414	@ 0x1526
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d102      	bne.n	8001b9c <readID+0xe0>
        return 0x1526;
 8001b96:	f241 5326 	movw	r3, #5414	@ 0x1526
 8001b9a:	e0c9      	b.n	8001d30 <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8001b9c:	89fb      	ldrh	r3, [r7, #14]
 8001b9e:	f241 5281 	movw	r2, #5505	@ 0x1581
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d102      	bne.n	8001bac <readID+0xf0>
        return 0x1581;
 8001ba6:	f241 5381 	movw	r3, #5505	@ 0x1581
 8001baa:	e0c1      	b.n	8001d30 <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8001bac:	89fb      	ldrh	r3, [r7, #14]
 8001bae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8001bb2:	d102      	bne.n	8001bba <readID+0xfe>
        return 0x6814;
 8001bb4:	f646 0314 	movw	r3, #26644	@ 0x6814
 8001bb8:	e0ba      	b.n	8001d30 <readID+0x274>
    ret = readReg32(0xD4);
 8001bba:	20d4      	movs	r0, #212	@ 0xd4
 8001bbc:	f7ff fb7e 	bl	80012bc <readReg32>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8001bc4:	89fb      	ldrh	r3, [r7, #14]
 8001bc6:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d102      	bne.n	8001bd4 <readID+0x118>
        return 0x5310;
 8001bce:	f245 3310 	movw	r3, #21264	@ 0x5310
 8001bd2:	e0ad      	b.n	8001d30 <readID+0x274>
    ret = readReg32(0xD7);
 8001bd4:	20d7      	movs	r0, #215	@ 0xd7
 8001bd6:	f7ff fb71 	bl	80012bc <readReg32>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 8001bde:	89fb      	ldrh	r3, [r7, #14]
 8001be0:	f248 0231 	movw	r2, #32817	@ 0x8031
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d102      	bne.n	8001bee <readID+0x132>
        return 0x8031;
 8001be8:	f248 0331 	movw	r3, #32817	@ 0x8031
 8001bec:	e0a0      	b.n	8001d30 <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 8001bee:	20ef      	movs	r0, #239	@ 0xef
 8001bf0:	f7ff fb7f 	bl	80012f2 <readReg40>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8001bf8:	89fb      	ldrh	r3, [r7, #14]
 8001bfa:	f249 3227 	movw	r2, #37671	@ 0x9327
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d102      	bne.n	8001c08 <readID+0x14c>
        return 0x9327;
 8001c02:	f249 3327 	movw	r3, #37671	@ 0x9327
 8001c06:	e093      	b.n	8001d30 <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8001c08:	20fe      	movs	r0, #254	@ 0xfe
 8001c0a:	f7ff fb57 	bl	80012bc <readReg32>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8001c14:	89fb      	ldrh	r3, [r7, #14]
 8001c16:	f242 0253 	movw	r2, #8275	@ 0x2053
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d102      	bne.n	8001c24 <readID+0x168>
        return 0x2053;
 8001c1e:	f242 0353 	movw	r3, #8275	@ 0x2053
 8001c22:	e085      	b.n	8001d30 <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8001c24:	2004      	movs	r0, #4
 8001c26:	f7ff fb49 	bl	80012bc <readReg32>
 8001c2a:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	0c1b      	lsrs	r3, r3, #16
 8001c30:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d122      	bne.n	8001c82 <readID+0x1c6>
 8001c3c:	89fb      	ldrh	r3, [r7, #14]
 8001c3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c42:	d11e      	bne.n	8001c82 <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 8001c44:	4a3c      	ldr	r2, [pc, #240]	@ (8001d38 <readID+0x27c>)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	8019      	strh	r1, [r3, #0]
 8001c4e:	3302      	adds	r3, #2
 8001c50:	0c12      	lsrs	r2, r2, #16
 8001c52:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	2203      	movs	r2, #3
 8001c58:	4619      	mov	r1, r3
 8001c5a:	20b9      	movs	r0, #185	@ 0xb9
 8001c5c:	f7fe ff51 	bl	8000b02 <pushCommand>
        msb = readReg(0xD0,0);
 8001c60:	2100      	movs	r1, #0
 8001c62:	20d0      	movs	r0, #208	@ 0xd0
 8001c64:	f7ff fab4 	bl	80011d0 <readReg>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	2b99      	cmp	r3, #153	@ 0x99
 8001c70:	d101      	bne.n	8001c76 <readID+0x1ba>
 8001c72:	2399      	movs	r3, #153	@ 0x99
 8001c74:	e05c      	b.n	8001d30 <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	2b90      	cmp	r3, #144	@ 0x90
 8001c7a:	d102      	bne.n	8001c82 <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 8001c7c:	f249 0390 	movw	r3, #37008	@ 0x9090
 8001c80:	e056      	b.n	8001d30 <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 8001c82:	89fb      	ldrh	r3, [r7, #14]
 8001c84:	f241 5226 	movw	r2, #5414	@ 0x1526
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d102      	bne.n	8001c92 <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 8001c8c:	f241 5326 	movw	r3, #5414	@ 0x1526
 8001c90:	e04e      	b.n	8001d30 <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 8001c92:	89fb      	ldrh	r3, [r7, #14]
 8001c94:	f648 12f0 	movw	r2, #35312	@ 0x89f0
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d102      	bne.n	8001ca2 <readID+0x1e6>
        return 0x7735;
 8001c9c:	f247 7335 	movw	r3, #30517	@ 0x7735
 8001ca0:	e046      	b.n	8001d30 <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 8001ca2:	89fb      	ldrh	r3, [r7, #14]
 8001ca4:	f248 5252 	movw	r2, #34130	@ 0x8552
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d102      	bne.n	8001cb2 <readID+0x1f6>
        return 0x7789;
 8001cac:	f247 7389 	movw	r3, #30601	@ 0x7789
 8001cb0:	e03e      	b.n	8001d30 <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 8001cb2:	89fb      	ldrh	r3, [r7, #14]
 8001cb4:	f64a 4211 	movw	r2, #44049	@ 0xac11
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d102      	bne.n	8001cc2 <readID+0x206>
        return 0xAC11;
 8001cbc:	f64a 4311 	movw	r3, #44049	@ 0xac11
 8001cc0:	e036      	b.n	8001d30 <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 8001cc2:	20d3      	movs	r0, #211	@ 0xd3
 8001cc4:	f7ff fafa 	bl	80012bc <readReg32>
 8001cc8:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 8001cd0:	89fb      	ldrh	r3, [r7, #14]
 8001cd2:	f249 1263 	movw	r2, #37219	@ 0x9163
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <readID+0x222>
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	e028      	b.n	8001d30 <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 8001cde:	20d3      	movs	r0, #211	@ 0xd3
 8001ce0:	f7ff faec 	bl	80012bc <readReg32>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8001ce8:	89fb      	ldrh	r3, [r7, #14]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	2b93      	cmp	r3, #147	@ 0x93
 8001cf4:	d00b      	beq.n	8001d0e <readID+0x252>
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	2b94      	cmp	r3, #148	@ 0x94
 8001cfa:	d008      	beq.n	8001d0e <readID+0x252>
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	2b98      	cmp	r3, #152	@ 0x98
 8001d00:	d005      	beq.n	8001d0e <readID+0x252>
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	2b77      	cmp	r3, #119	@ 0x77
 8001d06:	d002      	beq.n	8001d0e <readID+0x252>
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b16      	cmp	r3, #22
 8001d0c:	d101      	bne.n	8001d12 <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 8001d0e:	89fb      	ldrh	r3, [r7, #14]
 8001d10:	e00e      	b.n	8001d30 <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 8001d12:	89fb      	ldrh	r3, [r7, #14]
 8001d14:	2bd3      	cmp	r3, #211	@ 0xd3
 8001d16:	d004      	beq.n	8001d22 <readID+0x266>
 8001d18:	89fb      	ldrh	r3, [r7, #14]
 8001d1a:	f24d 32d3 	movw	r2, #54227	@ 0xd3d3
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d101      	bne.n	8001d26 <readID+0x26a>
        return ret;             //16-bit write-only bus
 8001d22:	89fb      	ldrh	r3, [r7, #14]
 8001d24:	e004      	b.n	8001d30 <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8001d26:	2100      	movs	r1, #0
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff fa51 	bl	80011d0 <readReg>
 8001d2e:	4603      	mov	r3, r0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	08004d28 	.word	0x08004d28

08001d3c <readGRAM>:

// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b08b      	sub	sp, #44	@ 0x2c
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60ba      	str	r2, [r7, #8]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4603      	mov	r3, r0
 8001d48:	81fb      	strh	r3, [r7, #14]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	81bb      	strh	r3, [r7, #12]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 8001d52:	4ba8      	ldr	r3, [pc, #672]	@ (8001ff4 <readGRAM+0x2b8>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	84bb      	strh	r3, [r7, #36]	@ 0x24
    int16_t n = w * h, row = 0, col = 0;
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001d64:	2300      	movs	r3, #0
 8001d66:	843b      	strh	r3, [r7, #32]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 8001d6c:	4ba2      	ldr	r3, [pc, #648]	@ (8001ff8 <readGRAM+0x2bc>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d107      	bne.n	8001d84 <readGRAM+0x48>
 8001d74:	4ba1      	ldr	r3, [pc, #644]	@ (8001ffc <readGRAM+0x2c0>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <readGRAM+0x48>
        _MR = 0x2E;
 8001d80:	232e      	movs	r3, #46	@ 0x2e
 8001d82:	84bb      	strh	r3, [r7, #36]	@ 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 8001d84:	4b9e      	ldr	r3, [pc, #632]	@ (8002000 <readGRAM+0x2c4>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	f241 6202 	movw	r2, #5634	@ 0x1602
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d101      	bne.n	8001d94 <readGRAM+0x58>
 8001d90:	232e      	movs	r3, #46	@ 0x2e
 8001d92:	84bb      	strh	r3, [r7, #36]	@ 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8001d94:	89fa      	ldrh	r2, [r7, #14]
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	4413      	add	r3, r2
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	b21c      	sxth	r4, r3
 8001da2:	89ba      	ldrh	r2, [r7, #12]
 8001da4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001da6:	4413      	add	r3, r2
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	b21b      	sxth	r3, r3
 8001db0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001db4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001db8:	4622      	mov	r2, r4
 8001dba:	f000 fdc5 	bl	8002948 <setAddrWindow>
    while (n > 0) {
 8001dbe:	e27d      	b.n	80022bc <readGRAM+0x580>
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8001dc0:	4b8e      	ldr	r3, [pc, #568]	@ (8001ffc <readGRAM+0x2c0>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d111      	bne.n	8001df0 <readGRAM+0xb4>
            WriteCmdData(_MC, x + col);
 8001dcc:	4b8d      	ldr	r3, [pc, #564]	@ (8002004 <readGRAM+0x2c8>)
 8001dce:	8818      	ldrh	r0, [r3, #0]
 8001dd0:	89fa      	ldrh	r2, [r7, #14]
 8001dd2:	8bfb      	ldrh	r3, [r7, #30]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7fe fe80 	bl	8000ade <WriteCmdData>
            WriteCmdData(_MP, y + row);
 8001dde:	4b8a      	ldr	r3, [pc, #552]	@ (8002008 <readGRAM+0x2cc>)
 8001de0:	8818      	ldrh	r0, [r3, #0]
 8001de2:	89ba      	ldrh	r2, [r7, #12]
 8001de4:	8c3b      	ldrh	r3, [r7, #32]
 8001de6:	4413      	add	r3, r2
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	4619      	mov	r1, r3
 8001dec:	f7fe fe77 	bl	8000ade <WriteCmdData>
        }
        CS_ACTIVE;
 8001df0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001df4:	4885      	ldr	r0, [pc, #532]	@ (800200c <readGRAM+0x2d0>)
 8001df6:	f7fe fd63 	bl	80008c0 <PIN_LOW>
        WriteCmd(_MR);
 8001dfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001dfe:	4883      	ldr	r0, [pc, #524]	@ (800200c <readGRAM+0x2d0>)
 8001e00:	f7fe fd5e 	bl	80008c0 <PIN_LOW>
 8001e04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e06:	0a1b      	lsrs	r3, r3, #8
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	777b      	strb	r3, [r7, #29]
 8001e0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e0e:	773b      	strb	r3, [r7, #28]
 8001e10:	4b7e      	ldr	r3, [pc, #504]	@ (800200c <readGRAM+0x2d0>)
 8001e12:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8001e16:	611a      	str	r2, [r3, #16]
 8001e18:	4a7c      	ldr	r2, [pc, #496]	@ (800200c <readGRAM+0x2d0>)
 8001e1a:	7f7b      	ldrb	r3, [r7, #29]
 8001e1c:	6113      	str	r3, [r2, #16]
 8001e1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e22:	487a      	ldr	r0, [pc, #488]	@ (800200c <readGRAM+0x2d0>)
 8001e24:	f7fe fd4c 	bl	80008c0 <PIN_LOW>
 8001e28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e2c:	4877      	ldr	r0, [pc, #476]	@ (800200c <readGRAM+0x2d0>)
 8001e2e:	f7fe fd57 	bl	80008e0 <PIN_HIGH>
 8001e32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e36:	4875      	ldr	r0, [pc, #468]	@ (800200c <readGRAM+0x2d0>)
 8001e38:	f7fe fd52 	bl	80008e0 <PIN_HIGH>
 8001e3c:	4b73      	ldr	r3, [pc, #460]	@ (800200c <readGRAM+0x2d0>)
 8001e3e:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8001e42:	611a      	str	r2, [r3, #16]
 8001e44:	4a71      	ldr	r2, [pc, #452]	@ (800200c <readGRAM+0x2d0>)
 8001e46:	7f3b      	ldrb	r3, [r7, #28]
 8001e48:	6113      	str	r3, [r2, #16]
 8001e4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e4e:	486f      	ldr	r0, [pc, #444]	@ (800200c <readGRAM+0x2d0>)
 8001e50:	f7fe fd36 	bl	80008c0 <PIN_LOW>
 8001e54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e58:	486c      	ldr	r0, [pc, #432]	@ (800200c <readGRAM+0x2d0>)
 8001e5a:	f7fe fd41 	bl	80008e0 <PIN_HIGH>
 8001e5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e62:	486a      	ldr	r0, [pc, #424]	@ (800200c <readGRAM+0x2d0>)
 8001e64:	f7fe fd3c 	bl	80008e0 <PIN_HIGH>
 8001e68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e6c:	4867      	ldr	r0, [pc, #412]	@ (800200c <readGRAM+0x2d0>)
 8001e6e:	f7fe fd37 	bl	80008e0 <PIN_HIGH>
        setReadDir();
 8001e72:	f7fe fe59 	bl	8000b28 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 8001e76:	4b61      	ldr	r3, [pc, #388]	@ (8001ffc <readGRAM+0x2c0>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 8089 	bne.w	8001f96 <readGRAM+0x25a>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 8001e84:	4b5d      	ldr	r3, [pc, #372]	@ (8001ffc <readGRAM+0x2c0>)
 8001e86:	881b      	ldrh	r3, [r3, #0]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <readGRAM+0x160>
 8001e90:	4b5b      	ldr	r3, [pc, #364]	@ (8002000 <readGRAM+0x2c4>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	f241 2289 	movw	r2, #4745	@ 0x1289
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d126      	bne.n	8001eea <readGRAM+0x1ae>
            READ_8(r);
 8001e9c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ea0:	485a      	ldr	r0, [pc, #360]	@ (800200c <readGRAM+0x2d0>)
 8001ea2:	f7fe fd1d 	bl	80008e0 <PIN_HIGH>
 8001ea6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001eaa:	4858      	ldr	r0, [pc, #352]	@ (800200c <readGRAM+0x2d0>)
 8001eac:	f7fe fd08 	bl	80008c0 <PIN_LOW>
 8001eb0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001eb4:	4855      	ldr	r0, [pc, #340]	@ (800200c <readGRAM+0x2d0>)
 8001eb6:	f7fe fd03 	bl	80008c0 <PIN_LOW>
 8001eba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ebe:	4853      	ldr	r0, [pc, #332]	@ (800200c <readGRAM+0x2d0>)
 8001ec0:	f7fe fcfe 	bl	80008c0 <PIN_LOW>
 8001ec4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ec8:	4850      	ldr	r0, [pc, #320]	@ (800200c <readGRAM+0x2d0>)
 8001eca:	f7fe fcf9 	bl	80008c0 <PIN_LOW>
 8001ece:	4b4f      	ldr	r3, [pc, #316]	@ (800200c <readGRAM+0x2d0>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	75fb      	strb	r3, [r7, #23]
 8001ed4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ed8:	484c      	ldr	r0, [pc, #304]	@ (800200c <readGRAM+0x2d0>)
 8001eda:	f7fe fd01 	bl	80008e0 <PIN_HIGH>
 8001ede:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ee2:	484a      	ldr	r0, [pc, #296]	@ (800200c <readGRAM+0x2d0>)
 8001ee4:	f7fe fcfc 	bl	80008e0 <PIN_HIGH>
 8001ee8:	e055      	b.n	8001f96 <readGRAM+0x25a>
        } else {
            READ_16(dummy);
 8001eea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001eee:	4847      	ldr	r0, [pc, #284]	@ (800200c <readGRAM+0x2d0>)
 8001ef0:	f7fe fcf6 	bl	80008e0 <PIN_HIGH>
 8001ef4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ef8:	4844      	ldr	r0, [pc, #272]	@ (800200c <readGRAM+0x2d0>)
 8001efa:	f7fe fce1 	bl	80008c0 <PIN_LOW>
 8001efe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f02:	4842      	ldr	r0, [pc, #264]	@ (800200c <readGRAM+0x2d0>)
 8001f04:	f7fe fcdc 	bl	80008c0 <PIN_LOW>
 8001f08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f0c:	483f      	ldr	r0, [pc, #252]	@ (800200c <readGRAM+0x2d0>)
 8001f0e:	f7fe fcd7 	bl	80008c0 <PIN_LOW>
 8001f12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f16:	483d      	ldr	r0, [pc, #244]	@ (800200c <readGRAM+0x2d0>)
 8001f18:	f7fe fcd2 	bl	80008c0 <PIN_LOW>
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800200c <readGRAM+0x2d0>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	76fb      	strb	r3, [r7, #27]
 8001f22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f26:	4839      	ldr	r0, [pc, #228]	@ (800200c <readGRAM+0x2d0>)
 8001f28:	f7fe fcda 	bl	80008e0 <PIN_HIGH>
 8001f2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f30:	4836      	ldr	r0, [pc, #216]	@ (800200c <readGRAM+0x2d0>)
 8001f32:	f7fe fcd5 	bl	80008e0 <PIN_HIGH>
 8001f36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f3a:	4834      	ldr	r0, [pc, #208]	@ (800200c <readGRAM+0x2d0>)
 8001f3c:	f7fe fcd0 	bl	80008e0 <PIN_HIGH>
 8001f40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f44:	4831      	ldr	r0, [pc, #196]	@ (800200c <readGRAM+0x2d0>)
 8001f46:	f7fe fcbb 	bl	80008c0 <PIN_LOW>
 8001f4a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f4e:	482f      	ldr	r0, [pc, #188]	@ (800200c <readGRAM+0x2d0>)
 8001f50:	f7fe fcb6 	bl	80008c0 <PIN_LOW>
 8001f54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f58:	482c      	ldr	r0, [pc, #176]	@ (800200c <readGRAM+0x2d0>)
 8001f5a:	f7fe fcb1 	bl	80008c0 <PIN_LOW>
 8001f5e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f62:	482a      	ldr	r0, [pc, #168]	@ (800200c <readGRAM+0x2d0>)
 8001f64:	f7fe fcac 	bl	80008c0 <PIN_LOW>
 8001f68:	4b28      	ldr	r3, [pc, #160]	@ (800200c <readGRAM+0x2d0>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	833b      	strh	r3, [r7, #24]
 8001f70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f74:	4825      	ldr	r0, [pc, #148]	@ (800200c <readGRAM+0x2d0>)
 8001f76:	f7fe fcb3 	bl	80008e0 <PIN_HIGH>
 8001f7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f7e:	4823      	ldr	r0, [pc, #140]	@ (800200c <readGRAM+0x2d0>)
 8001f80:	f7fe fcae 	bl	80008e0 <PIN_HIGH>
 8001f84:	7efb      	ldrb	r3, [r7, #27]
 8001f86:	b21b      	sxth	r3, r3
 8001f88:	021b      	lsls	r3, r3, #8
 8001f8a:	b21a      	sxth	r2, r3
 8001f8c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8001f96:	4b1a      	ldr	r3, [pc, #104]	@ (8002000 <readGRAM+0x2c4>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	f241 5211 	movw	r2, #5393	@ 0x1511
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	f040 8161 	bne.w	8002266 <readGRAM+0x52a>
 8001fa4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fa8:	4818      	ldr	r0, [pc, #96]	@ (800200c <readGRAM+0x2d0>)
 8001faa:	f7fe fc99 	bl	80008e0 <PIN_HIGH>
 8001fae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fb2:	4816      	ldr	r0, [pc, #88]	@ (800200c <readGRAM+0x2d0>)
 8001fb4:	f7fe fc84 	bl	80008c0 <PIN_LOW>
 8001fb8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fbc:	4813      	ldr	r0, [pc, #76]	@ (800200c <readGRAM+0x2d0>)
 8001fbe:	f7fe fc7f 	bl	80008c0 <PIN_LOW>
 8001fc2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fc6:	4811      	ldr	r0, [pc, #68]	@ (800200c <readGRAM+0x2d0>)
 8001fc8:	f7fe fc7a 	bl	80008c0 <PIN_LOW>
 8001fcc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fd0:	480e      	ldr	r0, [pc, #56]	@ (800200c <readGRAM+0x2d0>)
 8001fd2:	f7fe fc75 	bl	80008c0 <PIN_LOW>
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <readGRAM+0x2d0>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	75fb      	strb	r3, [r7, #23]
 8001fdc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fe0:	480a      	ldr	r0, [pc, #40]	@ (800200c <readGRAM+0x2d0>)
 8001fe2:	f7fe fc7d 	bl	80008e0 <PIN_HIGH>
 8001fe6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fea:	4808      	ldr	r0, [pc, #32]	@ (800200c <readGRAM+0x2d0>)
 8001fec:	f7fe fc78 	bl	80008e0 <PIN_HIGH>
        while (n)
 8001ff0:	e139      	b.n	8002266 <readGRAM+0x52a>
 8001ff2:	bf00      	nop
 8001ff4:	20000098 	.word	0x20000098
 8001ff8:	20000083 	.word	0x20000083
 8001ffc:	2000008c 	.word	0x2000008c
 8002000:	2000008e 	.word	0x2000008e
 8002004:	20000094 	.word	0x20000094
 8002008:	20000096 	.word	0x20000096
 800200c:	40011800 	.word	0x40011800
        {
            if (_lcd_capable & READ_24BITS)
 8002010:	4bbb      	ldr	r3, [pc, #748]	@ (8002300 <readGRAM+0x5c4>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 808a 	beq.w	8002132 <readGRAM+0x3f6>
            {
                READ_8(r);
 800201e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002022:	48b8      	ldr	r0, [pc, #736]	@ (8002304 <readGRAM+0x5c8>)
 8002024:	f7fe fc5c 	bl	80008e0 <PIN_HIGH>
 8002028:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800202c:	48b5      	ldr	r0, [pc, #724]	@ (8002304 <readGRAM+0x5c8>)
 800202e:	f7fe fc47 	bl	80008c0 <PIN_LOW>
 8002032:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002036:	48b3      	ldr	r0, [pc, #716]	@ (8002304 <readGRAM+0x5c8>)
 8002038:	f7fe fc42 	bl	80008c0 <PIN_LOW>
 800203c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002040:	48b0      	ldr	r0, [pc, #704]	@ (8002304 <readGRAM+0x5c8>)
 8002042:	f7fe fc3d 	bl	80008c0 <PIN_LOW>
 8002046:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800204a:	48ae      	ldr	r0, [pc, #696]	@ (8002304 <readGRAM+0x5c8>)
 800204c:	f7fe fc38 	bl	80008c0 <PIN_LOW>
 8002050:	4bac      	ldr	r3, [pc, #688]	@ (8002304 <readGRAM+0x5c8>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	75fb      	strb	r3, [r7, #23]
 8002056:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800205a:	48aa      	ldr	r0, [pc, #680]	@ (8002304 <readGRAM+0x5c8>)
 800205c:	f7fe fc40 	bl	80008e0 <PIN_HIGH>
 8002060:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002064:	48a7      	ldr	r0, [pc, #668]	@ (8002304 <readGRAM+0x5c8>)
 8002066:	f7fe fc3b 	bl	80008e0 <PIN_HIGH>
                READ_8(g);
 800206a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800206e:	48a5      	ldr	r0, [pc, #660]	@ (8002304 <readGRAM+0x5c8>)
 8002070:	f7fe fc36 	bl	80008e0 <PIN_HIGH>
 8002074:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002078:	48a2      	ldr	r0, [pc, #648]	@ (8002304 <readGRAM+0x5c8>)
 800207a:	f7fe fc21 	bl	80008c0 <PIN_LOW>
 800207e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002082:	48a0      	ldr	r0, [pc, #640]	@ (8002304 <readGRAM+0x5c8>)
 8002084:	f7fe fc1c 	bl	80008c0 <PIN_LOW>
 8002088:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800208c:	489d      	ldr	r0, [pc, #628]	@ (8002304 <readGRAM+0x5c8>)
 800208e:	f7fe fc17 	bl	80008c0 <PIN_LOW>
 8002092:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002096:	489b      	ldr	r0, [pc, #620]	@ (8002304 <readGRAM+0x5c8>)
 8002098:	f7fe fc12 	bl	80008c0 <PIN_LOW>
 800209c:	4b99      	ldr	r3, [pc, #612]	@ (8002304 <readGRAM+0x5c8>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	757b      	strb	r3, [r7, #21]
 80020a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020a6:	4897      	ldr	r0, [pc, #604]	@ (8002304 <readGRAM+0x5c8>)
 80020a8:	f7fe fc1a 	bl	80008e0 <PIN_HIGH>
 80020ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020b0:	4894      	ldr	r0, [pc, #592]	@ (8002304 <readGRAM+0x5c8>)
 80020b2:	f7fe fc15 	bl	80008e0 <PIN_HIGH>
                READ_8(b);
 80020b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020ba:	4892      	ldr	r0, [pc, #584]	@ (8002304 <readGRAM+0x5c8>)
 80020bc:	f7fe fc10 	bl	80008e0 <PIN_HIGH>
 80020c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020c4:	488f      	ldr	r0, [pc, #572]	@ (8002304 <readGRAM+0x5c8>)
 80020c6:	f7fe fbfb 	bl	80008c0 <PIN_LOW>
 80020ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020ce:	488d      	ldr	r0, [pc, #564]	@ (8002304 <readGRAM+0x5c8>)
 80020d0:	f7fe fbf6 	bl	80008c0 <PIN_LOW>
 80020d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020d8:	488a      	ldr	r0, [pc, #552]	@ (8002304 <readGRAM+0x5c8>)
 80020da:	f7fe fbf1 	bl	80008c0 <PIN_LOW>
 80020de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020e2:	4888      	ldr	r0, [pc, #544]	@ (8002304 <readGRAM+0x5c8>)
 80020e4:	f7fe fbec 	bl	80008c0 <PIN_LOW>
 80020e8:	4b86      	ldr	r3, [pc, #536]	@ (8002304 <readGRAM+0x5c8>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	753b      	strb	r3, [r7, #20]
 80020ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020f2:	4884      	ldr	r0, [pc, #528]	@ (8002304 <readGRAM+0x5c8>)
 80020f4:	f7fe fbf4 	bl	80008e0 <PIN_HIGH>
 80020f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020fc:	4881      	ldr	r0, [pc, #516]	@ (8002304 <readGRAM+0x5c8>)
 80020fe:	f7fe fbef 	bl	80008e0 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8002102:	4b7f      	ldr	r3, [pc, #508]	@ (8002300 <readGRAM+0x5c4>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <readGRAM+0x3e4>
                    ret = color565(b, g, r);
 800210e:	7dfa      	ldrb	r2, [r7, #23]
 8002110:	7d79      	ldrb	r1, [r7, #21]
 8002112:	7d3b      	ldrb	r3, [r7, #20]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fca3 	bl	8000a60 <color565>
 800211a:	4603      	mov	r3, r0
 800211c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800211e:	e087      	b.n	8002230 <readGRAM+0x4f4>
                else
                    ret = color565(r, g, b);
 8002120:	7d3a      	ldrb	r2, [r7, #20]
 8002122:	7d79      	ldrb	r1, [r7, #21]
 8002124:	7dfb      	ldrb	r3, [r7, #23]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fc9a 	bl	8000a60 <color565>
 800212c:	4603      	mov	r3, r0
 800212e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002130:	e07e      	b.n	8002230 <readGRAM+0x4f4>
            } else
            {
                READ_16(ret);
 8002132:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002136:	4873      	ldr	r0, [pc, #460]	@ (8002304 <readGRAM+0x5c8>)
 8002138:	f7fe fbd2 	bl	80008e0 <PIN_HIGH>
 800213c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002140:	4870      	ldr	r0, [pc, #448]	@ (8002304 <readGRAM+0x5c8>)
 8002142:	f7fe fbbd 	bl	80008c0 <PIN_LOW>
 8002146:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800214a:	486e      	ldr	r0, [pc, #440]	@ (8002304 <readGRAM+0x5c8>)
 800214c:	f7fe fbb8 	bl	80008c0 <PIN_LOW>
 8002150:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002154:	486b      	ldr	r0, [pc, #428]	@ (8002304 <readGRAM+0x5c8>)
 8002156:	f7fe fbb3 	bl	80008c0 <PIN_LOW>
 800215a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800215e:	4869      	ldr	r0, [pc, #420]	@ (8002304 <readGRAM+0x5c8>)
 8002160:	f7fe fbae 	bl	80008c0 <PIN_LOW>
 8002164:	4b67      	ldr	r3, [pc, #412]	@ (8002304 <readGRAM+0x5c8>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	75bb      	strb	r3, [r7, #22]
 800216a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800216e:	4865      	ldr	r0, [pc, #404]	@ (8002304 <readGRAM+0x5c8>)
 8002170:	f7fe fbb6 	bl	80008e0 <PIN_HIGH>
 8002174:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002178:	4862      	ldr	r0, [pc, #392]	@ (8002304 <readGRAM+0x5c8>)
 800217a:	f7fe fbb1 	bl	80008e0 <PIN_HIGH>
 800217e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002182:	4860      	ldr	r0, [pc, #384]	@ (8002304 <readGRAM+0x5c8>)
 8002184:	f7fe fbac 	bl	80008e0 <PIN_HIGH>
 8002188:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800218c:	485d      	ldr	r0, [pc, #372]	@ (8002304 <readGRAM+0x5c8>)
 800218e:	f7fe fb97 	bl	80008c0 <PIN_LOW>
 8002192:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002196:	485b      	ldr	r0, [pc, #364]	@ (8002304 <readGRAM+0x5c8>)
 8002198:	f7fe fb92 	bl	80008c0 <PIN_LOW>
 800219c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021a0:	4858      	ldr	r0, [pc, #352]	@ (8002304 <readGRAM+0x5c8>)
 80021a2:	f7fe fb8d 	bl	80008c0 <PIN_LOW>
 80021a6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021aa:	4856      	ldr	r0, [pc, #344]	@ (8002304 <readGRAM+0x5c8>)
 80021ac:	f7fe fb88 	bl	80008c0 <PIN_LOW>
 80021b0:	4b54      	ldr	r3, [pc, #336]	@ (8002304 <readGRAM+0x5c8>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80021b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021bc:	4851      	ldr	r0, [pc, #324]	@ (8002304 <readGRAM+0x5c8>)
 80021be:	f7fe fb8f 	bl	80008e0 <PIN_HIGH>
 80021c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021c6:	484f      	ldr	r0, [pc, #316]	@ (8002304 <readGRAM+0x5c8>)
 80021c8:	f7fe fb8a 	bl	80008e0 <PIN_HIGH>
 80021cc:	7dbb      	ldrb	r3, [r7, #22]
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80021d8:	4313      	orrs	r3, r2
 80021da:	b21b      	sxth	r3, r3
 80021dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (_lcd_capable & READ_LOWHIGH)
 80021de:	4b48      	ldr	r3, [pc, #288]	@ (8002300 <readGRAM+0x5c4>)
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <readGRAM+0x4c4>
                    ret = (ret >> 8) | (ret << 8);
 80021ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (_lcd_capable & READ_BGR)
 8002200:	4b3f      	ldr	r3, [pc, #252]	@ (8002300 <readGRAM+0x5c4>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d011      	beq.n	8002230 <readGRAM+0x4f4>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 800220c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002210:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8002214:	b21a      	sxth	r2, r3
 8002216:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002218:	0adb      	lsrs	r3, r3, #11
 800221a:	b29b      	uxth	r3, r3
 800221c:	b21b      	sxth	r3, r3
 800221e:	4313      	orrs	r3, r2
 8002220:	b21a      	sxth	r2, r3
 8002222:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002226:	02db      	lsls	r3, r3, #11
 8002228:	b21b      	sxth	r3, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	b21b      	sxth	r3, r3
 800222e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 8002230:	4b35      	ldr	r3, [pc, #212]	@ (8002308 <readGRAM+0x5cc>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <readGRAM+0x508>
 8002238:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fbc2 	bl	80009c4 <color555_to_565>
 8002240:	4603      	mov	r3, r0
 8002242:	84fb      	strh	r3, [r7, #38]	@ 0x26
#endif
            *block++ = ret;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	1c9a      	adds	r2, r3, #2
 8002248:	60ba      	str	r2, [r7, #8]
 800224a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800224c:	801a      	strh	r2, [r3, #0]
            n--;
 800224e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29b      	uxth	r3, r3
 8002258:	847b      	strh	r3, [r7, #34]	@ 0x22
            if (!(_lcd_capable & AUTO_READINC))
 800225a:	4b29      	ldr	r3, [pc, #164]	@ (8002300 <readGRAM+0x5c4>)
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <readGRAM+0x536>
        while (n)
 8002266:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800226a:	2b00      	cmp	r3, #0
 800226c:	f47f aed0 	bne.w	8002010 <readGRAM+0x2d4>
 8002270:	e000      	b.n	8002274 <readGRAM+0x538>
                break;
 8002272:	bf00      	nop
        }
        if (++col >= w) {
 8002274:	8bfb      	ldrh	r3, [r7, #30]
 8002276:	3301      	adds	r3, #1
 8002278:	b29b      	uxth	r3, r3
 800227a:	83fb      	strh	r3, [r7, #30]
 800227c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002284:	429a      	cmp	r2, r3
 8002286:	db0d      	blt.n	80022a4 <readGRAM+0x568>
            col = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 800228c:	8c3b      	ldrh	r3, [r7, #32]
 800228e:	3301      	adds	r3, #1
 8002290:	b29b      	uxth	r3, r3
 8002292:	843b      	strh	r3, [r7, #32]
 8002294:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002298:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800229c:	429a      	cmp	r2, r3
 800229e:	db01      	blt.n	80022a4 <readGRAM+0x568>
                row = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 80022a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022a8:	4816      	ldr	r0, [pc, #88]	@ (8002304 <readGRAM+0x5c8>)
 80022aa:	f7fe fb19 	bl	80008e0 <PIN_HIGH>
        CS_IDLE;
 80022ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022b2:	4814      	ldr	r0, [pc, #80]	@ (8002304 <readGRAM+0x5c8>)
 80022b4:	f7fe fb14 	bl	80008e0 <PIN_HIGH>
        setWriteDir();
 80022b8:	f7fe fc5c 	bl	8000b74 <setWriteDir>
    while (n > 0) {
 80022bc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f73f ad7d 	bgt.w	8001dc0 <readGRAM+0x84>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 80022c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <readGRAM+0x5c4>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d110      	bne.n	80022f4 <readGRAM+0x5b8>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80022d2:	f7fe fb43 	bl	800095c <width>
 80022d6:	4603      	mov	r3, r0
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29b      	uxth	r3, r3
 80022dc:	b21c      	sxth	r4, r3
 80022de:	f7fe fb47 	bl	8000970 <height>
 80022e2:	4603      	mov	r3, r0
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	4622      	mov	r2, r4
 80022ec:	2100      	movs	r1, #0
 80022ee:	2000      	movs	r0, #0
 80022f0:	f000 fb2a 	bl	8002948 <setAddrWindow>
    return 0;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	372c      	adds	r7, #44	@ 0x2c
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd90      	pop	{r4, r7, pc}
 80022fe:	bf00      	nop
 8002300:	2000008c 	.word	0x2000008c
 8002304:	40011800 	.word	0x40011800
 8002308:	20000084 	.word	0x20000084

0800230c <setRotation>:

void setRotation(uint8_t r)
{
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 8002316:	4b9c      	ldr	r3, [pc, #624]	@ (8002588 <setRotation+0x27c>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	b2da      	uxtb	r2, r3
 8002324:	4b99      	ldr	r3, [pc, #612]	@ (800258c <setRotation+0x280>)
 8002326:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 8002328:	4b98      	ldr	r3, [pc, #608]	@ (800258c <setRotation+0x280>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <setRotation+0x2c>
 8002334:	22f0      	movs	r2, #240	@ 0xf0
 8002336:	e001      	b.n	800233c <setRotation+0x30>
 8002338:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800233c:	4b94      	ldr	r3, [pc, #592]	@ (8002590 <setRotation+0x284>)
 800233e:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 8002340:	4b92      	ldr	r3, [pc, #584]	@ (800258c <setRotation+0x280>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <setRotation+0x46>
 800234c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002350:	e000      	b.n	8002354 <setRotation+0x48>
 8002352:	22f0      	movs	r2, #240	@ 0xf0
 8002354:	4b8f      	ldr	r3, [pc, #572]	@ (8002594 <setRotation+0x288>)
 8002356:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 8002358:	4b8c      	ldr	r3, [pc, #560]	@ (800258c <setRotation+0x280>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d817      	bhi.n	8002390 <setRotation+0x84>
 8002360:	a201      	add	r2, pc, #4	@ (adr r2, 8002368 <setRotation+0x5c>)
 8002362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002366:	bf00      	nop
 8002368:	08002379 	.word	0x08002379
 800236c:	0800237f 	.word	0x0800237f
 8002370:	08002385 	.word	0x08002385
 8002374:	0800238b 	.word	0x0800238b
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 8002378:	2348      	movs	r3, #72	@ 0x48
 800237a:	72fb      	strb	r3, [r7, #11]
       break;
 800237c:	e008      	b.n	8002390 <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 800237e:	2328      	movs	r3, #40	@ 0x28
 8002380:	72fb      	strb	r3, [r7, #11]
       break;
 8002382:	e005      	b.n	8002390 <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8002384:	2398      	movs	r3, #152	@ 0x98
 8002386:	72fb      	strb	r3, [r7, #11]
       break;
 8002388:	e002      	b.n	8002390 <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 800238a:	23f8      	movs	r3, #248	@ 0xf8
 800238c:	72fb      	strb	r3, [r7, #11]
       break;
 800238e:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 8002390:	4b81      	ldr	r3, [pc, #516]	@ (8002598 <setRotation+0x28c>)
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <setRotation+0x9c>
       val ^= 0x80;
 800239c:	7afb      	ldrb	r3, [r7, #11]
 800239e:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 80023a2:	43db      	mvns	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 80023a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002598 <setRotation+0x28c>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d004      	beq.n	80023be <setRotation+0xb2>
       val ^= 0x40;
 80023b4:	7afb      	ldrb	r3, [r7, #11]
 80023b6:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 80023be:	4b76      	ldr	r3, [pc, #472]	@ (8002598 <setRotation+0x28c>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d004      	beq.n	80023d4 <setRotation+0xc8>
       val ^= 0x08;
 80023ca:	7afb      	ldrb	r3, [r7, #11]
 80023cc:	f083 0308 	eor.w	r3, r3, #8
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 80023d4:	4b70      	ldr	r3, [pc, #448]	@ (8002598 <setRotation+0x28c>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8119 	beq.w	8002614 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 80023e2:	4b6e      	ldr	r3, [pc, #440]	@ (800259c <setRotation+0x290>)
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	f646 0214 	movw	r2, #26644	@ 0x6814
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d128      	bne.n	8002440 <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 80023ee:	7afb      	ldrb	r3, [r7, #11]
 80023f0:	b25b      	sxtb	r3, r3
 80023f2:	105b      	asrs	r3, r3, #1
 80023f4:	b25b      	sxtb	r3, r3
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023fc:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 80023fe:	7afb      	ldrb	r3, [r7, #11]
 8002400:	105b      	asrs	r3, r3, #1
 8002402:	b29b      	uxth	r3, r3
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 800240a:	7afb      	ldrb	r3, [r7, #11]
 800240c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002410:	b2db      	uxtb	r3, r3
 8002412:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8002418:	8a3b      	ldrh	r3, [r7, #16]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	89fb      	ldrh	r3, [r7, #14]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	4313      	orrs	r3, r2
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	b2db      	uxtb	r3, r3
 800242a:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 800242c:	233b      	movs	r3, #59	@ 0x3b
 800242e:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 8002430:	f107 0308 	add.w	r3, r7, #8
 8002434:	461a      	mov	r2, r3
 8002436:	2103      	movs	r1, #3
 8002438:	20b6      	movs	r0, #182	@ 0xb6
 800243a:	f7fe fca7 	bl	8000d8c <WriteCmdParamN>
           goto common_MC;
 800243e:	e0c0      	b.n	80025c2 <setRotation+0x2b6>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 8002440:	4b56      	ldr	r3, [pc, #344]	@ (800259c <setRotation+0x290>)
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	f641 1263 	movw	r2, #6499	@ 0x1963
 8002448:	4293      	cmp	r3, r2
 800244a:	d00b      	beq.n	8002464 <setRotation+0x158>
 800244c:	4b53      	ldr	r3, [pc, #332]	@ (800259c <setRotation+0x290>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	f249 4281 	movw	r2, #38017	@ 0x9481
 8002454:	4293      	cmp	r3, r2
 8002456:	d005      	beq.n	8002464 <setRotation+0x158>
 8002458:	4b50      	ldr	r3, [pc, #320]	@ (800259c <setRotation+0x290>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	f241 5211 	movw	r2, #5393	@ 0x1511
 8002460:	4293      	cmp	r3, r2
 8002462:	d139      	bne.n	80024d8 <setRotation+0x1cc>
           if (val & 0x80)
 8002464:	7afb      	ldrb	r3, [r7, #11]
 8002466:	b25b      	sxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	da04      	bge.n	8002476 <setRotation+0x16a>
               val |= 0x01;    //GS
 800246c:	7afb      	ldrb	r3, [r7, #11]
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	b2db      	uxtb	r3, r3
 8002474:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 8002476:	7afb      	ldrb	r3, [r7, #11]
 8002478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d004      	beq.n	800248a <setRotation+0x17e>
               val |= 0x02;    //SS
 8002480:	7afb      	ldrb	r3, [r7, #11]
 8002482:	f043 0302 	orr.w	r3, r3, #2
 8002486:	b2db      	uxtb	r3, r3
 8002488:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 800248a:	4b44      	ldr	r3, [pc, #272]	@ (800259c <setRotation+0x290>)
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	f641 1263 	movw	r2, #6499	@ 0x1963
 8002492:	4293      	cmp	r3, r2
 8002494:	d104      	bne.n	80024a0 <setRotation+0x194>
 8002496:	7afb      	ldrb	r3, [r7, #11]
 8002498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800249c:	b2db      	uxtb	r3, r3
 800249e:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 80024a0:	4b3e      	ldr	r3, [pc, #248]	@ (800259c <setRotation+0x290>)
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	f249 4281 	movw	r2, #38017	@ 0x9481
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d104      	bne.n	80024b6 <setRotation+0x1aa>
 80024ac:	7afb      	ldrb	r3, [r7, #11]
 80024ae:	f003 032f 	and.w	r3, r3, #47	@ 0x2f
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 80024b6:	4b39      	ldr	r3, [pc, #228]	@ (800259c <setRotation+0x290>)
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	f241 5211 	movw	r2, #5393	@ 0x1511
 80024be:	4293      	cmp	r3, r2
 80024c0:	d160      	bne.n	8002584 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 80024c2:	7afb      	ldrb	r3, [r7, #11]
 80024c4:	f023 0310 	bic.w	r3, r3, #16
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 80024cc:	7afb      	ldrb	r3, [r7, #11]
 80024ce:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 80024d6:	e055      	b.n	8002584 <setRotation+0x278>
      }
       else if (is8347) {
 80024d8:	4b31      	ldr	r3, [pc, #196]	@ (80025a0 <setRotation+0x294>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d06f      	beq.n	80025c0 <setRotation+0x2b4>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 80024e0:	4b30      	ldr	r3, [pc, #192]	@ (80025a4 <setRotation+0x298>)
 80024e2:	2202      	movs	r2, #2
 80024e4:	801a      	strh	r2, [r3, #0]
 80024e6:	4b30      	ldr	r3, [pc, #192]	@ (80025a8 <setRotation+0x29c>)
 80024e8:	2206      	movs	r2, #6
 80024ea:	801a      	strh	r2, [r3, #0]
 80024ec:	4b2f      	ldr	r3, [pc, #188]	@ (80025ac <setRotation+0x2a0>)
 80024ee:	2222      	movs	r2, #34	@ 0x22
 80024f0:	801a      	strh	r2, [r3, #0]
 80024f2:	4b2f      	ldr	r3, [pc, #188]	@ (80025b0 <setRotation+0x2a4>)
 80024f4:	2202      	movs	r2, #2
 80024f6:	801a      	strh	r2, [r3, #0]
 80024f8:	4b2e      	ldr	r3, [pc, #184]	@ (80025b4 <setRotation+0x2a8>)
 80024fa:	2204      	movs	r2, #4
 80024fc:	801a      	strh	r2, [r3, #0]
 80024fe:	4b2e      	ldr	r3, [pc, #184]	@ (80025b8 <setRotation+0x2ac>)
 8002500:	2206      	movs	r2, #6
 8002502:	801a      	strh	r2, [r3, #0]
 8002504:	4b2d      	ldr	r3, [pc, #180]	@ (80025bc <setRotation+0x2b0>)
 8002506:	2208      	movs	r2, #8
 8002508:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 800250a:	4b24      	ldr	r3, [pc, #144]	@ (800259c <setRotation+0x290>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	2b65      	cmp	r3, #101	@ 0x65
 8002510:	d121      	bne.n	8002556 <setRotation+0x24a>
               val |= 0x01;    //GS=1
 8002512:	7afb      	ldrb	r3, [r7, #11]
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 800251c:	7afb      	ldrb	r3, [r7, #11]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <setRotation+0x226>
 8002526:	7afb      	ldrb	r3, [r7, #11]
 8002528:	f083 032c 	eor.w	r3, r3, #44	@ 0x2c
 800252c:	43db      	mvns	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <setRotation+0x23e>
 800253c:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <setRotation+0x298>)
 800253e:	2282      	movs	r2, #130	@ 0x82
 8002540:	801a      	strh	r2, [r3, #0]
 8002542:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <setRotation+0x29c>)
 8002544:	2280      	movs	r2, #128	@ 0x80
 8002546:	801a      	strh	r2, [r3, #0]
 8002548:	e005      	b.n	8002556 <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 800254a:	4b16      	ldr	r3, [pc, #88]	@ (80025a4 <setRotation+0x298>)
 800254c:	2280      	movs	r2, #128	@ 0x80
 800254e:	801a      	strh	r2, [r3, #0]
 8002550:	4b15      	ldr	r3, [pc, #84]	@ (80025a8 <setRotation+0x29c>)
 8002552:	2282      	movs	r2, #130	@ 0x82
 8002554:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 8002556:	4b11      	ldr	r3, [pc, #68]	@ (800259c <setRotation+0x290>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	f245 2252 	movw	r2, #21074	@ 0x5252
 800255e:	4293      	cmp	r3, r2
 8002560:	d145      	bne.n	80025ee <setRotation+0x2e2>
               val |= 0x02;   //VERT_SCROLLON
 8002562:	7afb      	ldrb	r3, [r7, #11]
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	b2db      	uxtb	r3, r3
 800256a:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 800256c:	7afb      	ldrb	r3, [r7, #11]
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	2b00      	cmp	r3, #0
 8002574:	d03b      	beq.n	80025ee <setRotation+0x2e2>
 8002576:	7afb      	ldrb	r3, [r7, #11]
 8002578:	f083 032b 	eor.w	r3, r3, #43	@ 0x2b
 800257c:	43db      	mvns	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 8002582:	e034      	b.n	80025ee <setRotation+0x2e2>
           goto common_MC;
 8002584:	bf00      	nop
 8002586:	e01c      	b.n	80025c2 <setRotation+0x2b6>
 8002588:	20000090 	.word	0x20000090
 800258c:	20000088 	.word	0x20000088
 8002590:	20000004 	.word	0x20000004
 8002594:	20000006 	.word	0x20000006
 8002598:	2000008c 	.word	0x2000008c
 800259c:	2000008e 	.word	0x2000008e
 80025a0:	20000083 	.word	0x20000083
 80025a4:	20000094 	.word	0x20000094
 80025a8:	20000096 	.word	0x20000096
 80025ac:	20000098 	.word	0x20000098
 80025b0:	2000009a 	.word	0x2000009a
 80025b4:	2000009c 	.word	0x2000009c
 80025b8:	2000009e 	.word	0x2000009e
 80025bc:	200000a0 	.word	0x200000a0
       }
     common_MC:
 80025c0:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 80025c2:	4b89      	ldr	r3, [pc, #548]	@ (80027e8 <setRotation+0x4dc>)
 80025c4:	222a      	movs	r2, #42	@ 0x2a
 80025c6:	801a      	strh	r2, [r3, #0]
 80025c8:	4b88      	ldr	r3, [pc, #544]	@ (80027ec <setRotation+0x4e0>)
 80025ca:	222b      	movs	r2, #43	@ 0x2b
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	4b88      	ldr	r3, [pc, #544]	@ (80027f0 <setRotation+0x4e4>)
 80025d0:	222c      	movs	r2, #44	@ 0x2c
 80025d2:	801a      	strh	r2, [r3, #0]
 80025d4:	4b87      	ldr	r3, [pc, #540]	@ (80027f4 <setRotation+0x4e8>)
 80025d6:	222a      	movs	r2, #42	@ 0x2a
 80025d8:	801a      	strh	r2, [r3, #0]
 80025da:	4b87      	ldr	r3, [pc, #540]	@ (80027f8 <setRotation+0x4ec>)
 80025dc:	222a      	movs	r2, #42	@ 0x2a
 80025de:	801a      	strh	r2, [r3, #0]
 80025e0:	4b86      	ldr	r3, [pc, #536]	@ (80027fc <setRotation+0x4f0>)
 80025e2:	222b      	movs	r2, #43	@ 0x2b
 80025e4:	801a      	strh	r2, [r3, #0]
 80025e6:	4b86      	ldr	r3, [pc, #536]	@ (8002800 <setRotation+0x4f4>)
 80025e8:	222b      	movs	r2, #43	@ 0x2b
 80025ea:	801a      	strh	r2, [r3, #0]
 80025ec:	e000      	b.n	80025f0 <setRotation+0x2e4>
			goto common_BGR;
 80025ee:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 80025f0:	4b84      	ldr	r3, [pc, #528]	@ (8002804 <setRotation+0x4f8>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <setRotation+0x2f0>
 80025f8:	2316      	movs	r3, #22
 80025fa:	e000      	b.n	80025fe <setRotation+0x2f2>
 80025fc:	2336      	movs	r3, #54	@ 0x36
 80025fe:	f107 020b 	add.w	r2, r7, #11
 8002602:	2101      	movs	r1, #1
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fbc1 	bl	8000d8c <WriteCmdParamN>
       _lcd_madctl = val;
 800260a:	7afb      	ldrb	r3, [r7, #11]
 800260c:	461a      	mov	r2, r3
 800260e:	4b7e      	ldr	r3, [pc, #504]	@ (8002808 <setRotation+0x4fc>)
 8002610:	801a      	strh	r2, [r3, #0]
 8002612:	e0a5      	b.n	8002760 <setRotation+0x454>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8002614:	4b7d      	ldr	r3, [pc, #500]	@ (800280c <setRotation+0x500>)
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	f24b 5209 	movw	r2, #46345	@ 0xb509
 800261c:	4293      	cmp	r3, r2
 800261e:	d013      	beq.n	8002648 <setRotation+0x33c>
 8002620:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8002624:	4293      	cmp	r3, r2
 8002626:	dc4f      	bgt.n	80026c8 <setRotation+0x3bc>
 8002628:	f249 3226 	movw	r2, #37670	@ 0x9326
 800262c:	4293      	cmp	r3, r2
 800262e:	d00b      	beq.n	8002648 <setRotation+0x33c>
 8002630:	f249 3226 	movw	r2, #37670	@ 0x9326
 8002634:	4293      	cmp	r3, r2
 8002636:	dc47      	bgt.n	80026c8 <setRotation+0x3bc>
 8002638:	f245 4220 	movw	r2, #21536	@ 0x5420
 800263c:	4293      	cmp	r3, r2
 800263e:	d003      	beq.n	8002648 <setRotation+0x33c>
 8002640:	f247 7293 	movw	r2, #30611	@ 0x7793
 8002644:	4293      	cmp	r3, r2
 8002646:	d13f      	bne.n	80026c8 <setRotation+0x3bc>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 8002648:	4b67      	ldr	r3, [pc, #412]	@ (80027e8 <setRotation+0x4dc>)
 800264a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800264e:	801a      	strh	r2, [r3, #0]
 8002650:	4b66      	ldr	r3, [pc, #408]	@ (80027ec <setRotation+0x4e0>)
 8002652:	f240 2201 	movw	r2, #513	@ 0x201
 8002656:	801a      	strh	r2, [r3, #0]
 8002658:	4b65      	ldr	r3, [pc, #404]	@ (80027f0 <setRotation+0x4e4>)
 800265a:	f240 2202 	movw	r2, #514	@ 0x202
 800265e:	801a      	strh	r2, [r3, #0]
 8002660:	4b64      	ldr	r3, [pc, #400]	@ (80027f4 <setRotation+0x4e8>)
 8002662:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8002666:	801a      	strh	r2, [r3, #0]
 8002668:	4b63      	ldr	r3, [pc, #396]	@ (80027f8 <setRotation+0x4ec>)
 800266a:	f240 2211 	movw	r2, #529	@ 0x211
 800266e:	801a      	strh	r2, [r3, #0]
 8002670:	4b62      	ldr	r3, [pc, #392]	@ (80027fc <setRotation+0x4f0>)
 8002672:	f240 2212 	movw	r2, #530	@ 0x212
 8002676:	801a      	strh	r2, [r3, #0]
 8002678:	4b61      	ldr	r3, [pc, #388]	@ (8002800 <setRotation+0x4f4>)
 800267a:	f240 2213 	movw	r2, #531	@ 0x213
 800267e:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 8002680:	7afb      	ldrb	r3, [r7, #11]
 8002682:	b25b      	sxtb	r3, r3
 8002684:	b29b      	uxth	r3, r3
 8002686:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800268a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800268e:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 8002690:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002694:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8002696:	4b5d      	ldr	r3, [pc, #372]	@ (800280c <setRotation+0x500>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	f249 3226 	movw	r2, #37670	@ 0x9326
 800269e:	4293      	cmp	r3, r2
 80026a0:	d005      	beq.n	80026ae <setRotation+0x3a2>
 80026a2:	4b5a      	ldr	r3, [pc, #360]	@ (800280c <setRotation+0x500>)
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	f245 4220 	movw	r2, #21536	@ 0x5420
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d102      	bne.n	80026b4 <setRotation+0x3a8>
 80026ae:	8abb      	ldrh	r3, [r7, #20]
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 80026b4:	8a3a      	ldrh	r2, [r7, #16]
 80026b6:	8abb      	ldrh	r3, [r7, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	4619      	mov	r1, r3
 80026be:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80026c2:	f7fe fa0c 	bl	8000ade <WriteCmdData>
           goto common_SS;
 80026c6:	e024      	b.n	8002712 <setRotation+0x406>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 80026c8:	4b47      	ldr	r3, [pc, #284]	@ (80027e8 <setRotation+0x4dc>)
 80026ca:	2220      	movs	r2, #32
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	4b47      	ldr	r3, [pc, #284]	@ (80027ec <setRotation+0x4e0>)
 80026d0:	2221      	movs	r2, #33	@ 0x21
 80026d2:	801a      	strh	r2, [r3, #0]
 80026d4:	4b46      	ldr	r3, [pc, #280]	@ (80027f0 <setRotation+0x4e4>)
 80026d6:	2222      	movs	r2, #34	@ 0x22
 80026d8:	801a      	strh	r2, [r3, #0]
 80026da:	4b46      	ldr	r3, [pc, #280]	@ (80027f4 <setRotation+0x4e8>)
 80026dc:	2250      	movs	r2, #80	@ 0x50
 80026de:	801a      	strh	r2, [r3, #0]
 80026e0:	4b45      	ldr	r3, [pc, #276]	@ (80027f8 <setRotation+0x4ec>)
 80026e2:	2251      	movs	r2, #81	@ 0x51
 80026e4:	801a      	strh	r2, [r3, #0]
 80026e6:	4b45      	ldr	r3, [pc, #276]	@ (80027fc <setRotation+0x4f0>)
 80026e8:	2252      	movs	r2, #82	@ 0x52
 80026ea:	801a      	strh	r2, [r3, #0]
 80026ec:	4b44      	ldr	r3, [pc, #272]	@ (8002800 <setRotation+0x4f4>)
 80026ee:	2253      	movs	r2, #83	@ 0x53
 80026f0:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 80026f2:	7afb      	ldrb	r3, [r7, #11]
 80026f4:	b25b      	sxtb	r3, r3
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80026fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002700:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 8002702:	8a3b      	ldrh	r3, [r7, #16]
 8002704:	f443 531c 	orr.w	r3, r3, #9984	@ 0x2700
 8002708:	b29b      	uxth	r3, r3
 800270a:	4619      	mov	r1, r3
 800270c:	2060      	movs	r0, #96	@ 0x60
 800270e:	f7fe f9e6 	bl	8000ade <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 8002712:	7afb      	ldrb	r3, [r7, #11]
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	b29b      	uxth	r3, r3
 8002718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271c:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 800271e:	89fb      	ldrh	r3, [r7, #14]
 8002720:	4619      	mov	r1, r3
 8002722:	2001      	movs	r0, #1
 8002724:	f7fe f9db 	bl	8000ade <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 8002728:	7afb      	ldrb	r3, [r7, #11]
 800272a:	109b      	asrs	r3, r3, #2
 800272c:	b29b      	uxth	r3, r3
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 8002734:	7afb      	ldrb	r3, [r7, #11]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <setRotation+0x43a>
               ORG |= 0x1000;  //BGR
 800273e:	8afb      	ldrh	r3, [r7, #22]
 8002740:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002744:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 8002746:	8afb      	ldrh	r3, [r7, #22]
 8002748:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800274c:	b29a      	uxth	r2, r3
 800274e:	4b2e      	ldr	r3, [pc, #184]	@ (8002808 <setRotation+0x4fc>)
 8002750:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 8002752:	4b2d      	ldr	r3, [pc, #180]	@ (8002808 <setRotation+0x4fc>)
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	4619      	mov	r1, r3
 8002758:	2003      	movs	r0, #3
 800275a:	f7fe f9c0 	bl	8000ade <WriteCmdData>
           break;
 800275e:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 8002760:	4b2b      	ldr	r3, [pc, #172]	@ (8002810 <setRotation+0x504>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d023      	beq.n	80027b4 <setRotation+0x4a8>
 800276c:	4b29      	ldr	r3, [pc, #164]	@ (8002814 <setRotation+0x508>)
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d11d      	bne.n	80027b4 <setRotation+0x4a8>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 8002778:	4b1b      	ldr	r3, [pc, #108]	@ (80027e8 <setRotation+0x4dc>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	81bb      	strh	r3, [r7, #12]
 800277e:	4b1b      	ldr	r3, [pc, #108]	@ (80027ec <setRotation+0x4e0>)
 8002780:	881a      	ldrh	r2, [r3, #0]
 8002782:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <setRotation+0x4dc>)
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	4a19      	ldr	r2, [pc, #100]	@ (80027ec <setRotation+0x4e0>)
 8002788:	89bb      	ldrh	r3, [r7, #12]
 800278a:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 800278c:	4b19      	ldr	r3, [pc, #100]	@ (80027f4 <setRotation+0x4e8>)
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	81bb      	strh	r3, [r7, #12]
 8002792:	4b1a      	ldr	r3, [pc, #104]	@ (80027fc <setRotation+0x4f0>)
 8002794:	881a      	ldrh	r2, [r3, #0]
 8002796:	4b17      	ldr	r3, [pc, #92]	@ (80027f4 <setRotation+0x4e8>)
 8002798:	801a      	strh	r2, [r3, #0]
 800279a:	4a18      	ldr	r2, [pc, #96]	@ (80027fc <setRotation+0x4f0>)
 800279c:	89bb      	ldrh	r3, [r7, #12]
 800279e:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 80027a0:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <setRotation+0x4ec>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	81bb      	strh	r3, [r7, #12]
 80027a6:	4b16      	ldr	r3, [pc, #88]	@ (8002800 <setRotation+0x4f4>)
 80027a8:	881a      	ldrh	r2, [r3, #0]
 80027aa:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <setRotation+0x4ec>)
 80027ac:	801a      	strh	r2, [r3, #0]
 80027ae:	4a14      	ldr	r2, [pc, #80]	@ (8002800 <setRotation+0x4f4>)
 80027b0:	89bb      	ldrh	r3, [r7, #12]
 80027b2:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 80027b4:	f7fe f8d2 	bl	800095c <width>
 80027b8:	4603      	mov	r3, r0
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29b      	uxth	r3, r3
 80027be:	b21c      	sxth	r4, r3
 80027c0:	f7fe f8d6 	bl	8000970 <height>
 80027c4:	4603      	mov	r3, r0
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	b21b      	sxth	r3, r3
 80027cc:	4622      	mov	r2, r4
 80027ce:	2100      	movs	r1, #0
 80027d0:	2000      	movs	r0, #0
 80027d2:	f000 f8b9 	bl	8002948 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 80027d6:	2200      	movs	r2, #0
 80027d8:	21f0      	movs	r1, #240	@ 0xf0
 80027da:	2000      	movs	r0, #0
 80027dc:	f000 f9d6 	bl	8002b8c <vertScroll>
}
 80027e0:	bf00      	nop
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd90      	pop	{r4, r7, pc}
 80027e8:	20000094 	.word	0x20000094
 80027ec:	20000096 	.word	0x20000096
 80027f0:	20000098 	.word	0x20000098
 80027f4:	2000009a 	.word	0x2000009a
 80027f8:	2000009c 	.word	0x2000009c
 80027fc:	2000009e 	.word	0x2000009e
 8002800:	200000a0 	.word	0x200000a0
 8002804:	20000083 	.word	0x20000083
 8002808:	20000092 	.word	0x20000092
 800280c:	2000008e 	.word	0x2000008e
 8002810:	20000088 	.word	0x20000088
 8002814:	2000008c 	.word	0x2000008c

08002818 <drawPixel>:

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	80fb      	strh	r3, [r7, #6]
 8002822:	460b      	mov	r3, r1
 8002824:	80bb      	strh	r3, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 800282a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800282e:	2b00      	cmp	r3, #0
 8002830:	db7e      	blt.n	8002930 <drawPixel+0x118>
 8002832:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	db7a      	blt.n	8002930 <drawPixel+0x118>
 800283a:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800283e:	f7fe f88d 	bl	800095c <width>
 8002842:	4603      	mov	r3, r0
 8002844:	429c      	cmp	r4, r3
 8002846:	da73      	bge.n	8002930 <drawPixel+0x118>
 8002848:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800284c:	f7fe f890 	bl	8000970 <height>
 8002850:	4603      	mov	r3, r0
 8002852:	429c      	cmp	r4, r3
 8002854:	da6c      	bge.n	8002930 <drawPixel+0x118>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 8002856:	4b38      	ldr	r3, [pc, #224]	@ (8002938 <drawPixel+0x120>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <drawPixel+0x52>
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	4618      	mov	r0, r3
 8002862:	f7fe f88f 	bl	8000984 <color565_to_555>
 8002866:	4603      	mov	r3, r0
 8002868:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 800286a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800286e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002872:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002876:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800287a:	f000 f865 	bl	8002948 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 800287e:	4b2f      	ldr	r3, [pc, #188]	@ (800293c <drawPixel+0x124>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d04c      	beq.n	8002920 <drawPixel+0x108>
 8002886:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800288a:	482d      	ldr	r0, [pc, #180]	@ (8002940 <drawPixel+0x128>)
 800288c:	f7fe f818 	bl	80008c0 <PIN_LOW>
 8002890:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002894:	482a      	ldr	r0, [pc, #168]	@ (8002940 <drawPixel+0x128>)
 8002896:	f7fe f813 	bl	80008c0 <PIN_LOW>
 800289a:	4b2a      	ldr	r3, [pc, #168]	@ (8002944 <drawPixel+0x12c>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	73fb      	strb	r3, [r7, #15]
 80028a4:	4b27      	ldr	r3, [pc, #156]	@ (8002944 <drawPixel+0x12c>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	73bb      	strb	r3, [r7, #14]
 80028aa:	4b25      	ldr	r3, [pc, #148]	@ (8002940 <drawPixel+0x128>)
 80028ac:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 80028b0:	611a      	str	r2, [r3, #16]
 80028b2:	4a23      	ldr	r2, [pc, #140]	@ (8002940 <drawPixel+0x128>)
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	6113      	str	r3, [r2, #16]
 80028b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028bc:	4820      	ldr	r0, [pc, #128]	@ (8002940 <drawPixel+0x128>)
 80028be:	f7fd ffff 	bl	80008c0 <PIN_LOW>
 80028c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028c6:	481e      	ldr	r0, [pc, #120]	@ (8002940 <drawPixel+0x128>)
 80028c8:	f7fe f80a 	bl	80008e0 <PIN_HIGH>
 80028cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028d0:	481b      	ldr	r0, [pc, #108]	@ (8002940 <drawPixel+0x128>)
 80028d2:	f7fe f805 	bl	80008e0 <PIN_HIGH>
 80028d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002940 <drawPixel+0x128>)
 80028d8:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 80028dc:	611a      	str	r2, [r3, #16]
 80028de:	4a18      	ldr	r2, [pc, #96]	@ (8002940 <drawPixel+0x128>)
 80028e0:	7bbb      	ldrb	r3, [r7, #14]
 80028e2:	6113      	str	r3, [r2, #16]
 80028e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028e8:	4815      	ldr	r0, [pc, #84]	@ (8002940 <drawPixel+0x128>)
 80028ea:	f7fd ffe9 	bl	80008c0 <PIN_LOW>
 80028ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028f2:	4813      	ldr	r0, [pc, #76]	@ (8002940 <drawPixel+0x128>)
 80028f4:	f7fd fff4 	bl	80008e0 <PIN_HIGH>
 80028f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028fc:	4810      	ldr	r0, [pc, #64]	@ (8002940 <drawPixel+0x128>)
 80028fe:	f7fd ffef 	bl	80008e0 <PIN_HIGH>
 8002902:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002906:	480e      	ldr	r0, [pc, #56]	@ (8002940 <drawPixel+0x128>)
 8002908:	f7fd ffea 	bl	80008e0 <PIN_HIGH>
 800290c:	887b      	ldrh	r3, [r7, #2]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe f956 	bl	8000bc0 <write24>
 8002914:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002918:	4809      	ldr	r0, [pc, #36]	@ (8002940 <drawPixel+0x128>)
 800291a:	f7fd ffe1 	bl	80008e0 <PIN_HIGH>
 800291e:	e008      	b.n	8002932 <drawPixel+0x11a>
   WriteCmdData(_MW, color);
 8002920:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <drawPixel+0x12c>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	887a      	ldrh	r2, [r7, #2]
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe f8d8 	bl	8000ade <WriteCmdData>
 800292e:	e000      	b.n	8002932 <drawPixel+0x11a>
       return;
 8002930:	bf00      	nop
}
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bd90      	pop	{r4, r7, pc}
 8002938:	20000084 	.word	0x20000084
 800293c:	20000085 	.word	0x20000085
 8002940:	40011800 	.word	0x40011800
 8002944:	20000098 	.word	0x20000098

08002948 <setAddrWindow>:

void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b087      	sub	sp, #28
 800294c:	af02      	add	r7, sp, #8
 800294e:	4604      	mov	r4, r0
 8002950:	4608      	mov	r0, r1
 8002952:	4611      	mov	r1, r2
 8002954:	461a      	mov	r2, r3
 8002956:	4623      	mov	r3, r4
 8002958:	80fb      	strh	r3, [r7, #6]
 800295a:	4603      	mov	r3, r0
 800295c:	80bb      	strh	r3, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	807b      	strh	r3, [r7, #2]
 8002962:	4613      	mov	r3, r2
 8002964:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8002966:	4b7f      	ldr	r3, [pc, #508]	@ (8002b64 <setAddrWindow+0x21c>)
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	f249 3227 	movw	r2, #37671	@ 0x9327
 800296e:	4293      	cmp	r3, r2
 8002970:	d117      	bne.n	80029a2 <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 8002972:	4b7d      	ldr	r3, [pc, #500]	@ (8002b68 <setAddrWindow+0x220>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d107      	bne.n	800298a <setAddrWindow+0x42>
 800297a:	88bb      	ldrh	r3, [r7, #4]
 800297c:	3320      	adds	r3, #32
 800297e:	b29b      	uxth	r3, r3
 8002980:	80bb      	strh	r3, [r7, #4]
 8002982:	883b      	ldrh	r3, [r7, #0]
 8002984:	3320      	adds	r3, #32
 8002986:	b29b      	uxth	r3, r3
 8002988:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 800298a:	4b77      	ldr	r3, [pc, #476]	@ (8002b68 <setAddrWindow+0x220>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d107      	bne.n	80029a2 <setAddrWindow+0x5a>
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	3320      	adds	r3, #32
 8002996:	b29b      	uxth	r3, r3
 8002998:	80fb      	strh	r3, [r7, #6]
 800299a:	887b      	ldrh	r3, [r7, #2]
 800299c:	3320      	adds	r3, #32
 800299e:	b29b      	uxth	r3, r3
 80029a0:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 80029a2:	4b70      	ldr	r3, [pc, #448]	@ (8002b64 <setAddrWindow+0x21c>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	f241 5226 	movw	r2, #5414	@ 0x1526
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d128      	bne.n	8002a00 <setAddrWindow+0xb8>
 80029ae:	4b6e      	ldr	r3, [pc, #440]	@ (8002b68 <setAddrWindow+0x220>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d022      	beq.n	8002a00 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 80029ba:	887a      	ldrh	r2, [r7, #2]
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	81fb      	strh	r3, [r7, #14]
 80029c4:	883a      	ldrh	r2, [r7, #0]
 80029c6:	88bb      	ldrh	r3, [r7, #4]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 80029ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <setAddrWindow+0x9c>
 80029d6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3301      	adds	r3, #1
 80029de:	b29b      	uxth	r3, r3
 80029e0:	803b      	strh	r3, [r7, #0]
 80029e2:	e00d      	b.n	8002a00 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 80029e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <setAddrWindow+0xb8>
 80029ec:	887a      	ldrh	r2, [r7, #2]
 80029ee:	89bb      	ldrh	r3, [r7, #12]
 80029f0:	4413      	add	r3, r2
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	807b      	strh	r3, [r7, #2]
 80029f6:	883a      	ldrh	r2, [r7, #0]
 80029f8:	89bb      	ldrh	r3, [r7, #12]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8002a00:	4b5a      	ldr	r3, [pc, #360]	@ (8002b6c <setAddrWindow+0x224>)
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d054      	beq.n	8002ab6 <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8002a0c:	4b58      	ldr	r3, [pc, #352]	@ (8002b70 <setAddrWindow+0x228>)
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b2d8      	uxtb	r0, r3
 8002a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a16:	121b      	asrs	r3, r3, #8
 8002a18:	b21b      	sxth	r3, r3
 8002a1a:	b2d9      	uxtb	r1, r3
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a24:	121b      	asrs	r3, r3, #8
 8002a26:	b21b      	sxth	r3, r3
 8002a28:	b2dc      	uxtb	r4, r3
 8002a2a:	887b      	ldrh	r3, [r7, #2]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	4623      	mov	r3, r4
 8002a32:	f7fe fa6d 	bl	8000f10 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8002a36:	4b4f      	ldr	r3, [pc, #316]	@ (8002b74 <setAddrWindow+0x22c>)
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b2d8      	uxtb	r0, r3
 8002a3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a40:	121b      	asrs	r3, r3, #8
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	b2d9      	uxtb	r1, r3
 8002a46:	88bb      	ldrh	r3, [r7, #4]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002a4e:	121b      	asrs	r3, r3, #8
 8002a50:	b21b      	sxth	r3, r3
 8002a52:	b2dc      	uxtb	r4, r3
 8002a54:	883b      	ldrh	r3, [r7, #0]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	4623      	mov	r3, r4
 8002a5c:	f7fe fa58 	bl	8000f10 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8002a60:	4b45      	ldr	r3, [pc, #276]	@ (8002b78 <setAddrWindow+0x230>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d079      	beq.n	8002b5c <setAddrWindow+0x214>
 8002a68:	4b3e      	ldr	r3, [pc, #248]	@ (8002b64 <setAddrWindow+0x21c>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	2b65      	cmp	r3, #101	@ 0x65
 8002a6e:	d175      	bne.n	8002b5c <setAddrWindow+0x214>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8002a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a74:	121b      	asrs	r3, r3, #8
 8002a76:	b21b      	sxth	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	723b      	strb	r3, [r7, #8]
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8002a82:	4b3e      	ldr	r3, [pc, #248]	@ (8002b7c <setAddrWindow+0x234>)
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	f107 0208 	add.w	r2, r7, #8
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe f97d 	bl	8000d8c <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8002a92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a96:	121b      	asrs	r3, r3, #8
 8002a98:	b21b      	sxth	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	723b      	strb	r3, [r7, #8]
 8002a9e:	88bb      	ldrh	r3, [r7, #4]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8002aa4:	4b36      	ldr	r3, [pc, #216]	@ (8002b80 <setAddrWindow+0x238>)
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	f107 0208 	add.w	r2, r7, #8
 8002aac:	2102      	movs	r1, #2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe f96c 	bl	8000d8c <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8002ab4:	e052      	b.n	8002b5c <setAddrWindow+0x214>
       WriteCmdData(_MC, x);
 8002ab6:	4b31      	ldr	r3, [pc, #196]	@ (8002b7c <setAddrWindow+0x234>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	88fa      	ldrh	r2, [r7, #6]
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe f80d 	bl	8000ade <WriteCmdData>
       WriteCmdData(_MP, y);
 8002ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b80 <setAddrWindow+0x238>)
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	88ba      	ldrh	r2, [r7, #4]
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fe f806 	bl	8000ade <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8002ad2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ad6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d105      	bne.n	8002aea <setAddrWindow+0x1a2>
 8002ade:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002ae2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d038      	beq.n	8002b5c <setAddrWindow+0x214>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8002aea:	4b20      	ldr	r3, [pc, #128]	@ (8002b6c <setAddrWindow+0x224>)
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d016      	beq.n	8002b24 <setAddrWindow+0x1dc>
               if (rotation & 1)
 8002af6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b68 <setAddrWindow+0x220>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <setAddrWindow+0x1cc>
                   y1 = y = (y1 << 8) | y;
 8002b02:	883b      	ldrh	r3, [r7, #0]
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	b21a      	sxth	r2, r3
 8002b08:	88bb      	ldrh	r3, [r7, #4]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	80bb      	strh	r3, [r7, #4]
 8002b0e:	88bb      	ldrh	r3, [r7, #4]
 8002b10:	803b      	strh	r3, [r7, #0]
 8002b12:	e007      	b.n	8002b24 <setAddrWindow+0x1dc>
                   x1 = x = (x1 << 8) | x;
 8002b14:	887b      	ldrh	r3, [r7, #2]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	b21a      	sxth	r2, r3
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	80fb      	strh	r3, [r7, #6]
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8002b24:	4b12      	ldr	r3, [pc, #72]	@ (8002b70 <setAddrWindow+0x228>)
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	88fa      	ldrh	r2, [r7, #6]
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd ffd6 	bl	8000ade <WriteCmdData>
           WriteCmdData(_SP, y);
 8002b32:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <setAddrWindow+0x22c>)
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	88ba      	ldrh	r2, [r7, #4]
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd ffcf 	bl	8000ade <WriteCmdData>
           WriteCmdData(_EC, x1);
 8002b40:	4b10      	ldr	r3, [pc, #64]	@ (8002b84 <setAddrWindow+0x23c>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	887a      	ldrh	r2, [r7, #2]
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd ffc8 	bl	8000ade <WriteCmdData>
           WriteCmdData(_EP, y1);
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b88 <setAddrWindow+0x240>)
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	883a      	ldrh	r2, [r7, #0]
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd ffc1 	bl	8000ade <WriteCmdData>
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd90      	pop	{r4, r7, pc}
 8002b64:	2000008e 	.word	0x2000008e
 8002b68:	20000088 	.word	0x20000088
 8002b6c:	2000008c 	.word	0x2000008c
 8002b70:	2000009a 	.word	0x2000009a
 8002b74:	2000009e 	.word	0x2000009e
 8002b78:	20000083 	.word	0x20000083
 8002b7c:	20000094 	.word	0x20000094
 8002b80:	20000096 	.word	0x20000096
 8002b84:	2000009c 	.word	0x2000009c
 8002b88:	200000a0 	.word	0x200000a0

08002b8c <vertScroll>:

void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	80fb      	strh	r3, [r7, #6]
 8002b96:	460b      	mov	r3, r1
 8002b98:	80bb      	strh	r3, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8002b9e:	4b89      	ldr	r3, [pc, #548]	@ (8002dc4 <vertScroll+0x238>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	f249 3227 	movw	r2, #37671	@ 0x9327
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d10b      	bne.n	8002bc2 <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8002baa:	4b87      	ldr	r3, [pc, #540]	@ (8002dc8 <vertScroll+0x23c>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d003      	beq.n	8002bba <vertScroll+0x2e>
 8002bb2:	4b85      	ldr	r3, [pc, #532]	@ (8002dc8 <vertScroll+0x23c>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d103      	bne.n	8002bc2 <vertScroll+0x36>
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	3320      	adds	r3, #32
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	88bb      	ldrh	r3, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8002bd6:	4b7b      	ldr	r3, [pc, #492]	@ (8002dc4 <vertScroll+0x238>)
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	f249 3227 	movw	r2, #37671	@ 0x9327
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d103      	bne.n	8002bea <vertScroll+0x5e>
 8002be2:	8afb      	ldrh	r3, [r7, #22]
 8002be4:	3320      	adds	r3, #32
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8002bea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002bee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002bf2:	425b      	negs	r3, r3
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	dd05      	ble.n	8002c04 <vertScroll+0x78>
 8002bf8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002bfc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	db01      	blt.n	8002c08 <vertScroll+0x7c>
 8002c04:	2300      	movs	r3, #0
 8002c06:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8002c08:	88fa      	ldrh	r2, [r7, #6]
 8002c0a:	887b      	ldrh	r3, [r7, #2]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 8002c12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	da04      	bge.n	8002c24 <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 8002c1a:	8aba      	ldrh	r2, [r7, #20]
 8002c1c:	88bb      	ldrh	r3, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8002c24:	88fa      	ldrh	r2, [r7, #6]
 8002c26:	88bb      	ldrh	r3, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8002c32:	4b66      	ldr	r3, [pc, #408]	@ (8002dcc <vertScroll+0x240>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d071      	beq.n	8002d22 <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8002c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c42:	121b      	asrs	r3, r3, #8
 8002c44:	b21b      	sxth	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8002c50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c54:	121b      	asrs	r3, r3, #8
 8002c56:	b21b      	sxth	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8002c5c:	88bb      	ldrh	r3, [r7, #4]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 8002c62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c66:	121b      	asrs	r3, r3, #8
 8002c68:	b21b      	sxth	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 8002c6e:	8afb      	ldrh	r3, [r7, #22]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8002c74:	4b56      	ldr	r3, [pc, #344]	@ (8002dd0 <vertScroll+0x244>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <vertScroll+0xf4>
 8002c7c:	230e      	movs	r3, #14
 8002c7e:	e000      	b.n	8002c82 <vertScroll+0xf6>
 8002c80:	2333      	movs	r3, #51	@ 0x33
 8002c82:	f107 020c 	add.w	r2, r7, #12
 8002c86:	2106      	movs	r1, #6
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe f87f 	bl	8000d8c <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8002c8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c92:	121b      	asrs	r3, r3, #8
 8002c94:	b21b      	sxth	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 8002c9a:	8abb      	ldrh	r3, [r7, #20]
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8002ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8002dd0 <vertScroll+0x244>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <vertScroll+0x120>
 8002ca8:	2314      	movs	r3, #20
 8002caa:	e000      	b.n	8002cae <vertScroll+0x122>
 8002cac:	2337      	movs	r3, #55	@ 0x37
 8002cae:	f107 020c 	add.w	r2, r7, #12
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe f869 	bl	8000d8c <WriteCmdParamN>
		if (is8347) {
 8002cba:	4b45      	ldr	r3, [pc, #276]	@ (8002dd0 <vertScroll+0x244>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01f      	beq.n	8002d02 <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8002cc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d009      	beq.n	8002cde <vertScroll+0x152>
 8002cca:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc4 <vertScroll+0x238>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	f248 3247 	movw	r2, #33607	@ 0x8347
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <vertScroll+0x14e>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e002      	b.n	8002ce0 <vertScroll+0x154>
 8002cda:	2308      	movs	r3, #8
 8002cdc:	e000      	b.n	8002ce0 <vertScroll+0x154>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8002ce2:	4b38      	ldr	r3, [pc, #224]	@ (8002dc4 <vertScroll+0x238>)
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	f248 3247 	movw	r2, #33607	@ 0x8347
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <vertScroll+0x166>
 8002cee:	2318      	movs	r3, #24
 8002cf0:	e000      	b.n	8002cf4 <vertScroll+0x168>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f107 020c 	add.w	r2, r7, #12
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe f846 	bl	8000d8c <WriteCmdParamN>
 8002d00:	e05d      	b.n	8002dbe <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8002d02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d159      	bne.n	8002dbe <vertScroll+0x232>
 8002d0a:	4b30      	ldr	r3, [pc, #192]	@ (8002dcc <vertScroll+0x240>)
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d053      	beq.n	8002dbe <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8002d16:	2200      	movs	r2, #0
 8002d18:	2100      	movs	r1, #0
 8002d1a:	2013      	movs	r0, #19
 8002d1c:	f7fe f836 	bl	8000d8c <WriteCmdParamN>
 8002d20:	e04d      	b.n	8002dbe <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8002d22:	4b28      	ldr	r3, [pc, #160]	@ (8002dc4 <vertScroll+0x238>)
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d027      	beq.n	8002d7e <vertScroll+0x1f2>
 8002d2e:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8002d32:	4293      	cmp	r3, r2
 8002d34:	dc34      	bgt.n	8002da0 <vertScroll+0x214>
 8002d36:	f249 3226 	movw	r2, #37670	@ 0x9326
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <vertScroll+0x1f2>
 8002d3e:	f249 3226 	movw	r2, #37670	@ 0x9326
 8002d42:	4293      	cmp	r3, r2
 8002d44:	dc2c      	bgt.n	8002da0 <vertScroll+0x214>
 8002d46:	f247 7293 	movw	r2, #30611	@ 0x7793
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d017      	beq.n	8002d7e <vertScroll+0x1f2>
 8002d4e:	f247 7293 	movw	r2, #30611	@ 0x7793
 8002d52:	4293      	cmp	r3, r2
 8002d54:	dc24      	bgt.n	8002da0 <vertScroll+0x214>
 8002d56:	f245 4220 	movw	r2, #21536	@ 0x5420
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00f      	beq.n	8002d7e <vertScroll+0x1f2>
 8002d5e:	f247 7283 	movw	r2, #30595	@ 0x7783
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d11c      	bne.n	8002da0 <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8002d66:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd4 <vertScroll+0x248>)
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	2061      	movs	r0, #97	@ 0x61
 8002d6e:	f7fd feb6 	bl	8000ade <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8002d72:	8abb      	ldrh	r3, [r7, #20]
 8002d74:	4619      	mov	r1, r3
 8002d76:	206a      	movs	r0, #106	@ 0x6a
 8002d78:	f7fd feb1 	bl	8000ade <WriteCmdData>
        break;
 8002d7c:	e01f      	b.n	8002dbe <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8002d7e:	4b15      	ldr	r3, [pc, #84]	@ (8002dd4 <vertScroll+0x248>)
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	f043 0302 	orr.w	r3, r3, #2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4619      	mov	r1, r3
 8002d8a:	f240 4001 	movw	r0, #1025	@ 0x401
 8002d8e:	f7fd fea6 	bl	8000ade <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 8002d92:	8abb      	ldrh	r3, [r7, #20]
 8002d94:	4619      	mov	r1, r3
 8002d96:	f240 4004 	movw	r0, #1028	@ 0x404
 8002d9a:	f7fd fea0 	bl	8000ade <WriteCmdData>
        break;
 8002d9e:	e00e      	b.n	8002dbe <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8002da0:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <vertScroll+0x248>)
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	4619      	mov	r1, r3
 8002dac:	2061      	movs	r0, #97	@ 0x61
 8002dae:	f7fd fe96 	bl	8000ade <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8002db2:	8abb      	ldrh	r3, [r7, #20]
 8002db4:	4619      	mov	r1, r3
 8002db6:	206a      	movs	r0, #106	@ 0x6a
 8002db8:	f7fd fe91 	bl	8000ade <WriteCmdData>
        break;
 8002dbc:	bf00      	nop
    }
}
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	2000008e 	.word	0x2000008e
 8002dc8:	20000088 	.word	0x20000088
 8002dcc:	2000008c 	.word	0x2000008c
 8002dd0:	20000083 	.word	0x20000083
 8002dd4:	20000090 	.word	0x20000090

08002dd8 <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	4603      	mov	r3, r0
 8002de0:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8002de2:	4b08      	ldr	r3, [pc, #32]	@ (8002e04 <fillScreen+0x2c>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	b21a      	sxth	r2, r3
 8002de8:	4b07      	ldr	r3, [pc, #28]	@ (8002e08 <fillScreen+0x30>)
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	b219      	sxth	r1, r3
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	460b      	mov	r3, r1
 8002df4:	2100      	movs	r1, #0
 8002df6:	2000      	movs	r0, #0
 8002df8:	f000 f8c6 	bl	8002f88 <fillRect>
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000004 	.word	0x20000004
 8002e08:	20000006 	.word	0x20000006

08002e0c <invertDisplay>:

void invertDisplay(uint8_t i)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8002e16:	4b4d      	ldr	r3, [pc, #308]	@ (8002f4c <invertDisplay+0x140>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	bf14      	ite	ne
 8002e22:	2301      	movne	r3, #1
 8002e24:	2300      	moveq	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	b21a      	sxth	r2, r3
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	b21b      	sxth	r3, r3
 8002e2e:	4053      	eors	r3, r2
 8002e30:	b21b      	sxth	r3, r3
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	4b46      	ldr	r3, [pc, #280]	@ (8002f50 <invertDisplay+0x144>)
 8002e36:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8002e38:	4b44      	ldr	r3, [pc, #272]	@ (8002f4c <invertDisplay+0x140>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d035      	beq.n	8002eb0 <invertDisplay+0xa4>
        if (is8347) {
 8002e44:	4b43      	ldr	r3, [pc, #268]	@ (8002f54 <invertDisplay+0x148>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d024      	beq.n	8002e96 <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8002e4c:	4b42      	ldr	r3, [pc, #264]	@ (8002f58 <invertDisplay+0x14c>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	f248 3247 	movw	r2, #33607	@ 0x8347
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d005      	beq.n	8002e64 <invertDisplay+0x58>
 8002e58:	4b3f      	ldr	r3, [pc, #252]	@ (8002f58 <invertDisplay+0x14c>)
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	f245 2252 	movw	r2, #21074	@ 0x5252
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d108      	bne.n	8002e76 <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 8002e64:	4b3a      	ldr	r3, [pc, #232]	@ (8002f50 <invertDisplay+0x144>)
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <invertDisplay+0x64>
 8002e6c:	2306      	movs	r3, #6
 8002e6e:	e000      	b.n	8002e72 <invertDisplay+0x66>
 8002e70:	2302      	movs	r3, #2
 8002e72:	73fb      	strb	r3, [r7, #15]
 8002e74:	e007      	b.n	8002e86 <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 8002e76:	4b36      	ldr	r3, [pc, #216]	@ (8002f50 <invertDisplay+0x144>)
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <invertDisplay+0x76>
 8002e7e:	2308      	movs	r3, #8
 8002e80:	e000      	b.n	8002e84 <invertDisplay+0x78>
 8002e82:	230a      	movs	r3, #10
 8002e84:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 8002e86:	f107 030f 	add.w	r3, r7, #15
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f7fd ff7c 	bl	8000d8c <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8002e94:	e056      	b.n	8002f44 <invertDisplay+0x138>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8002e96:	4b2e      	ldr	r3, [pc, #184]	@ (8002f50 <invertDisplay+0x144>)
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <invertDisplay+0x96>
 8002e9e:	2321      	movs	r3, #33	@ 0x21
 8002ea0:	e000      	b.n	8002ea4 <invertDisplay+0x98>
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd ff6f 	bl	8000d8c <WriteCmdParamN>
 8002eae:	e049      	b.n	8002f44 <invertDisplay+0x138>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8002eb0:	4b29      	ldr	r3, [pc, #164]	@ (8002f58 <invertDisplay+0x14c>)
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d031      	beq.n	8002f20 <invertDisplay+0x114>
 8002ebc:	f24b 5209 	movw	r2, #46345	@ 0xb509
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	dc38      	bgt.n	8002f36 <invertDisplay+0x12a>
 8002ec4:	f249 3226 	movw	r2, #37670	@ 0x9326
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d029      	beq.n	8002f20 <invertDisplay+0x114>
 8002ecc:	f249 3226 	movw	r2, #37670	@ 0x9326
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	dc30      	bgt.n	8002f36 <invertDisplay+0x12a>
 8002ed4:	f249 2225 	movw	r2, #37413	@ 0x9225
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <invertDisplay+0xf8>
 8002edc:	f249 2225 	movw	r2, #37413	@ 0x9225
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	dc28      	bgt.n	8002f36 <invertDisplay+0x12a>
 8002ee4:	f247 7293 	movw	r2, #30611	@ 0x7793
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d019      	beq.n	8002f20 <invertDisplay+0x114>
 8002eec:	f247 7293 	movw	r2, #30611	@ 0x7793
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	dc20      	bgt.n	8002f36 <invertDisplay+0x12a>
 8002ef4:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8002ef8:	d004      	beq.n	8002f04 <invertDisplay+0xf8>
 8002efa:	f245 4220 	movw	r2, #21536	@ 0x5420
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00e      	beq.n	8002f20 <invertDisplay+0x114>
 8002f02:	e018      	b.n	8002f36 <invertDisplay+0x12a>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8002f04:	4b12      	ldr	r3, [pc, #72]	@ (8002f50 <invertDisplay+0x144>)
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b21b      	sxth	r3, r3
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	b21b      	sxth	r3, r3
 8002f0e:	f043 0313 	orr.w	r3, r3, #19
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	4619      	mov	r1, r3
 8002f18:	2007      	movs	r0, #7
 8002f1a:	f7fd fde0 	bl	8000ade <WriteCmdData>
        break;
 8002f1e:	e011      	b.n	8002f44 <invertDisplay+0x138>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8002f20:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <invertDisplay+0x144>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f240 4001 	movw	r0, #1025	@ 0x401
 8002f30:	f7fd fdd5 	bl	8000ade <WriteCmdData>
        break;
 8002f34:	e006      	b.n	8002f44 <invertDisplay+0x138>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8002f36:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <invertDisplay+0x144>)
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	2061      	movs	r0, #97	@ 0x61
 8002f3e:	f7fd fdce 	bl	8000ade <WriteCmdData>
        break;
 8002f42:	bf00      	nop
    }
}
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2000008c 	.word	0x2000008c
 8002f50:	20000090 	.word	0x20000090
 8002f54:	20000083 	.word	0x20000083
 8002f58:	2000008e 	.word	0x2000008e

08002f5c <writePixel>:
{
	fillRect(x, y, w, 1, color);
}

void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	80fb      	strh	r3, [r7, #6]
 8002f66:	460b      	mov	r3, r1
 8002f68:	80bb      	strh	r3, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fc4d 	bl	8002818 <drawPixel>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <fillRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4604      	mov	r4, r0
 8002f90:	4608      	mov	r0, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	4623      	mov	r3, r4
 8002f98:	80fb      	strh	r3, [r7, #6]
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	80bb      	strh	r3, [r7, #4]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	807b      	strh	r3, [r7, #2]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 8002fa6:	4b97      	ldr	r3, [pc, #604]	@ (8003204 <fillRect+0x27c>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <fillRect+0x32>
 8002fae:	8c3b      	ldrh	r3, [r7, #32]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd fce7 	bl	8000984 <color565_to_555>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 8002fba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	da08      	bge.n	8002fd4 <fillRect+0x4c>
        w = -w;
 8002fc2:	887b      	ldrh	r3, [r7, #2]
 8002fc4:	425b      	negs	r3, r3
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	807b      	strh	r3, [r7, #2]
        x -= w;
 8002fca:	88fa      	ldrh	r2, [r7, #6]
 8002fcc:	887b      	ldrh	r3, [r7, #2]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8002fd4:	88fa      	ldrh	r2, [r7, #6]
 8002fd6:	887b      	ldrh	r3, [r7, #2]
 8002fd8:	4413      	add	r3, r2
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 8002fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	da01      	bge.n	8002fea <fillRect+0x62>
        x = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 8002fea:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002fee:	f7fd fcb5 	bl	800095c <width>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	dd03      	ble.n	8003000 <fillRect+0x78>
        end = width();
 8002ff8:	f7fd fcb0 	bl	800095c <width>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 8003000:	89fa      	ldrh	r2, [r7, #14]
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	b29b      	uxth	r3, r3
 8003008:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 800300a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800300e:	2b00      	cmp	r3, #0
 8003010:	da08      	bge.n	8003024 <fillRect+0x9c>
        h = -h;
 8003012:	883b      	ldrh	r3, [r7, #0]
 8003014:	425b      	negs	r3, r3
 8003016:	b29b      	uxth	r3, r3
 8003018:	803b      	strh	r3, [r7, #0]
        y -= h;
 800301a:	88ba      	ldrh	r2, [r7, #4]
 800301c:	883b      	ldrh	r3, [r7, #0]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	b29b      	uxth	r3, r3
 8003022:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8003024:	88ba      	ldrh	r2, [r7, #4]
 8003026:	883b      	ldrh	r3, [r7, #0]
 8003028:	4413      	add	r3, r2
 800302a:	b29b      	uxth	r3, r3
 800302c:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 800302e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	da01      	bge.n	800303a <fillRect+0xb2>
        y = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 800303a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800303e:	f7fd fc97 	bl	8000970 <height>
 8003042:	4603      	mov	r3, r0
 8003044:	429c      	cmp	r4, r3
 8003046:	dd03      	ble.n	8003050 <fillRect+0xc8>
        end = height();
 8003048:	f7fd fc92 	bl	8000970 <height>
 800304c:	4603      	mov	r3, r0
 800304e:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 8003050:	89fa      	ldrh	r2, [r7, #14]
 8003052:	88bb      	ldrh	r3, [r7, #4]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	b29b      	uxth	r3, r3
 8003058:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 800305a:	88fa      	ldrh	r2, [r7, #6]
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	4413      	add	r3, r2
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29b      	uxth	r3, r3
 8003066:	b21c      	sxth	r4, r3
 8003068:	88ba      	ldrh	r2, [r7, #4]
 800306a:	883b      	ldrh	r3, [r7, #0]
 800306c:	4413      	add	r3, r2
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29b      	uxth	r3, r3
 8003074:	b21b      	sxth	r3, r3
 8003076:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800307a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800307e:	4622      	mov	r2, r4
 8003080:	f7ff fc62 	bl	8002948 <setAddrWindow>
    CS_ACTIVE;
 8003084:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003088:	485f      	ldr	r0, [pc, #380]	@ (8003208 <fillRect+0x280>)
 800308a:	f7fd fc19 	bl	80008c0 <PIN_LOW>
    WriteCmd(_MW);
 800308e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003092:	485d      	ldr	r0, [pc, #372]	@ (8003208 <fillRect+0x280>)
 8003094:	f7fd fc14 	bl	80008c0 <PIN_LOW>
 8003098:	4b5c      	ldr	r3, [pc, #368]	@ (800320c <fillRect+0x284>)
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	0a1b      	lsrs	r3, r3, #8
 800309e:	b29b      	uxth	r3, r3
 80030a0:	737b      	strb	r3, [r7, #13]
 80030a2:	4b5a      	ldr	r3, [pc, #360]	@ (800320c <fillRect+0x284>)
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	733b      	strb	r3, [r7, #12]
 80030a8:	4b57      	ldr	r3, [pc, #348]	@ (8003208 <fillRect+0x280>)
 80030aa:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 80030ae:	611a      	str	r2, [r3, #16]
 80030b0:	4a55      	ldr	r2, [pc, #340]	@ (8003208 <fillRect+0x280>)
 80030b2:	7b7b      	ldrb	r3, [r7, #13]
 80030b4:	6113      	str	r3, [r2, #16]
 80030b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030ba:	4853      	ldr	r0, [pc, #332]	@ (8003208 <fillRect+0x280>)
 80030bc:	f7fd fc00 	bl	80008c0 <PIN_LOW>
 80030c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030c4:	4850      	ldr	r0, [pc, #320]	@ (8003208 <fillRect+0x280>)
 80030c6:	f7fd fc0b 	bl	80008e0 <PIN_HIGH>
 80030ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030ce:	484e      	ldr	r0, [pc, #312]	@ (8003208 <fillRect+0x280>)
 80030d0:	f7fd fc06 	bl	80008e0 <PIN_HIGH>
 80030d4:	4b4c      	ldr	r3, [pc, #304]	@ (8003208 <fillRect+0x280>)
 80030d6:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 80030da:	611a      	str	r2, [r3, #16]
 80030dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003208 <fillRect+0x280>)
 80030de:	7b3b      	ldrb	r3, [r7, #12]
 80030e0:	6113      	str	r3, [r2, #16]
 80030e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030e6:	4848      	ldr	r0, [pc, #288]	@ (8003208 <fillRect+0x280>)
 80030e8:	f7fd fbea 	bl	80008c0 <PIN_LOW>
 80030ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030f0:	4845      	ldr	r0, [pc, #276]	@ (8003208 <fillRect+0x280>)
 80030f2:	f7fd fbf5 	bl	80008e0 <PIN_HIGH>
 80030f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030fa:	4843      	ldr	r0, [pc, #268]	@ (8003208 <fillRect+0x280>)
 80030fc:	f7fd fbf0 	bl	80008e0 <PIN_HIGH>
 8003100:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003104:	4840      	ldr	r0, [pc, #256]	@ (8003208 <fillRect+0x280>)
 8003106:	f7fd fbeb 	bl	80008e0 <PIN_HIGH>
    if (h > w) {
 800310a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800310e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003112:	429a      	cmp	r2, r3
 8003114:	dd05      	ble.n	8003122 <fillRect+0x19a>
        end = h;
 8003116:	883b      	ldrh	r3, [r7, #0]
 8003118:	81fb      	strh	r3, [r7, #14]
        h = w;
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	803b      	strh	r3, [r7, #0]
        w = end;
 800311e:	89fb      	ldrh	r3, [r7, #14]
 8003120:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8003122:	8c3b      	ldrh	r3, [r7, #32]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	b29b      	uxth	r3, r3
 8003128:	72fb      	strb	r3, [r7, #11]
 800312a:	8c3b      	ldrh	r3, [r7, #32]
 800312c:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 800312e:	e035      	b.n	800319c <fillRect+0x214>
        end = w;
 8003130:	887b      	ldrh	r3, [r7, #2]
 8003132:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8003134:	4b34      	ldr	r3, [pc, #208]	@ (8003208 <fillRect+0x280>)
 8003136:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 800313a:	611a      	str	r2, [r3, #16]
 800313c:	4a32      	ldr	r2, [pc, #200]	@ (8003208 <fillRect+0x280>)
 800313e:	7afb      	ldrb	r3, [r7, #11]
 8003140:	6113      	str	r3, [r2, #16]
 8003142:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003146:	4830      	ldr	r0, [pc, #192]	@ (8003208 <fillRect+0x280>)
 8003148:	f7fd fbba 	bl	80008c0 <PIN_LOW>
 800314c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003150:	482d      	ldr	r0, [pc, #180]	@ (8003208 <fillRect+0x280>)
 8003152:	f7fd fbc5 	bl	80008e0 <PIN_HIGH>
 8003156:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800315a:	482b      	ldr	r0, [pc, #172]	@ (8003208 <fillRect+0x280>)
 800315c:	f7fd fbc0 	bl	80008e0 <PIN_HIGH>
            write8(lo);
 8003160:	4b29      	ldr	r3, [pc, #164]	@ (8003208 <fillRect+0x280>)
 8003162:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8003166:	611a      	str	r2, [r3, #16]
 8003168:	4a27      	ldr	r2, [pc, #156]	@ (8003208 <fillRect+0x280>)
 800316a:	7abb      	ldrb	r3, [r7, #10]
 800316c:	6113      	str	r3, [r2, #16]
 800316e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003172:	4825      	ldr	r0, [pc, #148]	@ (8003208 <fillRect+0x280>)
 8003174:	f7fd fba4 	bl	80008c0 <PIN_LOW>
 8003178:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800317c:	4822      	ldr	r0, [pc, #136]	@ (8003208 <fillRect+0x280>)
 800317e:	f7fd fbaf 	bl	80008e0 <PIN_HIGH>
 8003182:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003186:	4820      	ldr	r0, [pc, #128]	@ (8003208 <fillRect+0x280>)
 8003188:	f7fd fbaa 	bl	80008e0 <PIN_HIGH>
        } while (--end != 0);
 800318c:	89fb      	ldrh	r3, [r7, #14]
 800318e:	3b01      	subs	r3, #1
 8003190:	b29b      	uxth	r3, r3
 8003192:	81fb      	strh	r3, [r7, #14]
 8003194:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1cb      	bne.n	8003134 <fillRect+0x1ac>
    while (h-- > 0) {
 800319c:	f9b7 3000 	ldrsh.w	r3, [r7]
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	3a01      	subs	r2, #1
 80031a4:	b292      	uxth	r2, r2
 80031a6:	803a      	strh	r2, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	dcc1      	bgt.n	8003130 <fillRect+0x1a8>
#endif
    }
    CS_IDLE;
 80031ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80031b0:	4815      	ldr	r0, [pc, #84]	@ (8003208 <fillRect+0x280>)
 80031b2:	f7fd fb95 	bl	80008e0 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 80031b6:	4b16      	ldr	r3, [pc, #88]	@ (8003210 <fillRect+0x288>)
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <fillRect+0x252>
 80031c2:	4b14      	ldr	r3, [pc, #80]	@ (8003214 <fillRect+0x28c>)
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	f241 5226 	movw	r2, #5414	@ 0x1526
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d116      	bne.n	80031fc <fillRect+0x274>
 80031ce:	4b12      	ldr	r3, [pc, #72]	@ (8003218 <fillRect+0x290>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d010      	beq.n	80031fc <fillRect+0x274>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80031da:	f7fd fbbf 	bl	800095c <width>
 80031de:	4603      	mov	r3, r0
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	b21c      	sxth	r4, r3
 80031e6:	f7fd fbc3 	bl	8000970 <height>
 80031ea:	4603      	mov	r3, r0
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	b21b      	sxth	r3, r3
 80031f2:	4622      	mov	r2, r4
 80031f4:	2100      	movs	r1, #0
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7ff fba6 	bl	8002948 <setAddrWindow>
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	bd90      	pop	{r4, r7, pc}
 8003204:	20000084 	.word	0x20000084
 8003208:	40011800 	.word	0x40011800
 800320c:	20000098 	.word	0x20000098
 8003210:	2000008c 	.word	0x2000008c
 8003214:	2000008e 	.word	0x2000008e
 8003218:	20000088 	.word	0x20000088

0800321c <drawChar>:
}



void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 800321c:	b590      	push	{r4, r7, lr}
 800321e:	b08b      	sub	sp, #44	@ 0x2c
 8003220:	af02      	add	r7, sp, #8
 8003222:	4604      	mov	r4, r0
 8003224:	4608      	mov	r0, r1
 8003226:	4611      	mov	r1, r2
 8003228:	461a      	mov	r2, r3
 800322a:	4623      	mov	r3, r4
 800322c:	80fb      	strh	r3, [r7, #6]
 800322e:	4603      	mov	r3, r0
 8003230:	80bb      	strh	r3, [r7, #4]
 8003232:	460b      	mov	r3, r1
 8003234:	70fb      	strb	r3, [r7, #3]
 8003236:	4613      	mov	r3, r2
 8003238:	803b      	strh	r3, [r7, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 800323a:	4b57      	ldr	r3, [pc, #348]	@ (8003398 <drawChar+0x17c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3308      	adds	r3, #8
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	70fb      	strb	r3, [r7, #3]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4a52      	ldr	r2, [pc, #328]	@ (8003398 <drawChar+0x17c>)
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	3204      	adds	r2, #4
 8003252:	8812      	ldrh	r2, [r2, #0]
 8003254:	4413      	add	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 8003258:	4b4f      	ldr	r3, [pc, #316]	@ (8003398 <drawChar+0x17c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	83fb      	strh	r3, [r7, #30]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	3302      	adds	r3, #2
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	72fb      	strb	r3, [r7, #11]
                 h  = pgm_read_byte(&glyph->height);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	3303      	adds	r3, #3
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	72bb      	strb	r3, [r7, #10]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	3305      	adds	r3, #5
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	727b      	strb	r3, [r7, #9]
                 yo = pgm_read_byte(&glyph->yOffset);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	3306      	adds	r3, #6
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	723b      	strb	r3, [r7, #8]
        uint8_t  xx, yy, bits = 0, bit = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	76fb      	strb	r3, [r7, #27]
 800328a:	2300      	movs	r3, #0
 800328c:	76bb      	strb	r3, [r7, #26]
        int16_t  xo16 = 0, yo16 = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	833b      	strh	r3, [r7, #24]
 8003292:	2300      	movs	r3, #0
 8003294:	82fb      	strh	r3, [r7, #22]

        if(size > 1) {
 8003296:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800329a:	2b01      	cmp	r3, #1
 800329c:	d905      	bls.n	80032aa <drawChar+0x8e>
            xo16 = xo;
 800329e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80032a2:	833b      	strh	r3, [r7, #24]
            yo16 = yo;
 80032a4:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80032a8:	82fb      	strh	r3, [r7, #22]
        }

        for(yy=0; yy<h; yy++) {
 80032aa:	2300      	movs	r3, #0
 80032ac:	773b      	strb	r3, [r7, #28]
 80032ae:	e06a      	b.n	8003386 <drawChar+0x16a>
            for(xx=0; xx<w; xx++) {
 80032b0:	2300      	movs	r3, #0
 80032b2:	777b      	strb	r3, [r7, #29]
 80032b4:	e060      	b.n	8003378 <drawChar+0x15c>
                if(!(bit++ & 7)) {
 80032b6:	7ebb      	ldrb	r3, [r7, #26]
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	76ba      	strb	r2, [r7, #26]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d107      	bne.n	80032d4 <drawChar+0xb8>
                    bits = pgm_read_byte(&bitmap[bo++]);
 80032c4:	8bfb      	ldrh	r3, [r7, #30]
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	83fa      	strh	r2, [r7, #30]
 80032ca:	461a      	mov	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	76fb      	strb	r3, [r7, #27]
                }
                if(bits & 0x80) {
 80032d4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	da47      	bge.n	800336c <drawChar+0x150>
                    if(size == 1) {
 80032dc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d11a      	bne.n	800331a <drawChar+0xfe>
                        writePixel(x+xo+xx, y+yo+yy, color);
 80032e4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	4413      	add	r3, r2
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	7f7b      	ldrb	r3, [r7, #29]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	4413      	add	r3, r2
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	b218      	sxth	r0, r3
 80032fa:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80032fe:	b29a      	uxth	r2, r3
 8003300:	88bb      	ldrh	r3, [r7, #4]
 8003302:	4413      	add	r3, r2
 8003304:	b29a      	uxth	r2, r3
 8003306:	7f3b      	ldrb	r3, [r7, #28]
 8003308:	b29b      	uxth	r3, r3
 800330a:	4413      	add	r3, r2
 800330c:	b29b      	uxth	r3, r3
 800330e:	b21b      	sxth	r3, r3
 8003310:	883a      	ldrh	r2, [r7, #0]
 8003312:	4619      	mov	r1, r3
 8003314:	f7ff fe22 	bl	8002f5c <writePixel>
 8003318:	e028      	b.n	800336c <drawChar+0x150>
                    } else {
                        fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 800331a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800331e:	7f7b      	ldrb	r3, [r7, #29]
 8003320:	4413      	add	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8003328:	b292      	uxth	r2, r2
 800332a:	fb02 f303 	mul.w	r3, r2, r3
 800332e:	b29a      	uxth	r2, r3
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	4413      	add	r3, r2
 8003334:	b29b      	uxth	r3, r3
 8003336:	b218      	sxth	r0, r3
 8003338:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800333c:	7f3b      	ldrb	r3, [r7, #28]
 800333e:	4413      	add	r3, r2
 8003340:	b29b      	uxth	r3, r3
 8003342:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8003346:	b292      	uxth	r2, r2
 8003348:	fb02 f303 	mul.w	r3, r2, r3
 800334c:	b29a      	uxth	r2, r3
 800334e:	88bb      	ldrh	r3, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	b29b      	uxth	r3, r3
 8003354:	b219      	sxth	r1, r3
 8003356:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800335a:	b21a      	sxth	r2, r3
 800335c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003360:	b21c      	sxth	r4, r3
 8003362:	883b      	ldrh	r3, [r7, #0]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	4623      	mov	r3, r4
 8003368:	f7ff fe0e 	bl	8002f88 <fillRect>
                          size, size, color);
                    }
                }
                bits <<= 1;
 800336c:	7efb      	ldrb	r3, [r7, #27]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	76fb      	strb	r3, [r7, #27]
            for(xx=0; xx<w; xx++) {
 8003372:	7f7b      	ldrb	r3, [r7, #29]
 8003374:	3301      	adds	r3, #1
 8003376:	777b      	strb	r3, [r7, #29]
 8003378:	7f7a      	ldrb	r2, [r7, #29]
 800337a:	7afb      	ldrb	r3, [r7, #11]
 800337c:	429a      	cmp	r2, r3
 800337e:	d39a      	bcc.n	80032b6 <drawChar+0x9a>
        for(yy=0; yy<h; yy++) {
 8003380:	7f3b      	ldrb	r3, [r7, #28]
 8003382:	3301      	adds	r3, #1
 8003384:	773b      	strb	r3, [r7, #28]
 8003386:	7f3a      	ldrb	r2, [r7, #28]
 8003388:	7abb      	ldrb	r3, [r7, #10]
 800338a:	429a      	cmp	r2, r3
 800338c:	d390      	bcc.n	80032b0 <drawChar+0x94>
            }
        }

    } // End classic vs custom font
}
 800338e:	bf00      	nop
 8003390:	bf00      	nop
 8003392:	3724      	adds	r7, #36	@ 0x24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd90      	pop	{r4, r7, pc}
 8003398:	20000034 	.word	0x20000034

0800339c <write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t write(uint8_t c)
{
 800339c:	b5b0      	push	{r4, r5, r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
	{

        if(c == '\n') {
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	2b0a      	cmp	r3, #10
 80033aa:	d112      	bne.n	80033d2 <write+0x36>
            cursor_x  = 0;
 80033ac:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <write+0x130>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80033b2:	4b47      	ldr	r3, [pc, #284]	@ (80034d0 <write+0x134>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	330a      	adds	r3, #10
 80033b8:	781b      	ldrb	r3, [r3, #0]
            cursor_y += (int16_t)textsize *
 80033ba:	4a46      	ldr	r2, [pc, #280]	@ (80034d4 <write+0x138>)
 80033bc:	7812      	ldrb	r2, [r2, #0]
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	4b44      	ldr	r3, [pc, #272]	@ (80034d8 <write+0x13c>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	4413      	add	r3, r2
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	4b42      	ldr	r3, [pc, #264]	@ (80034d8 <write+0x13c>)
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e077      	b.n	80034c2 <write+0x126>
        } else if(c != '\r') {
 80033d2:	79fb      	ldrb	r3, [r7, #7]
 80033d4:	2b0d      	cmp	r3, #13
 80033d6:	d074      	beq.n	80034c2 <write+0x126>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 80033d8:	4b3d      	ldr	r3, [pc, #244]	@ (80034d0 <write+0x134>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3308      	adds	r3, #8
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	75fb      	strb	r3, [r7, #23]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80033e2:	79fa      	ldrb	r2, [r7, #7]
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d36b      	bcc.n	80034c2 <write+0x126>
 80033ea:	4b39      	ldr	r3, [pc, #228]	@ (80034d0 <write+0x134>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3309      	adds	r3, #9
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	79fa      	ldrb	r2, [r7, #7]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d864      	bhi.n	80034c2 <write+0x126>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
 80033f8:	79fa      	ldrb	r2, [r7, #7]
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	00db      	lsls	r3, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8003400:	4a33      	ldr	r2, [pc, #204]	@ (80034d0 <write+0x134>)
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	3204      	adds	r2, #4
 8003406:	8812      	ldrh	r2, [r2, #0]
                  &gfxFont->glyph))[c - first]);
 8003408:	4413      	add	r3, r2
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 800340a:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	3302      	adds	r3, #2
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	73fb      	strb	r3, [r7, #15]
                          h     = pgm_read_byte(&glyph->height);
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	3303      	adds	r3, #3
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	73bb      	strb	r3, [r7, #14]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d041      	beq.n	80034a6 <write+0x10a>
 8003422:	7bbb      	ldrb	r3, [r7, #14]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d03e      	beq.n	80034a6 <write+0x10a>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	3305      	adds	r3, #5
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	b25b      	sxtb	r3, r3
 8003430:	81bb      	strh	r3, [r7, #12]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 8003432:	4b2a      	ldr	r3, [pc, #168]	@ (80034dc <write+0x140>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d022      	beq.n	8003480 <write+0xe4>
 800343a:	4b24      	ldr	r3, [pc, #144]	@ (80034cc <write+0x130>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	4619      	mov	r1, r3
 8003440:	4b24      	ldr	r3, [pc, #144]	@ (80034d4 <write+0x138>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	4413      	add	r3, r2
 800344e:	fb00 f303 	mul.w	r3, r0, r3
 8003452:	440b      	add	r3, r1
 8003454:	4a22      	ldr	r2, [pc, #136]	@ (80034e0 <write+0x144>)
 8003456:	8812      	ldrh	r2, [r2, #0]
 8003458:	4293      	cmp	r3, r2
 800345a:	dd11      	ble.n	8003480 <write+0xe4>
                        cursor_x  = 0;
 800345c:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <write+0x130>)
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8003462:	4b1b      	ldr	r3, [pc, #108]	@ (80034d0 <write+0x134>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	330a      	adds	r3, #10
 8003468:	781b      	ldrb	r3, [r3, #0]
                        cursor_y += (int16_t)textsize *
 800346a:	4a1a      	ldr	r2, [pc, #104]	@ (80034d4 <write+0x138>)
 800346c:	7812      	ldrb	r2, [r2, #0]
 800346e:	fb02 f303 	mul.w	r3, r2, r3
 8003472:	b2da      	uxtb	r2, r3
 8003474:	4b18      	ldr	r3, [pc, #96]	@ (80034d8 <write+0x13c>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	4413      	add	r3, r2
 800347a:	b2da      	uxtb	r2, r3
 800347c:	4b16      	ldr	r3, [pc, #88]	@ (80034d8 <write+0x13c>)
 800347e:	701a      	strb	r2, [r3, #0]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8003480:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <write+0x130>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	b218      	sxth	r0, r3
 8003486:	4b14      	ldr	r3, [pc, #80]	@ (80034d8 <write+0x13c>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	b219      	sxth	r1, r3
 800348c:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <write+0x148>)
 800348e:	881d      	ldrh	r5, [r3, #0]
 8003490:	4b15      	ldr	r3, [pc, #84]	@ (80034e8 <write+0x14c>)
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	4a0f      	ldr	r2, [pc, #60]	@ (80034d4 <write+0x138>)
 8003496:	7812      	ldrb	r2, [r2, #0]
 8003498:	79fc      	ldrb	r4, [r7, #7]
 800349a:	9201      	str	r2, [sp, #4]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	462b      	mov	r3, r5
 80034a0:	4622      	mov	r2, r4
 80034a2:	f7ff febb 	bl	800321c <drawChar>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	3304      	adds	r3, #4
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	4a09      	ldr	r2, [pc, #36]	@ (80034d4 <write+0x138>)
 80034ae:	7812      	ldrb	r2, [r2, #0]
 80034b0:	fb02 f303 	mul.w	r3, r2, r3
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <write+0x130>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	4413      	add	r3, r2
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4b03      	ldr	r3, [pc, #12]	@ (80034cc <write+0x130>)
 80034c0:	701a      	strb	r2, [r3, #0]
            }
        }

    }
    return 1;
 80034c2:	2301      	movs	r3, #1
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bdb0      	pop	{r4, r5, r7, pc}
 80034cc:	20000087 	.word	0x20000087
 80034d0:	20000034 	.word	0x20000034
 80034d4:	20000008 	.word	0x20000008
 80034d8:	20000086 	.word	0x20000086
 80034dc:	2000000e 	.word	0x2000000e
 80034e0:	20000004 	.word	0x20000004
 80034e4:	2000000a 	.word	0x2000000a
 80034e8:	2000000c 	.word	0x2000000c

080034ec <setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void setFont(const GFXfont *f) {
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
    if(f) {            // Font struct pointer passed in?
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <setFont+0x24>
        if(!gfxFont) { // And no current font struct?
 80034fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003534 <setFont+0x48>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d110      	bne.n	8003524 <setFont+0x38>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 8003502:	4b0d      	ldr	r3, [pc, #52]	@ (8003538 <setFont+0x4c>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	3306      	adds	r3, #6
 8003508:	b2da      	uxtb	r2, r3
 800350a:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <setFont+0x4c>)
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e009      	b.n	8003524 <setFont+0x38>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 8003510:	4b08      	ldr	r3, [pc, #32]	@ (8003534 <setFont+0x48>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <setFont+0x38>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 8003518:	4b07      	ldr	r3, [pc, #28]	@ (8003538 <setFont+0x4c>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	3b06      	subs	r3, #6
 800351e:	b2da      	uxtb	r2, r3
 8003520:	4b05      	ldr	r3, [pc, #20]	@ (8003538 <setFont+0x4c>)
 8003522:	701a      	strb	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 8003524:	4a03      	ldr	r2, [pc, #12]	@ (8003534 <setFont+0x48>)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6013      	str	r3, [r2, #0]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr
 8003534:	20000034 	.word	0x20000034
 8003538:	20000086 	.word	0x20000086

0800353c <printnewtstr>:
    }
}


void printnewtstr (int row, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	461a      	mov	r2, r3
 8003548:	460b      	mov	r3, r1
 800354a:	817b      	strh	r3, [r7, #10]
 800354c:	4613      	mov	r3, r2
 800354e:	727b      	strb	r3, [r7, #9]
	setFont(f);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ffcb 	bl	80034ec <setFont>
	textcolor = txtcolor;
 8003556:	4a11      	ldr	r2, [pc, #68]	@ (800359c <printnewtstr+0x60>)
 8003558:	897b      	ldrh	r3, [r7, #10]
 800355a:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 800355c:	7a7b      	ldrb	r3, [r7, #9]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <printnewtstr+0x2a>
 8003562:	7a7b      	ldrb	r3, [r7, #9]
 8003564:	e000      	b.n	8003568 <printnewtstr+0x2c>
 8003566:	2301      	movs	r3, #1
 8003568:	4a0d      	ldr	r2, [pc, #52]	@ (80035a0 <printnewtstr+0x64>)
 800356a:	7013      	strb	r3, [r2, #0]
	setCursor(0, row);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	b21b      	sxth	r3, r3
 8003570:	4619      	mov	r1, r3
 8003572:	2000      	movs	r0, #0
 8003574:	f000 f816 	bl	80035a4 <setCursor>
	while (*str) write (*str++);
 8003578:	e006      	b.n	8003588 <printnewtstr+0x4c>
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	61ba      	str	r2, [r7, #24]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff ff0a 	bl	800339c <write>
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f4      	bne.n	800357a <printnewtstr+0x3e>
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	2000000a 	.word	0x2000000a
 80035a0:	20000008 	.word	0x20000008

080035a4 <setCursor>:
void setTextSize (uint8_t size)
{
	textsize = size;
}

void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	460a      	mov	r2, r1
 80035ae:	80fb      	strh	r3, [r7, #6]
 80035b0:	4613      	mov	r3, r2
 80035b2:	80bb      	strh	r3, [r7, #4]
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <setCursor+0x2c>)
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	88bb      	ldrh	r3, [r7, #4]
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	4b04      	ldr	r3, [pc, #16]	@ (80035d4 <setCursor+0x30>)
 80035c2:	701a      	strb	r2, [r3, #0]
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20000087 	.word	0x20000087
 80035d4:	20000086 	.word	0x20000086

080035d8 <getRotation>:

uint8_t getRotation (void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
	return rotation;
 80035dc:	4b02      	ldr	r3, [pc, #8]	@ (80035e8 <getRotation+0x10>)
 80035de:	781b      	ldrb	r3, [r3, #0]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	20000088 	.word	0x20000088

080035ec <scrollup>:

void scrollup (uint16_t speed)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	80fb      	strh	r3, [r7, #6]
     uint16_t maxscroll;
     if (getRotation() & 1) maxscroll = width();
 80035f6:	f7ff ffef 	bl	80035d8 <getRotation>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d004      	beq.n	800360e <scrollup+0x22>
 8003604:	f7fd f9aa 	bl	800095c <width>
 8003608:	4603      	mov	r3, r0
 800360a:	81fb      	strh	r3, [r7, #14]
 800360c:	e003      	b.n	8003616 <scrollup+0x2a>
     else maxscroll = height();
 800360e:	f7fd f9af 	bl	8000970 <height>
 8003612:	4603      	mov	r3, r0
 8003614:	81fb      	strh	r3, [r7, #14]
     for (uint16_t i = 1; i <= maxscroll; i++)
 8003616:	2301      	movs	r3, #1
 8003618:	81bb      	strh	r3, [r7, #12]
 800361a:	e01b      	b.n	8003654 <scrollup+0x68>
     {
          vertScroll(0, maxscroll, i);
 800361c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003620:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003624:	4619      	mov	r1, r3
 8003626:	2000      	movs	r0, #0
 8003628:	f7ff fab0 	bl	8002b8c <vertScroll>
         if (speed < 655) delay(speed*100);
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	f240 228e 	movw	r2, #654	@ 0x28e
 8003632:	4293      	cmp	r3, r2
 8003634:	d807      	bhi.n	8003646 <scrollup+0x5a>
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	2264      	movs	r2, #100	@ 0x64
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	4618      	mov	r0, r3
 8003640:	f7fd f926 	bl	8000890 <delay>
 8003644:	e003      	b.n	800364e <scrollup+0x62>
         else HAL_Delay(speed);
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	4618      	mov	r0, r3
 800364a:	f000 f895 	bl	8003778 <HAL_Delay>
     for (uint16_t i = 1; i <= maxscroll; i++)
 800364e:	89bb      	ldrh	r3, [r7, #12]
 8003650:	3301      	adds	r3, #1
 8003652:	81bb      	strh	r3, [r7, #12]
 8003654:	89ba      	ldrh	r2, [r7, #12]
 8003656:	89fb      	ldrh	r3, [r7, #14]
 8003658:	429a      	cmp	r2, r3
 800365a:	d9df      	bls.n	800361c <scrollup+0x30>
     }

}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003668:	f7fd f90c 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800366c:	480b      	ldr	r0, [pc, #44]	@ (800369c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800366e:	490c      	ldr	r1, [pc, #48]	@ (80036a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003670:	4a0c      	ldr	r2, [pc, #48]	@ (80036a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003674:	e002      	b.n	800367c <LoopCopyDataInit>

08003676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800367a:	3304      	adds	r3, #4

0800367c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800367c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800367e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003680:	d3f9      	bcc.n	8003676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003682:	4a09      	ldr	r2, [pc, #36]	@ (80036a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003684:	4c09      	ldr	r4, [pc, #36]	@ (80036ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003688:	e001      	b.n	800368e <LoopFillZerobss>

0800368a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800368a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800368c:	3204      	adds	r2, #4

0800368e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800368e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003690:	d3fb      	bcc.n	800368a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8003692:	f001 fb0d 	bl	8004cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003696:	f7fc ff5f 	bl	8000558 <main>
  bx lr
 800369a:	4770      	bx	lr
  ldr r0, =_sdata
 800369c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036a0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80036a4:	08005ca8 	.word	0x08005ca8
  ldr r2, =_sbss
 80036a8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80036ac:	200000a8 	.word	0x200000a8

080036b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036b0:	e7fe      	b.n	80036b0 <ADC1_2_IRQHandler>
	...

080036b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036b8:	4b08      	ldr	r3, [pc, #32]	@ (80036dc <HAL_Init+0x28>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a07      	ldr	r2, [pc, #28]	@ (80036dc <HAL_Init+0x28>)
 80036be:	f043 0310 	orr.w	r3, r3, #16
 80036c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036c4:	2003      	movs	r0, #3
 80036c6:	f000 f92b 	bl	8003920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ca:	200f      	movs	r0, #15
 80036cc:	f000 f808 	bl	80036e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036d0:	f7fd f85c 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40022000 	.word	0x40022000

080036e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036e8:	4b12      	ldr	r3, [pc, #72]	@ (8003734 <HAL_InitTick+0x54>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b12      	ldr	r3, [pc, #72]	@ (8003738 <HAL_InitTick+0x58>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	4619      	mov	r1, r3
 80036f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 f935 	bl	800396e <HAL_SYSTICK_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e00e      	b.n	800372c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b0f      	cmp	r3, #15
 8003712:	d80a      	bhi.n	800372a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003714:	2200      	movs	r2, #0
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	f04f 30ff 	mov.w	r0, #4294967295
 800371c:	f000 f90b 	bl	8003936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003720:	4a06      	ldr	r2, [pc, #24]	@ (800373c <HAL_InitTick+0x5c>)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e000      	b.n	800372c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000000 	.word	0x20000000
 8003738:	20000014 	.word	0x20000014
 800373c:	20000010 	.word	0x20000010

08003740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <HAL_IncTick+0x1c>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	4b05      	ldr	r3, [pc, #20]	@ (8003760 <HAL_IncTick+0x20>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4413      	add	r3, r2
 8003750:	4a03      	ldr	r2, [pc, #12]	@ (8003760 <HAL_IncTick+0x20>)
 8003752:	6013      	str	r3, [r2, #0]
}
 8003754:	bf00      	nop
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	20000014 	.word	0x20000014
 8003760:	200000a4 	.word	0x200000a4

08003764 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return uwTick;
 8003768:	4b02      	ldr	r3, [pc, #8]	@ (8003774 <HAL_GetTick+0x10>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	200000a4 	.word	0x200000a4

08003778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003780:	f7ff fff0 	bl	8003764 <HAL_GetTick>
 8003784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d005      	beq.n	800379e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003792:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <HAL_Delay+0x44>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800379e:	bf00      	nop
 80037a0:	f7ff ffe0 	bl	8003764 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d8f7      	bhi.n	80037a0 <HAL_Delay+0x28>
  {
  }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000014 	.word	0x20000014

080037c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f2:	4a04      	ldr	r2, [pc, #16]	@ (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	60d3      	str	r3, [r2, #12]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800380c:	4b04      	ldr	r3, [pc, #16]	@ (8003820 <__NVIC_GetPriorityGrouping+0x18>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 0307 	and.w	r3, r3, #7
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	6039      	str	r1, [r7, #0]
 800382e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003834:	2b00      	cmp	r3, #0
 8003836:	db0a      	blt.n	800384e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	b2da      	uxtb	r2, r3
 800383c:	490c      	ldr	r1, [pc, #48]	@ (8003870 <__NVIC_SetPriority+0x4c>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	0112      	lsls	r2, r2, #4
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	440b      	add	r3, r1
 8003848:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800384c:	e00a      	b.n	8003864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	4908      	ldr	r1, [pc, #32]	@ (8003874 <__NVIC_SetPriority+0x50>)
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	3b04      	subs	r3, #4
 800385c:	0112      	lsls	r2, r2, #4
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	440b      	add	r3, r1
 8003862:	761a      	strb	r2, [r3, #24]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000e100 	.word	0xe000e100
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003878:	b480      	push	{r7}
 800387a:	b089      	sub	sp, #36	@ 0x24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f1c3 0307 	rsb	r3, r3, #7
 8003892:	2b04      	cmp	r3, #4
 8003894:	bf28      	it	cs
 8003896:	2304      	movcs	r3, #4
 8003898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3304      	adds	r3, #4
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d902      	bls.n	80038a8 <NVIC_EncodePriority+0x30>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3b03      	subs	r3, #3
 80038a6:	e000      	b.n	80038aa <NVIC_EncodePriority+0x32>
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ac:	f04f 32ff 	mov.w	r2, #4294967295
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43da      	mvns	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	401a      	ands	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038c0:	f04f 31ff 	mov.w	r1, #4294967295
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	43d9      	mvns	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	4313      	orrs	r3, r2
         );
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3724      	adds	r7, #36	@ 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038ec:	d301      	bcc.n	80038f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00f      	b.n	8003912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038f2:	4a0a      	ldr	r2, [pc, #40]	@ (800391c <SysTick_Config+0x40>)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038fa:	210f      	movs	r1, #15
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	f7ff ff90 	bl	8003824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003904:	4b05      	ldr	r3, [pc, #20]	@ (800391c <SysTick_Config+0x40>)
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800390a:	4b04      	ldr	r3, [pc, #16]	@ (800391c <SysTick_Config+0x40>)
 800390c:	2207      	movs	r2, #7
 800390e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	e000e010 	.word	0xe000e010

08003920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff49 	bl	80037c0 <__NVIC_SetPriorityGrouping>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	4603      	mov	r3, r0
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003948:	f7ff ff5e 	bl	8003808 <__NVIC_GetPriorityGrouping>
 800394c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	6978      	ldr	r0, [r7, #20]
 8003954:	f7ff ff90 	bl	8003878 <NVIC_EncodePriority>
 8003958:	4602      	mov	r2, r0
 800395a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff5f 	bl	8003824 <__NVIC_SetPriority>
}
 8003966:	bf00      	nop
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ffb0 	bl	80038dc <SysTick_Config>
 800397c:	4603      	mov	r3, r0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003988:	b480      	push	{r7}
 800398a:	b08b      	sub	sp, #44	@ 0x2c
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003996:	2300      	movs	r3, #0
 8003998:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800399a:	e169      	b.n	8003c70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800399c:	2201      	movs	r2, #1
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	f040 8158 	bne.w	8003c6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4a9a      	ldr	r2, [pc, #616]	@ (8003c28 <HAL_GPIO_Init+0x2a0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d05e      	beq.n	8003a82 <HAL_GPIO_Init+0xfa>
 80039c4:	4a98      	ldr	r2, [pc, #608]	@ (8003c28 <HAL_GPIO_Init+0x2a0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d875      	bhi.n	8003ab6 <HAL_GPIO_Init+0x12e>
 80039ca:	4a98      	ldr	r2, [pc, #608]	@ (8003c2c <HAL_GPIO_Init+0x2a4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d058      	beq.n	8003a82 <HAL_GPIO_Init+0xfa>
 80039d0:	4a96      	ldr	r2, [pc, #600]	@ (8003c2c <HAL_GPIO_Init+0x2a4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d86f      	bhi.n	8003ab6 <HAL_GPIO_Init+0x12e>
 80039d6:	4a96      	ldr	r2, [pc, #600]	@ (8003c30 <HAL_GPIO_Init+0x2a8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d052      	beq.n	8003a82 <HAL_GPIO_Init+0xfa>
 80039dc:	4a94      	ldr	r2, [pc, #592]	@ (8003c30 <HAL_GPIO_Init+0x2a8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d869      	bhi.n	8003ab6 <HAL_GPIO_Init+0x12e>
 80039e2:	4a94      	ldr	r2, [pc, #592]	@ (8003c34 <HAL_GPIO_Init+0x2ac>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d04c      	beq.n	8003a82 <HAL_GPIO_Init+0xfa>
 80039e8:	4a92      	ldr	r2, [pc, #584]	@ (8003c34 <HAL_GPIO_Init+0x2ac>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d863      	bhi.n	8003ab6 <HAL_GPIO_Init+0x12e>
 80039ee:	4a92      	ldr	r2, [pc, #584]	@ (8003c38 <HAL_GPIO_Init+0x2b0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d046      	beq.n	8003a82 <HAL_GPIO_Init+0xfa>
 80039f4:	4a90      	ldr	r2, [pc, #576]	@ (8003c38 <HAL_GPIO_Init+0x2b0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d85d      	bhi.n	8003ab6 <HAL_GPIO_Init+0x12e>
 80039fa:	2b12      	cmp	r3, #18
 80039fc:	d82a      	bhi.n	8003a54 <HAL_GPIO_Init+0xcc>
 80039fe:	2b12      	cmp	r3, #18
 8003a00:	d859      	bhi.n	8003ab6 <HAL_GPIO_Init+0x12e>
 8003a02:	a201      	add	r2, pc, #4	@ (adr r2, 8003a08 <HAL_GPIO_Init+0x80>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003a83 	.word	0x08003a83
 8003a0c:	08003a5d 	.word	0x08003a5d
 8003a10:	08003a6f 	.word	0x08003a6f
 8003a14:	08003ab1 	.word	0x08003ab1
 8003a18:	08003ab7 	.word	0x08003ab7
 8003a1c:	08003ab7 	.word	0x08003ab7
 8003a20:	08003ab7 	.word	0x08003ab7
 8003a24:	08003ab7 	.word	0x08003ab7
 8003a28:	08003ab7 	.word	0x08003ab7
 8003a2c:	08003ab7 	.word	0x08003ab7
 8003a30:	08003ab7 	.word	0x08003ab7
 8003a34:	08003ab7 	.word	0x08003ab7
 8003a38:	08003ab7 	.word	0x08003ab7
 8003a3c:	08003ab7 	.word	0x08003ab7
 8003a40:	08003ab7 	.word	0x08003ab7
 8003a44:	08003ab7 	.word	0x08003ab7
 8003a48:	08003ab7 	.word	0x08003ab7
 8003a4c:	08003a65 	.word	0x08003a65
 8003a50:	08003a79 	.word	0x08003a79
 8003a54:	4a79      	ldr	r2, [pc, #484]	@ (8003c3c <HAL_GPIO_Init+0x2b4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a5a:	e02c      	b.n	8003ab6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	623b      	str	r3, [r7, #32]
          break;
 8003a62:	e029      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	623b      	str	r3, [r7, #32]
          break;
 8003a6c:	e024      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	3308      	adds	r3, #8
 8003a74:	623b      	str	r3, [r7, #32]
          break;
 8003a76:	e01f      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	623b      	str	r3, [r7, #32]
          break;
 8003a80:	e01a      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	623b      	str	r3, [r7, #32]
          break;
 8003a8e:	e013      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d105      	bne.n	8003aa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a98:	2308      	movs	r3, #8
 8003a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	611a      	str	r2, [r3, #16]
          break;
 8003aa2:	e009      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003aa4:	2308      	movs	r3, #8
 8003aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	615a      	str	r2, [r3, #20]
          break;
 8003aae:	e003      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	623b      	str	r3, [r7, #32]
          break;
 8003ab4:	e000      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
          break;
 8003ab6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2bff      	cmp	r3, #255	@ 0xff
 8003abc:	d801      	bhi.n	8003ac2 <HAL_GPIO_Init+0x13a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	e001      	b.n	8003ac6 <HAL_GPIO_Init+0x13e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2bff      	cmp	r3, #255	@ 0xff
 8003acc:	d802      	bhi.n	8003ad4 <HAL_GPIO_Init+0x14c>
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	e002      	b.n	8003ada <HAL_GPIO_Init+0x152>
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	3b08      	subs	r3, #8
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	210f      	movs	r1, #15
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	401a      	ands	r2, r3
 8003aec:	6a39      	ldr	r1, [r7, #32]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	fa01 f303 	lsl.w	r3, r1, r3
 8003af4:	431a      	orrs	r2, r3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 80b1 	beq.w	8003c6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b08:	4b4d      	ldr	r3, [pc, #308]	@ (8003c40 <HAL_GPIO_Init+0x2b8>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	4a4c      	ldr	r2, [pc, #304]	@ (8003c40 <HAL_GPIO_Init+0x2b8>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	6193      	str	r3, [r2, #24]
 8003b14:	4b4a      	ldr	r3, [pc, #296]	@ (8003c40 <HAL_GPIO_Init+0x2b8>)
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b20:	4a48      	ldr	r2, [pc, #288]	@ (8003c44 <HAL_GPIO_Init+0x2bc>)
 8003b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b24:	089b      	lsrs	r3, r3, #2
 8003b26:	3302      	adds	r3, #2
 8003b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	220f      	movs	r2, #15
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4013      	ands	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a40      	ldr	r2, [pc, #256]	@ (8003c48 <HAL_GPIO_Init+0x2c0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d013      	beq.n	8003b74 <HAL_GPIO_Init+0x1ec>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a3f      	ldr	r2, [pc, #252]	@ (8003c4c <HAL_GPIO_Init+0x2c4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00d      	beq.n	8003b70 <HAL_GPIO_Init+0x1e8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a3e      	ldr	r2, [pc, #248]	@ (8003c50 <HAL_GPIO_Init+0x2c8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d007      	beq.n	8003b6c <HAL_GPIO_Init+0x1e4>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a3d      	ldr	r2, [pc, #244]	@ (8003c54 <HAL_GPIO_Init+0x2cc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d101      	bne.n	8003b68 <HAL_GPIO_Init+0x1e0>
 8003b64:	2303      	movs	r3, #3
 8003b66:	e006      	b.n	8003b76 <HAL_GPIO_Init+0x1ee>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	e004      	b.n	8003b76 <HAL_GPIO_Init+0x1ee>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e002      	b.n	8003b76 <HAL_GPIO_Init+0x1ee>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <HAL_GPIO_Init+0x1ee>
 8003b74:	2300      	movs	r3, #0
 8003b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b78:	f002 0203 	and.w	r2, r2, #3
 8003b7c:	0092      	lsls	r2, r2, #2
 8003b7e:	4093      	lsls	r3, r2
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b86:	492f      	ldr	r1, [pc, #188]	@ (8003c44 <HAL_GPIO_Init+0x2bc>)
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	089b      	lsrs	r3, r3, #2
 8003b8c:	3302      	adds	r3, #2
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d006      	beq.n	8003bae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	492c      	ldr	r1, [pc, #176]	@ (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	608b      	str	r3, [r1, #8]
 8003bac:	e006      	b.n	8003bbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003bae:	4b2a      	ldr	r3, [pc, #168]	@ (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	4928      	ldr	r1, [pc, #160]	@ (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d006      	beq.n	8003bd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003bc8:	4b23      	ldr	r3, [pc, #140]	@ (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	4922      	ldr	r1, [pc, #136]	@ (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60cb      	str	r3, [r1, #12]
 8003bd4:	e006      	b.n	8003be4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003bd6:	4b20      	ldr	r3, [pc, #128]	@ (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	491e      	ldr	r1, [pc, #120]	@ (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d006      	beq.n	8003bfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003bf0:	4b19      	ldr	r3, [pc, #100]	@ (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	4918      	ldr	r1, [pc, #96]	@ (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]
 8003bfc:	e006      	b.n	8003c0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003bfe:	4b16      	ldr	r3, [pc, #88]	@ (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	4914      	ldr	r1, [pc, #80]	@ (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d021      	beq.n	8003c5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c18:	4b0f      	ldr	r3, [pc, #60]	@ (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	490e      	ldr	r1, [pc, #56]	@ (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]
 8003c24:	e021      	b.n	8003c6a <HAL_GPIO_Init+0x2e2>
 8003c26:	bf00      	nop
 8003c28:	10320000 	.word	0x10320000
 8003c2c:	10310000 	.word	0x10310000
 8003c30:	10220000 	.word	0x10220000
 8003c34:	10210000 	.word	0x10210000
 8003c38:	10120000 	.word	0x10120000
 8003c3c:	10110000 	.word	0x10110000
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40010000 	.word	0x40010000
 8003c48:	40010800 	.word	0x40010800
 8003c4c:	40010c00 	.word	0x40010c00
 8003c50:	40011000 	.word	0x40011000
 8003c54:	40011400 	.word	0x40011400
 8003c58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c8c <HAL_GPIO_Init+0x304>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	4909      	ldr	r1, [pc, #36]	@ (8003c8c <HAL_GPIO_Init+0x304>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c76:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f47f ae8e 	bne.w	800399c <HAL_GPIO_Init+0x14>
  }
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop
 8003c84:	372c      	adds	r7, #44	@ 0x2c
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	40010400 	.word	0x40010400

08003c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ca0:	787b      	ldrb	r3, [r7, #1]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003cac:	e003      	b.n	8003cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003cae:	887b      	ldrh	r3, [r7, #2]
 8003cb0:	041a      	lsls	r2, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	611a      	str	r2, [r3, #16]
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e304      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 8087 	beq.w	8003dee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce0:	4b92      	ldr	r3, [pc, #584]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 030c 	and.w	r3, r3, #12
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d00c      	beq.n	8003d06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cec:	4b8f      	ldr	r3, [pc, #572]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d112      	bne.n	8003d1e <HAL_RCC_OscConfig+0x5e>
 8003cf8:	4b8c      	ldr	r3, [pc, #560]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d04:	d10b      	bne.n	8003d1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d06:	4b89      	ldr	r3, [pc, #548]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d06c      	beq.n	8003dec <HAL_RCC_OscConfig+0x12c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d168      	bne.n	8003dec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e2de      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d26:	d106      	bne.n	8003d36 <HAL_RCC_OscConfig+0x76>
 8003d28:	4b80      	ldr	r3, [pc, #512]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a7f      	ldr	r2, [pc, #508]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	e02e      	b.n	8003d94 <HAL_RCC_OscConfig+0xd4>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x98>
 8003d3e:	4b7b      	ldr	r3, [pc, #492]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a7a      	ldr	r2, [pc, #488]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	4b78      	ldr	r3, [pc, #480]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a77      	ldr	r2, [pc, #476]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e01d      	b.n	8003d94 <HAL_RCC_OscConfig+0xd4>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCC_OscConfig+0xbc>
 8003d62:	4b72      	ldr	r3, [pc, #456]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a71      	ldr	r2, [pc, #452]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	4b6f      	ldr	r3, [pc, #444]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a6e      	ldr	r2, [pc, #440]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCC_OscConfig+0xd4>
 8003d7c:	4b6b      	ldr	r3, [pc, #428]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a6a      	ldr	r2, [pc, #424]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	4b68      	ldr	r3, [pc, #416]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a67      	ldr	r2, [pc, #412]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d013      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7ff fce2 	bl	8003764 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da4:	f7ff fcde 	bl	8003764 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	@ 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e292      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	4b5d      	ldr	r3, [pc, #372]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0xe4>
 8003dc2:	e014      	b.n	8003dee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7ff fcce 	bl	8003764 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7ff fcca 	bl	8003764 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	@ 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e27e      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dde:	4b53      	ldr	r3, [pc, #332]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x10c>
 8003dea:	e000      	b.n	8003dee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d063      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e06:	4b49      	ldr	r3, [pc, #292]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d11c      	bne.n	8003e4c <HAL_RCC_OscConfig+0x18c>
 8003e12:	4b46      	ldr	r3, [pc, #280]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d116      	bne.n	8003e4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1e:	4b43      	ldr	r3, [pc, #268]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_RCC_OscConfig+0x176>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d001      	beq.n	8003e36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e252      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e36:	4b3d      	ldr	r3, [pc, #244]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4939      	ldr	r1, [pc, #228]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4a:	e03a      	b.n	8003ec2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d020      	beq.n	8003e96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e54:	4b36      	ldr	r3, [pc, #216]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7ff fc83 	bl	8003764 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e62:	f7ff fc7f 	bl	8003764 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e233      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e74:	4b2d      	ldr	r3, [pc, #180]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e80:	4b2a      	ldr	r3, [pc, #168]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4927      	ldr	r1, [pc, #156]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	600b      	str	r3, [r1, #0]
 8003e94:	e015      	b.n	8003ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e96:	4b26      	ldr	r3, [pc, #152]	@ (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7ff fc62 	bl	8003764 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea4:	f7ff fc5e 	bl	8003764 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e212      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d03a      	beq.n	8003f44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d019      	beq.n	8003f0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ed6:	4b17      	ldr	r3, [pc, #92]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003edc:	f7ff fc42 	bl	8003764 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee4:	f7ff fc3e 	bl	8003764 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e1f2      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f02:	2001      	movs	r0, #1
 8003f04:	f000 fbd0 	bl	80046a8 <RCC_Delay>
 8003f08:	e01c      	b.n	8003f44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f10:	f7ff fc28 	bl	8003764 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f16:	e00f      	b.n	8003f38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f18:	f7ff fc24 	bl	8003764 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d908      	bls.n	8003f38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e1d8      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
 8003f2a:	bf00      	nop
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	42420000 	.word	0x42420000
 8003f34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f38:	4b9b      	ldr	r3, [pc, #620]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e9      	bne.n	8003f18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80a6 	beq.w	800409e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f52:	2300      	movs	r3, #0
 8003f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f56:	4b94      	ldr	r3, [pc, #592]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10d      	bne.n	8003f7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	4b91      	ldr	r3, [pc, #580]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	4a90      	ldr	r2, [pc, #576]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f6c:	61d3      	str	r3, [r2, #28]
 8003f6e:	4b8e      	ldr	r3, [pc, #568]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7e:	4b8b      	ldr	r3, [pc, #556]	@ (80041ac <HAL_RCC_OscConfig+0x4ec>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d118      	bne.n	8003fbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f8a:	4b88      	ldr	r3, [pc, #544]	@ (80041ac <HAL_RCC_OscConfig+0x4ec>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a87      	ldr	r2, [pc, #540]	@ (80041ac <HAL_RCC_OscConfig+0x4ec>)
 8003f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f96:	f7ff fbe5 	bl	8003764 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9e:	f7ff fbe1 	bl	8003764 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b64      	cmp	r3, #100	@ 0x64
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e195      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	4b7e      	ldr	r3, [pc, #504]	@ (80041ac <HAL_RCC_OscConfig+0x4ec>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x312>
 8003fc4:	4b78      	ldr	r3, [pc, #480]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	4a77      	ldr	r2, [pc, #476]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	6213      	str	r3, [r2, #32]
 8003fd0:	e02d      	b.n	800402e <HAL_RCC_OscConfig+0x36e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x334>
 8003fda:	4b73      	ldr	r3, [pc, #460]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	4a72      	ldr	r2, [pc, #456]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	6213      	str	r3, [r2, #32]
 8003fe6:	4b70      	ldr	r3, [pc, #448]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	4a6f      	ldr	r2, [pc, #444]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8003fec:	f023 0304 	bic.w	r3, r3, #4
 8003ff0:	6213      	str	r3, [r2, #32]
 8003ff2:	e01c      	b.n	800402e <HAL_RCC_OscConfig+0x36e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	2b05      	cmp	r3, #5
 8003ffa:	d10c      	bne.n	8004016 <HAL_RCC_OscConfig+0x356>
 8003ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	4a69      	ldr	r2, [pc, #420]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8004002:	f043 0304 	orr.w	r3, r3, #4
 8004006:	6213      	str	r3, [r2, #32]
 8004008:	4b67      	ldr	r3, [pc, #412]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	4a66      	ldr	r2, [pc, #408]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	6213      	str	r3, [r2, #32]
 8004014:	e00b      	b.n	800402e <HAL_RCC_OscConfig+0x36e>
 8004016:	4b64      	ldr	r3, [pc, #400]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	4a63      	ldr	r2, [pc, #396]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 800401c:	f023 0301 	bic.w	r3, r3, #1
 8004020:	6213      	str	r3, [r2, #32]
 8004022:	4b61      	ldr	r3, [pc, #388]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	4a60      	ldr	r2, [pc, #384]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8004028:	f023 0304 	bic.w	r3, r3, #4
 800402c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d015      	beq.n	8004062 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004036:	f7ff fb95 	bl	8003764 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403c:	e00a      	b.n	8004054 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403e:	f7ff fb91 	bl	8003764 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404c:	4293      	cmp	r3, r2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e143      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004054:	4b54      	ldr	r3, [pc, #336]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0ee      	beq.n	800403e <HAL_RCC_OscConfig+0x37e>
 8004060:	e014      	b.n	800408c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004062:	f7ff fb7f 	bl	8003764 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004068:	e00a      	b.n	8004080 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406a:	f7ff fb7b 	bl	8003764 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004078:	4293      	cmp	r3, r2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e12d      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004080:	4b49      	ldr	r3, [pc, #292]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1ee      	bne.n	800406a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800408c:	7dfb      	ldrb	r3, [r7, #23]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d105      	bne.n	800409e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004092:	4b45      	ldr	r3, [pc, #276]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	4a44      	ldr	r2, [pc, #272]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8004098:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800409c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 808c 	beq.w	80041c0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80040a8:	4b3f      	ldr	r3, [pc, #252]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b4:	d10e      	bne.n	80040d4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80040b6:	4b3c      	ldr	r3, [pc, #240]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d108      	bne.n	80040d4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80040c2:	4b39      	ldr	r3, [pc, #228]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 80040c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80040ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e103      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d14e      	bne.n	800417a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80040dc:	4b32      	ldr	r3, [pc, #200]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80040e8:	4b2f      	ldr	r3, [pc, #188]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0ef      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80040fc:	4b2c      	ldr	r3, [pc, #176]	@ (80041b0 <HAL_RCC_OscConfig+0x4f0>)
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7ff fb2f 	bl	8003764 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800410a:	f7ff fb2b 	bl	8003764 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b64      	cmp	r3, #100	@ 0x64
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e0df      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800411c:	4b22      	ldr	r3, [pc, #136]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f0      	bne.n	800410a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8004128:	4b1f      	ldr	r3, [pc, #124]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 800412a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004134:	491c      	ldr	r1, [pc, #112]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8004136:	4313      	orrs	r3, r2
 8004138:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800413a:	4b1b      	ldr	r3, [pc, #108]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	4918      	ldr	r1, [pc, #96]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8004148:	4313      	orrs	r3, r2
 800414a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800414c:	4b18      	ldr	r3, [pc, #96]	@ (80041b0 <HAL_RCC_OscConfig+0x4f0>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004152:	f7ff fb07 	bl	8003764 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800415a:	f7ff fb03 	bl	8003764 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b64      	cmp	r3, #100	@ 0x64
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e0b7      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800416c:	4b0e      	ldr	r3, [pc, #56]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x49a>
 8004178:	e022      	b.n	80041c0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800417a:	4b0b      	ldr	r3, [pc, #44]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	4a0a      	ldr	r2, [pc, #40]	@ (80041a8 <HAL_RCC_OscConfig+0x4e8>)
 8004180:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004184:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8004186:	4b0a      	ldr	r3, [pc, #40]	@ (80041b0 <HAL_RCC_OscConfig+0x4f0>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418c:	f7ff faea 	bl	8003764 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8004192:	e00f      	b.n	80041b4 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004194:	f7ff fae6 	bl	8003764 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	@ 0x64
 80041a0:	d908      	bls.n	80041b4 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e09a      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40007000 	.word	0x40007000
 80041b0:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80041b4:	4b4b      	ldr	r3, [pc, #300]	@ (80042e4 <HAL_RCC_OscConfig+0x624>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e9      	bne.n	8004194 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8088 	beq.w	80042da <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041ca:	4b46      	ldr	r3, [pc, #280]	@ (80042e4 <HAL_RCC_OscConfig+0x624>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f003 030c 	and.w	r3, r3, #12
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d068      	beq.n	80042a8 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d14d      	bne.n	800427a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041de:	4b42      	ldr	r3, [pc, #264]	@ (80042e8 <HAL_RCC_OscConfig+0x628>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7ff fabe 	bl	8003764 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ec:	f7ff faba 	bl	8003764 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e06e      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041fe:	4b39      	ldr	r3, [pc, #228]	@ (80042e4 <HAL_RCC_OscConfig+0x624>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004212:	d10f      	bne.n	8004234 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8004214:	4b33      	ldr	r3, [pc, #204]	@ (80042e4 <HAL_RCC_OscConfig+0x624>)
 8004216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4931      	ldr	r1, [pc, #196]	@ (80042e4 <HAL_RCC_OscConfig+0x624>)
 800421e:	4313      	orrs	r3, r2
 8004220:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004222:	4b30      	ldr	r3, [pc, #192]	@ (80042e4 <HAL_RCC_OscConfig+0x624>)
 8004224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004226:	f023 020f 	bic.w	r2, r3, #15
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	492d      	ldr	r1, [pc, #180]	@ (80042e4 <HAL_RCC_OscConfig+0x624>)
 8004230:	4313      	orrs	r3, r2
 8004232:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004234:	4b2b      	ldr	r3, [pc, #172]	@ (80042e4 <HAL_RCC_OscConfig+0x624>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004244:	430b      	orrs	r3, r1
 8004246:	4927      	ldr	r1, [pc, #156]	@ (80042e4 <HAL_RCC_OscConfig+0x624>)
 8004248:	4313      	orrs	r3, r2
 800424a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800424c:	4b26      	ldr	r3, [pc, #152]	@ (80042e8 <HAL_RCC_OscConfig+0x628>)
 800424e:	2201      	movs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004252:	f7ff fa87 	bl	8003764 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425a:	f7ff fa83 	bl	8003764 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e037      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800426c:	4b1d      	ldr	r3, [pc, #116]	@ (80042e4 <HAL_RCC_OscConfig+0x624>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f0      	beq.n	800425a <HAL_RCC_OscConfig+0x59a>
 8004278:	e02f      	b.n	80042da <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427a:	4b1b      	ldr	r3, [pc, #108]	@ (80042e8 <HAL_RCC_OscConfig+0x628>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7ff fa70 	bl	8003764 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004288:	f7ff fa6c 	bl	8003764 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e020      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800429a:	4b12      	ldr	r3, [pc, #72]	@ (80042e4 <HAL_RCC_OscConfig+0x624>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x5c8>
 80042a6:	e018      	b.n	80042da <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e013      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042b4:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <HAL_RCC_OscConfig+0x624>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d106      	bne.n	80042d6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d001      	beq.n	80042da <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40021000 	.word	0x40021000
 80042e8:	42420060 	.word	0x42420060

080042ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0d0      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004300:	4b6a      	ldr	r3, [pc, #424]	@ (80044ac <HAL_RCC_ClockConfig+0x1c0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d910      	bls.n	8004330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430e:	4b67      	ldr	r3, [pc, #412]	@ (80044ac <HAL_RCC_ClockConfig+0x1c0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 0207 	bic.w	r2, r3, #7
 8004316:	4965      	ldr	r1, [pc, #404]	@ (80044ac <HAL_RCC_ClockConfig+0x1c0>)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	4313      	orrs	r3, r2
 800431c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800431e:	4b63      	ldr	r3, [pc, #396]	@ (80044ac <HAL_RCC_ClockConfig+0x1c0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0b8      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d020      	beq.n	800437e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004348:	4b59      	ldr	r3, [pc, #356]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4a58      	ldr	r2, [pc, #352]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 800434e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004352:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004360:	4b53      	ldr	r3, [pc, #332]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4a52      	ldr	r2, [pc, #328]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004366:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800436a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800436c:	4b50      	ldr	r3, [pc, #320]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	494d      	ldr	r1, [pc, #308]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 800437a:	4313      	orrs	r3, r2
 800437c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d040      	beq.n	800440c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d107      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004392:	4b47      	ldr	r3, [pc, #284]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d115      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e07f      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d107      	bne.n	80043ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043aa:	4b41      	ldr	r3, [pc, #260]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e073      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ba:	4b3d      	ldr	r3, [pc, #244]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e06b      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ca:	4b39      	ldr	r3, [pc, #228]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f023 0203 	bic.w	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4936      	ldr	r1, [pc, #216]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043dc:	f7ff f9c2 	bl	8003764 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e4:	f7ff f9be 	bl	8003764 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e053      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	4b2d      	ldr	r3, [pc, #180]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f003 020c 	and.w	r2, r3, #12
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	429a      	cmp	r2, r3
 800440a:	d1eb      	bne.n	80043e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800440c:	4b27      	ldr	r3, [pc, #156]	@ (80044ac <HAL_RCC_ClockConfig+0x1c0>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d210      	bcs.n	800443c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441a:	4b24      	ldr	r3, [pc, #144]	@ (80044ac <HAL_RCC_ClockConfig+0x1c0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 0207 	bic.w	r2, r3, #7
 8004422:	4922      	ldr	r1, [pc, #136]	@ (80044ac <HAL_RCC_ClockConfig+0x1c0>)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800442a:	4b20      	ldr	r3, [pc, #128]	@ (80044ac <HAL_RCC_ClockConfig+0x1c0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e032      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004448:	4b19      	ldr	r3, [pc, #100]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4916      	ldr	r1, [pc, #88]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004456:	4313      	orrs	r3, r2
 8004458:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004466:	4b12      	ldr	r3, [pc, #72]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	490e      	ldr	r1, [pc, #56]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004476:	4313      	orrs	r3, r2
 8004478:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800447a:	f000 f821 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 800447e:	4602      	mov	r2, r0
 8004480:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	490a      	ldr	r1, [pc, #40]	@ (80044b4 <HAL_RCC_ClockConfig+0x1c8>)
 800448c:	5ccb      	ldrb	r3, [r1, r3]
 800448e:	fa22 f303 	lsr.w	r3, r2, r3
 8004492:	4a09      	ldr	r2, [pc, #36]	@ (80044b8 <HAL_RCC_ClockConfig+0x1cc>)
 8004494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004496:	4b09      	ldr	r3, [pc, #36]	@ (80044bc <HAL_RCC_ClockConfig+0x1d0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff f920 	bl	80036e0 <HAL_InitTick>

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40022000 	.word	0x40022000
 80044b0:	40021000 	.word	0x40021000
 80044b4:	080056f4 	.word	0x080056f4
 80044b8:	20000000 	.word	0x20000000
 80044bc:	20000010 	.word	0x20000010

080044c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c4:	b092      	sub	sp, #72	@ 0x48
 80044c6:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044cc:	2300      	movs	r3, #0
 80044ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044d0:	2300      	movs	r3, #0
 80044d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044d4:	2300      	movs	r3, #0
 80044d6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t sysclockfreq = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	643b      	str	r3, [r7, #64]	@ 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	633b      	str	r3, [r7, #48]	@ 0x30
 80044e0:	2300      	movs	r3, #0
 80044e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044e4:	4b6b      	ldr	r3, [pc, #428]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ec:	f003 030c 	and.w	r3, r3, #12
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d002      	beq.n	80044fa <HAL_RCC_GetSysClockFreq+0x3a>
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d003      	beq.n	8004500 <HAL_RCC_GetSysClockFreq+0x40>
 80044f8:	e0c3      	b.n	8004682 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044fa:	4b67      	ldr	r3, [pc, #412]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80044fc:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80044fe:	e0c3      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004502:	0c9b      	lsrs	r3, r3, #18
 8004504:	f003 020f 	and.w	r2, r3, #15
 8004508:	4b64      	ldr	r3, [pc, #400]	@ (800469c <HAL_RCC_GetSysClockFreq+0x1dc>)
 800450a:	5c9b      	ldrb	r3, [r3, r2]
 800450c:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800450e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80ac 	beq.w	8004672 <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800451a:	4b5e      	ldr	r3, [pc, #376]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451e:	f003 020f 	and.w	r2, r3, #15
 8004522:	4b5f      	ldr	r3, [pc, #380]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8004524:	5c9b      	ldrb	r3, [r3, r2]
 8004526:	63bb      	str	r3, [r7, #56]	@ 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8004528:	4b5a      	ldr	r3, [pc, #360]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800452a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 808c 	beq.w	800464e <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8004536:	4b57      	ldr	r3, [pc, #348]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453a:	091b      	lsrs	r3, r3, #4
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	3301      	adds	r3, #1
 8004542:	633b      	str	r3, [r7, #48]	@ 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8004544:	4b53      	ldr	r3, [pc, #332]	@ (8004694 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	0a1b      	lsrs	r3, r3, #8
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	3302      	adds	r3, #2
 8004550:	62fb      	str	r3, [r7, #44]	@ 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8004552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004554:	2200      	movs	r2, #0
 8004556:	623b      	str	r3, [r7, #32]
 8004558:	627a      	str	r2, [r7, #36]	@ 0x24
 800455a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800455c:	2200      	movs	r2, #0
 800455e:	4618      	mov	r0, r3
 8004560:	4611      	mov	r1, r2
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	fb00 f203 	mul.w	r2, r0, r3
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	fb03 f301 	mul.w	r3, r3, r1
 800456e:	4413      	add	r3, r2
 8004570:	6a3a      	ldr	r2, [r7, #32]
 8004572:	fba2 4500 	umull	r4, r5, r2, r0
 8004576:	442b      	add	r3, r5
 8004578:	461d      	mov	r5, r3
 800457a:	4622      	mov	r2, r4
 800457c:	462b      	mov	r3, r5
 800457e:	f04f 0000 	mov.w	r0, #0
 8004582:	f04f 0100 	mov.w	r1, #0
 8004586:	0159      	lsls	r1, r3, #5
 8004588:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800458c:	0150      	lsls	r0, r2, #5
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	ebb2 0a04 	subs.w	sl, r2, r4
 8004596:	eb63 0b05 	sbc.w	fp, r3, r5
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045a6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045aa:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045ae:	ebb2 080a 	subs.w	r8, r2, sl
 80045b2:	eb63 090b 	sbc.w	r9, r3, fp
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045ca:	4690      	mov	r8, r2
 80045cc:	4699      	mov	r9, r3
 80045ce:	eb18 0304 	adds.w	r3, r8, r4
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	eb49 0305 	adc.w	r3, r9, r5
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045e6:	4629      	mov	r1, r5
 80045e8:	024b      	lsls	r3, r1, #9
 80045ea:	4620      	mov	r0, r4
 80045ec:	4629      	mov	r1, r5
 80045ee:	4604      	mov	r4, r0
 80045f0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80045f4:	4601      	mov	r1, r0
 80045f6:	024a      	lsls	r2, r1, #9
 80045f8:	4610      	mov	r0, r2
 80045fa:	4619      	mov	r1, r3
 80045fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fe:	2200      	movs	r2, #0
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	617a      	str	r2, [r7, #20]
 8004604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004606:	2200      	movs	r2, #0
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	60fa      	str	r2, [r7, #12]
 800460c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004610:	4622      	mov	r2, r4
 8004612:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8004616:	4645      	mov	r5, r8
 8004618:	fb05 f202 	mul.w	r2, r5, r2
 800461c:	46cc      	mov	ip, r9
 800461e:	4625      	mov	r5, r4
 8004620:	461c      	mov	r4, r3
 8004622:	4623      	mov	r3, r4
 8004624:	fb03 f30c 	mul.w	r3, r3, ip
 8004628:	4413      	add	r3, r2
 800462a:	4622      	mov	r2, r4
 800462c:	4644      	mov	r4, r8
 800462e:	fba2 2404 	umull	r2, r4, r2, r4
 8004632:	61fc      	str	r4, [r7, #28]
 8004634:	61ba      	str	r2, [r7, #24]
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004640:	f7fb fdf0 	bl	8000224 <__aeabi_uldivmod>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4613      	mov	r3, r2
 800464a:	647b      	str	r3, [r7, #68]	@ 0x44
 800464c:	e007      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800464e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004650:	4a11      	ldr	r2, [pc, #68]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004652:	fb03 f202 	mul.w	r2, r3, r2
 8004656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004658:	fbb2 f3f3 	udiv	r3, r2, r3
 800465c:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800465e:	4b0f      	ldr	r3, [pc, #60]	@ (800469c <HAL_RCC_GetSysClockFreq+0x1dc>)
 8004660:	7b5b      	ldrb	r3, [r3, #13]
 8004662:	461a      	mov	r2, r3
 8004664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004666:	4293      	cmp	r3, r2
 8004668:	d108      	bne.n	800467c <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 800466a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800466c:	085b      	lsrs	r3, r3, #1
 800466e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004670:	e004      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004674:	4a0b      	ldr	r2, [pc, #44]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllclk;
 800467c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800467e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004680:	e002      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004682:	4b05      	ldr	r3, [pc, #20]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8004684:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004686:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800468a:	4618      	mov	r0, r3
 800468c:	3748      	adds	r7, #72	@ 0x48
 800468e:	46bd      	mov	sp, r7
 8004690:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004694:	40021000 	.word	0x40021000
 8004698:	007a1200 	.word	0x007a1200
 800469c:	08005c78 	.word	0x08005c78
 80046a0:	08005c88 	.word	0x08005c88
 80046a4:	003d0900 	.word	0x003d0900

080046a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046b0:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <RCC_Delay+0x34>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0a      	ldr	r2, [pc, #40]	@ (80046e0 <RCC_Delay+0x38>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	0a5b      	lsrs	r3, r3, #9
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046c4:	bf00      	nop
  }
  while (Delay --);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1e5a      	subs	r2, r3, #1
 80046ca:	60fa      	str	r2, [r7, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f9      	bne.n	80046c4 <RCC_Delay+0x1c>
}
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr
 80046dc:	20000000 	.word	0x20000000
 80046e0:	10624dd3 	.word	0x10624dd3

080046e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e041      	b.n	800477a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fc f870 	bl	80007f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f000 f948 	bl	80049b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b01      	cmp	r3, #1
 8004796:	d001      	beq.n	800479c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e037      	b.n	800480c <HAL_TIM_Base_Start+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004818 <HAL_TIM_Base_Start+0x94>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <HAL_TIM_Base_Start+0x52>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b6:	d00e      	beq.n	80047d6 <HAL_TIM_Base_Start+0x52>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a17      	ldr	r2, [pc, #92]	@ (800481c <HAL_TIM_Base_Start+0x98>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d009      	beq.n	80047d6 <HAL_TIM_Base_Start+0x52>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a16      	ldr	r2, [pc, #88]	@ (8004820 <HAL_TIM_Base_Start+0x9c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_TIM_Base_Start+0x52>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a14      	ldr	r2, [pc, #80]	@ (8004824 <HAL_TIM_Base_Start+0xa0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d111      	bne.n	80047fa <HAL_TIM_Base_Start+0x76>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b06      	cmp	r3, #6
 80047e6:	d010      	beq.n	800480a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f8:	e007      	b.n	800480a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0201 	orr.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3714      	adds	r7, #20
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800
 8004824:	40000c00 	.word	0x40000c00

08004828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_TIM_ConfigClockSource+0x1c>
 8004840:	2302      	movs	r3, #2
 8004842:	e0b4      	b.n	80049ae <HAL_TIM_ConfigClockSource+0x186>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800486a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800487c:	d03e      	beq.n	80048fc <HAL_TIM_ConfigClockSource+0xd4>
 800487e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004882:	f200 8087 	bhi.w	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 8004886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800488a:	f000 8086 	beq.w	800499a <HAL_TIM_ConfigClockSource+0x172>
 800488e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004892:	d87f      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 8004894:	2b70      	cmp	r3, #112	@ 0x70
 8004896:	d01a      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0xa6>
 8004898:	2b70      	cmp	r3, #112	@ 0x70
 800489a:	d87b      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 800489c:	2b60      	cmp	r3, #96	@ 0x60
 800489e:	d050      	beq.n	8004942 <HAL_TIM_ConfigClockSource+0x11a>
 80048a0:	2b60      	cmp	r3, #96	@ 0x60
 80048a2:	d877      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 80048a4:	2b50      	cmp	r3, #80	@ 0x50
 80048a6:	d03c      	beq.n	8004922 <HAL_TIM_ConfigClockSource+0xfa>
 80048a8:	2b50      	cmp	r3, #80	@ 0x50
 80048aa:	d873      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 80048ac:	2b40      	cmp	r3, #64	@ 0x40
 80048ae:	d058      	beq.n	8004962 <HAL_TIM_ConfigClockSource+0x13a>
 80048b0:	2b40      	cmp	r3, #64	@ 0x40
 80048b2:	d86f      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 80048b4:	2b30      	cmp	r3, #48	@ 0x30
 80048b6:	d064      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x15a>
 80048b8:	2b30      	cmp	r3, #48	@ 0x30
 80048ba:	d86b      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d060      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x15a>
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d867      	bhi.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d05c      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x15a>
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d05a      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x15a>
 80048cc:	e062      	b.n	8004994 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048de:	f000 f95a 	bl	8004b96 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	609a      	str	r2, [r3, #8]
      break;
 80048fa:	e04f      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800490c:	f000 f943 	bl	8004b96 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800491e:	609a      	str	r2, [r3, #8]
      break;
 8004920:	e03c      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800492e:	461a      	mov	r2, r3
 8004930:	f000 f8ba 	bl	8004aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2150      	movs	r1, #80	@ 0x50
 800493a:	4618      	mov	r0, r3
 800493c:	f000 f911 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 8004940:	e02c      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800494e:	461a      	mov	r2, r3
 8004950:	f000 f8d8 	bl	8004b04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2160      	movs	r1, #96	@ 0x60
 800495a:	4618      	mov	r0, r3
 800495c:	f000 f901 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 8004960:	e01c      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800496e:	461a      	mov	r2, r3
 8004970:	f000 f89a 	bl	8004aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2140      	movs	r1, #64	@ 0x40
 800497a:	4618      	mov	r0, r3
 800497c:	f000 f8f1 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 8004980:	e00c      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f000 f8e8 	bl	8004b62 <TIM_ITRx_SetConfig>
      break;
 8004992:	e003      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
      break;
 8004998:	e000      	b.n	800499c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800499a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a33      	ldr	r2, [pc, #204]	@ (8004a98 <TIM_Base_SetConfig+0xe0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00f      	beq.n	80049f0 <TIM_Base_SetConfig+0x38>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d6:	d00b      	beq.n	80049f0 <TIM_Base_SetConfig+0x38>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a30      	ldr	r2, [pc, #192]	@ (8004a9c <TIM_Base_SetConfig+0xe4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d007      	beq.n	80049f0 <TIM_Base_SetConfig+0x38>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a2f      	ldr	r2, [pc, #188]	@ (8004aa0 <TIM_Base_SetConfig+0xe8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_Base_SetConfig+0x38>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a2e      	ldr	r2, [pc, #184]	@ (8004aa4 <TIM_Base_SetConfig+0xec>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d108      	bne.n	8004a02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a24      	ldr	r2, [pc, #144]	@ (8004a98 <TIM_Base_SetConfig+0xe0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00f      	beq.n	8004a2a <TIM_Base_SetConfig+0x72>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a10:	d00b      	beq.n	8004a2a <TIM_Base_SetConfig+0x72>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a21      	ldr	r2, [pc, #132]	@ (8004a9c <TIM_Base_SetConfig+0xe4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <TIM_Base_SetConfig+0x72>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a20      	ldr	r2, [pc, #128]	@ (8004aa0 <TIM_Base_SetConfig+0xe8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d003      	beq.n	8004a2a <TIM_Base_SetConfig+0x72>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a1f      	ldr	r2, [pc, #124]	@ (8004aa4 <TIM_Base_SetConfig+0xec>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d108      	bne.n	8004a3c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a0d      	ldr	r2, [pc, #52]	@ (8004a98 <TIM_Base_SetConfig+0xe0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d103      	bne.n	8004a70 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f023 0201 	bic.w	r2, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	611a      	str	r2, [r3, #16]
  }
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40000400 	.word	0x40000400
 8004aa0:	40000800 	.word	0x40000800
 8004aa4:	40000c00 	.word	0x40000c00

08004aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f023 0201 	bic.w	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 030a 	bic.w	r3, r3, #10
 8004ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	621a      	str	r2, [r3, #32]
}
 8004afa:	bf00      	nop
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr

08004b04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f023 0210 	bic.w	r2, r3, #16
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	031b      	lsls	r3, r3, #12
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	621a      	str	r2, [r3, #32]
}
 8004b58:	bf00      	nop
 8004b5a:	371c      	adds	r7, #28
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr

08004b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b085      	sub	sp, #20
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
 8004b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f043 0307 	orr.w	r3, r3, #7
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	609a      	str	r2, [r3, #8]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b087      	sub	sp, #28
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	607a      	str	r2, [r7, #4]
 8004ba2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	021a      	lsls	r2, r3, #8
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	609a      	str	r2, [r3, #8]
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e04b      	b.n	8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a19      	ldr	r2, [pc, #100]	@ (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d013      	beq.n	8004c58 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c38:	d00e      	beq.n	8004c58 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a15      	ldr	r2, [pc, #84]	@ (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d009      	beq.n	8004c58 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a13      	ldr	r2, [pc, #76]	@ (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a12      	ldr	r2, [pc, #72]	@ (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d10c      	bne.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40012c00 	.word	0x40012c00
 8004c94:	40000400 	.word	0x40000400
 8004c98:	40000800 	.word	0x40000800
 8004c9c:	40000c00 	.word	0x40000c00

08004ca0 <memset>:
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	4402      	add	r2, r0
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d100      	bne.n	8004caa <memset+0xa>
 8004ca8:	4770      	bx	lr
 8004caa:	f803 1b01 	strb.w	r1, [r3], #1
 8004cae:	e7f9      	b.n	8004ca4 <memset+0x4>

08004cb0 <__libc_init_array>:
 8004cb0:	b570      	push	{r4, r5, r6, lr}
 8004cb2:	2600      	movs	r6, #0
 8004cb4:	4d0c      	ldr	r5, [pc, #48]	@ (8004ce8 <__libc_init_array+0x38>)
 8004cb6:	4c0d      	ldr	r4, [pc, #52]	@ (8004cec <__libc_init_array+0x3c>)
 8004cb8:	1b64      	subs	r4, r4, r5
 8004cba:	10a4      	asrs	r4, r4, #2
 8004cbc:	42a6      	cmp	r6, r4
 8004cbe:	d109      	bne.n	8004cd4 <__libc_init_array+0x24>
 8004cc0:	f000 f81a 	bl	8004cf8 <_init>
 8004cc4:	2600      	movs	r6, #0
 8004cc6:	4d0a      	ldr	r5, [pc, #40]	@ (8004cf0 <__libc_init_array+0x40>)
 8004cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8004cf4 <__libc_init_array+0x44>)
 8004cca:	1b64      	subs	r4, r4, r5
 8004ccc:	10a4      	asrs	r4, r4, #2
 8004cce:	42a6      	cmp	r6, r4
 8004cd0:	d105      	bne.n	8004cde <__libc_init_array+0x2e>
 8004cd2:	bd70      	pop	{r4, r5, r6, pc}
 8004cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd8:	4798      	blx	r3
 8004cda:	3601      	adds	r6, #1
 8004cdc:	e7ee      	b.n	8004cbc <__libc_init_array+0xc>
 8004cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce2:	4798      	blx	r3
 8004ce4:	3601      	adds	r6, #1
 8004ce6:	e7f2      	b.n	8004cce <__libc_init_array+0x1e>
 8004ce8:	08005ca0 	.word	0x08005ca0
 8004cec:	08005ca0 	.word	0x08005ca0
 8004cf0:	08005ca0 	.word	0x08005ca0
 8004cf4:	08005ca4 	.word	0x08005ca4

08004cf8 <_init>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	bf00      	nop
 8004cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfe:	bc08      	pop	{r3}
 8004d00:	469e      	mov	lr, r3
 8004d02:	4770      	bx	lr

08004d04 <_fini>:
 8004d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d06:	bf00      	nop
 8004d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0a:	bc08      	pop	{r3}
 8004d0c:	469e      	mov	lr, r3
 8004d0e:	4770      	bx	lr
